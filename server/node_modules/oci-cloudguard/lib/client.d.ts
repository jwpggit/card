/**
 * Cloud Guard and Security Zones API
 * Use the Cloud Guard and Security Zones API to automate processes that you would otherwise perform through the Cloud Guard Console or the Security Zones Console. For more information on these services, see the [Cloud Guard](/iaas/cloud-guard/home.htm) and [Security Zones](/iaas/security-zone/home.htm) documentation.

**Note:** For Cloud Guard, you can perform Create, Update, and Delete operations only from the reporting region of your Cloud Guard tenancy. You can perform Read operations from any region.

 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { CloudGuardWaiter } from "./cloudguard-waiter";
export declare enum CloudGuardApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class CloudGuardClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": CloudGuardWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpOptions: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new CloudGuardWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): CloudGuardWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): CloudGuardWaiter;
    /**
     * Add an existing compartment to a security zone. If you previously removed a subcompartment from a security zone, you can add it back to the same security zone. The security zone ensures that resources in the subcompartment comply with the security zone's policies.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddCompartmentRequest
     * @return AddCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/AddCompartment.ts.html |here} to see how to use AddCompartment API.
     */
    addCompartment(addCompartmentRequest: requests.AddCompartmentRequest): Promise<responses.AddCompartmentResponse>;
    /**
     * Cancels the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest: requests.CancelWorkRequestRequest): Promise<responses.CancelWorkRequestResponse>;
    /**
     * Moves the DataSource from current compartment to another.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeDataSourceCompartmentRequest
     * @return ChangeDataSourceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ChangeDataSourceCompartment.ts.html |here} to see how to use ChangeDataSourceCompartment API.
     */
    changeDataSourceCompartment(changeDataSourceCompartmentRequest: requests.ChangeDataSourceCompartmentRequest): Promise<responses.ChangeDataSourceCompartmentResponse>;
    /**
     * Moves the DetectorRecipe from current compartment to another.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeDetectorRecipeCompartmentRequest
     * @return ChangeDetectorRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ChangeDetectorRecipeCompartment.ts.html |here} to see how to use ChangeDetectorRecipeCompartment API.
     */
    changeDetectorRecipeCompartment(changeDetectorRecipeCompartmentRequest: requests.ChangeDetectorRecipeCompartmentRequest): Promise<responses.ChangeDetectorRecipeCompartmentResponse>;
    /**
     * Moves the ManagedList from current compartment to another.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeManagedListCompartmentRequest
     * @return ChangeManagedListCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ChangeManagedListCompartment.ts.html |here} to see how to use ChangeManagedListCompartment API.
     */
    changeManagedListCompartment(changeManagedListCompartmentRequest: requests.ChangeManagedListCompartmentRequest): Promise<responses.ChangeManagedListCompartmentResponse>;
    /**
     * Moves the ResponderRecipe from current compartment to another.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeResponderRecipeCompartmentRequest
     * @return ChangeResponderRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ChangeResponderRecipeCompartment.ts.html |here} to see how to use ChangeResponderRecipeCompartment API.
     */
    changeResponderRecipeCompartment(changeResponderRecipeCompartmentRequest: requests.ChangeResponderRecipeCompartmentRequest): Promise<responses.ChangeResponderRecipeCompartmentResponse>;
    /**
     * Moves a security zone recipe to a different compartment. When provided, `If-Match` is checked against `ETag` values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeSecurityRecipeCompartmentRequest
     * @return ChangeSecurityRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ChangeSecurityRecipeCompartment.ts.html |here} to see how to use ChangeSecurityRecipeCompartment API.
     */
    changeSecurityRecipeCompartment(changeSecurityRecipeCompartmentRequest: requests.ChangeSecurityRecipeCompartmentRequest): Promise<responses.ChangeSecurityRecipeCompartmentResponse>;
    /**
     * Moves a security zone to a different compartment. When provided, `If-Match` is checked against `ETag` values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeSecurityZoneCompartmentRequest
     * @return ChangeSecurityZoneCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ChangeSecurityZoneCompartment.ts.html |here} to see how to use ChangeSecurityZoneCompartment API.
     */
    changeSecurityZoneCompartment(changeSecurityZoneCompartmentRequest: requests.ChangeSecurityZoneCompartmentRequest): Promise<responses.ChangeSecurityZoneCompartmentResponse>;
    /**
     * Creates a new Data Mask Rule Definition
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDataMaskRuleRequest
     * @return CreateDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateDataMaskRule.ts.html |here} to see how to use CreateDataMaskRule API.
     */
    createDataMaskRule(createDataMaskRuleRequest: requests.CreateDataMaskRuleRequest): Promise<responses.CreateDataMaskRuleResponse>;
    /**
     * Creates a DataSource
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDataSourceRequest
     * @return CreateDataSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateDataSource.ts.html |here} to see how to use CreateDataSource API.
     */
    createDataSource(createDataSourceRequest: requests.CreateDataSourceRequest): Promise<responses.CreateDataSourceResponse>;
    /**
     * Creates a DetectorRecipe
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDetectorRecipeRequest
     * @return CreateDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateDetectorRecipe.ts.html |here} to see how to use CreateDetectorRecipe API.
     */
    createDetectorRecipe(createDetectorRecipeRequest: requests.CreateDetectorRecipeRequest): Promise<responses.CreateDetectorRecipeResponse>;
    /**
     * Create the DetectorRule
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDetectorRecipeDetectorRuleRequest
     * @return CreateDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateDetectorRecipeDetectorRule.ts.html |here} to see how to use CreateDetectorRecipeDetectorRule API.
     */
    createDetectorRecipeDetectorRule(createDetectorRecipeDetectorRuleRequest: requests.CreateDetectorRecipeDetectorRuleRequest): Promise<responses.CreateDetectorRecipeDetectorRuleResponse>;
    /**
     * Creates a new ManagedList.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateManagedListRequest
     * @return CreateManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateManagedList.ts.html |here} to see how to use CreateManagedList API.
     */
    createManagedList(createManagedListRequest: requests.CreateManagedListRequest): Promise<responses.CreateManagedListResponse>;
    /**
     * Create a ResponderRecipe.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateResponderRecipeRequest
     * @return CreateResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateResponderRecipe.ts.html |here} to see how to use CreateResponderRecipe API.
     */
    createResponderRecipe(createResponderRecipeRequest: requests.CreateResponderRecipeRequest): Promise<responses.CreateResponderRecipeResponse>;
    /**
     * Creates a security zone recipe. A security zone recipe is a collection of security zone policies.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSecurityRecipeRequest
     * @return CreateSecurityRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateSecurityRecipe.ts.html |here} to see how to use CreateSecurityRecipe API.
     */
    createSecurityRecipe(createSecurityRecipeRequest: requests.CreateSecurityRecipeRequest): Promise<responses.CreateSecurityRecipeResponse>;
    /**
     * Creates a security zone for a compartment. A security zone enforces all security zone policies in a given security zone recipe. Any actions that violate a policy are denied. By default, any subcompartments are also in the same security zone.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSecurityZoneRequest
     * @return CreateSecurityZoneResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateSecurityZone.ts.html |here} to see how to use CreateSecurityZone API.
     */
    createSecurityZone(createSecurityZoneRequest: requests.CreateSecurityZoneRequest): Promise<responses.CreateSecurityZoneResponse>;
    /**
     * Creates a new Target
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateTargetRequest
     * @return CreateTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateTarget.ts.html |here} to see how to use CreateTarget API.
     */
    createTarget(createTargetRequest: requests.CreateTargetRequest): Promise<responses.CreateTargetResponse>;
    /**
     * Attach a DetectorRecipe with the Target
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateTargetDetectorRecipeRequest
     * @return CreateTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateTargetDetectorRecipe.ts.html |here} to see how to use CreateTargetDetectorRecipe API.
     */
    createTargetDetectorRecipe(createTargetDetectorRecipeRequest: requests.CreateTargetDetectorRecipeRequest): Promise<responses.CreateTargetDetectorRecipeResponse>;
    /**
     * Attach a ResponderRecipe with the Target
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateTargetResponderRecipeRequest
     * @return CreateTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/CreateTargetResponderRecipe.ts.html |here} to see how to use CreateTargetResponderRecipe API.
     */
    createTargetResponderRecipe(createTargetResponderRecipeRequest: requests.CreateTargetResponderRecipeRequest): Promise<responses.CreateTargetResponderRecipeResponse>;
    /**
     * Deletes a DataMaskRule identified by dataMaskRuleId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDataMaskRuleRequest
     * @return DeleteDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteDataMaskRule.ts.html |here} to see how to use DeleteDataMaskRule API.
     */
    deleteDataMaskRule(deleteDataMaskRuleRequest: requests.DeleteDataMaskRuleRequest): Promise<responses.DeleteDataMaskRuleResponse>;
    /**
     * Deletes a DataSource identified by dataSourceId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDataSourceRequest
     * @return DeleteDataSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteDataSource.ts.html |here} to see how to use DeleteDataSource API.
     */
    deleteDataSource(deleteDataSourceRequest: requests.DeleteDataSourceRequest): Promise<responses.DeleteDataSourceResponse>;
    /**
     * Deletes a DetectorRecipe identified by detectorRecipeId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDetectorRecipeRequest
     * @return DeleteDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteDetectorRecipe.ts.html |here} to see how to use DeleteDetectorRecipe API.
     */
    deleteDetectorRecipe(deleteDetectorRecipeRequest: requests.DeleteDetectorRecipeRequest): Promise<responses.DeleteDetectorRecipeResponse>;
    /**
     * Deletes DetectorRecipeDetectorRule
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDetectorRecipeDetectorRuleRequest
     * @return DeleteDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteDetectorRecipeDetectorRule.ts.html |here} to see how to use DeleteDetectorRecipeDetectorRule API.
     */
    deleteDetectorRecipeDetectorRule(deleteDetectorRecipeDetectorRuleRequest: requests.DeleteDetectorRecipeDetectorRuleRequest): Promise<responses.DeleteDetectorRecipeDetectorRuleResponse>;
    /**
     * Delete the DetectorRecipeDetectorRuleDataSource resource by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDetectorRecipeDetectorRuleDataSourceRequest
     * @return DeleteDetectorRecipeDetectorRuleDataSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteDetectorRecipeDetectorRuleDataSource.ts.html |here} to see how to use DeleteDetectorRecipeDetectorRuleDataSource API.
     */
    deleteDetectorRecipeDetectorRuleDataSource(deleteDetectorRecipeDetectorRuleDataSourceRequest: requests.DeleteDetectorRecipeDetectorRuleDataSourceRequest): Promise<responses.DeleteDetectorRecipeDetectorRuleDataSourceResponse>;
    /**
     * Deletes a managed list identified by managedListId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteManagedListRequest
     * @return DeleteManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteManagedList.ts.html |here} to see how to use DeleteManagedList API.
     */
    deleteManagedList(deleteManagedListRequest: requests.DeleteManagedListRequest): Promise<responses.DeleteManagedListResponse>;
    /**
     * Delete the ResponderRecipe resource by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteResponderRecipeRequest
     * @return DeleteResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteResponderRecipe.ts.html |here} to see how to use DeleteResponderRecipe API.
     */
    deleteResponderRecipe(deleteResponderRecipeRequest: requests.DeleteResponderRecipeRequest): Promise<responses.DeleteResponderRecipeResponse>;
    /**
     * Deletes a security zone recipe. The recipe can't be associated with an existing security zone.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSecurityRecipeRequest
     * @return DeleteSecurityRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteSecurityRecipe.ts.html |here} to see how to use DeleteSecurityRecipe API.
     */
    deleteSecurityRecipe(deleteSecurityRecipeRequest: requests.DeleteSecurityRecipeRequest): Promise<responses.DeleteSecurityRecipeResponse>;
    /**
     * Deletes an existing security zone with a given identifier.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSecurityZoneRequest
     * @return DeleteSecurityZoneResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteSecurityZone.ts.html |here} to see how to use DeleteSecurityZone API.
     */
    deleteSecurityZone(deleteSecurityZoneRequest: requests.DeleteSecurityZoneRequest): Promise<responses.DeleteSecurityZoneResponse>;
    /**
     * Deletes a Target identified by targetId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteTargetRequest
     * @return DeleteTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteTarget.ts.html |here} to see how to use DeleteTarget API.
     */
    deleteTarget(deleteTargetRequest: requests.DeleteTargetRequest): Promise<responses.DeleteTargetResponse>;
    /**
     * Delete the TargetDetectorRecipe resource by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteTargetDetectorRecipeRequest
     * @return DeleteTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteTargetDetectorRecipe.ts.html |here} to see how to use DeleteTargetDetectorRecipe API.
     */
    deleteTargetDetectorRecipe(deleteTargetDetectorRecipeRequest: requests.DeleteTargetDetectorRecipeRequest): Promise<responses.DeleteTargetDetectorRecipeResponse>;
    /**
     * Delete the TargetResponderRecipe resource by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteTargetResponderRecipeRequest
     * @return DeleteTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/DeleteTargetResponderRecipe.ts.html |here} to see how to use DeleteTargetResponderRecipe API.
     */
    deleteTargetResponderRecipe(deleteTargetResponderRecipeRequest: requests.DeleteTargetResponderRecipeRequest): Promise<responses.DeleteTargetResponderRecipeResponse>;
    /**
     * Executes the responder execution. When provided, If-Match is checked against ETag values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ExecuteResponderExecutionRequest
     * @return ExecuteResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ExecuteResponderExecution.ts.html |here} to see how to use ExecuteResponderExecution API.
     */
    executeResponderExecution(executeResponderExecutionRequest: requests.ExecuteResponderExecutionRequest): Promise<responses.ExecuteResponderExecutionResponse>;
    /**
     * Returns ConditionType with its details.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetConditionMetadataTypeRequest
     * @return GetConditionMetadataTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetConditionMetadataType.ts.html |here} to see how to use GetConditionMetadataType API.
     */
    getConditionMetadataType(getConditionMetadataTypeRequest: requests.GetConditionMetadataTypeRequest): Promise<responses.GetConditionMetadataTypeResponse>;
    /**
     * GET Cloud Guard Configuration Details for a Tenancy.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetConfigurationRequest
     * @return GetConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetConfiguration.ts.html |here} to see how to use GetConfiguration API.
     */
    getConfiguration(getConfigurationRequest: requests.GetConfigurationRequest): Promise<responses.GetConfigurationResponse>;
    /**
     * Returns a DataMaskRule identified by DataMaskRuleId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDataMaskRuleRequest
     * @return GetDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetDataMaskRule.ts.html |here} to see how to use GetDataMaskRule API.
     */
    getDataMaskRule(getDataMaskRuleRequest: requests.GetDataMaskRuleRequest): Promise<responses.GetDataMaskRuleResponse>;
    /**
     * Returns a DataSource identified by dataSourceId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDataSourceRequest
     * @return GetDataSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetDataSource.ts.html |here} to see how to use GetDataSource API.
     */
    getDataSource(getDataSourceRequest: requests.GetDataSourceRequest): Promise<responses.GetDataSourceResponse>;
    /**
     * Returns a Detector identified by detectorId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDetectorRequest
     * @return GetDetectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetDetector.ts.html |here} to see how to use GetDetector API.
     */
    getDetector(getDetectorRequest: requests.GetDetectorRequest): Promise<responses.GetDetectorResponse>;
    /**
     * Returns a DetectorRecipe identified by detectorRecipeId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDetectorRecipeRequest
     * @return GetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetDetectorRecipe.ts.html |here} to see how to use GetDetectorRecipe API.
     */
    getDetectorRecipe(getDetectorRecipeRequest: requests.GetDetectorRecipeRequest): Promise<responses.GetDetectorRecipeResponse>;
    /**
     * Get DetectorRule by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDetectorRecipeDetectorRuleRequest
     * @return GetDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetDetectorRecipeDetectorRule.ts.html |here} to see how to use GetDetectorRecipeDetectorRule API.
     */
    getDetectorRecipeDetectorRule(getDetectorRecipeDetectorRuleRequest: requests.GetDetectorRecipeDetectorRuleRequest): Promise<responses.GetDetectorRecipeDetectorRuleResponse>;
    /**
     * Returns a Detector Rule identified by detectorRuleId
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDetectorRuleRequest
     * @return GetDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetDetectorRule.ts.html |here} to see how to use GetDetectorRule API.
     */
    getDetectorRule(getDetectorRuleRequest: requests.GetDetectorRuleRequest): Promise<responses.GetDetectorRuleResponse>;
    /**
     * Returns a managed list identified by managedListId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagedListRequest
     * @return GetManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetManagedList.ts.html |here} to see how to use GetManagedList API.
     */
    getManagedList(getManagedListRequest: requests.GetManagedListRequest): Promise<responses.GetManagedListResponse>;
    /**
     * Returns a Problems response
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetProblemRequest
     * @return GetProblemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetProblem.ts.html |here} to see how to use GetProblem API.
     */
    getProblem(getProblemRequest: requests.GetProblemRequest): Promise<responses.GetProblemResponse>;
    /**
     * Returns resource profile details
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetResourceProfileRequest
     * @return GetResourceProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetResourceProfile.ts.html |here} to see how to use GetResourceProfile API.
     */
    getResourceProfile(getResourceProfileRequest: requests.GetResourceProfileRequest): Promise<responses.GetResourceProfileResponse>;
    /**
     * Returns a Responder Execution identified by responderExecutionId
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetResponderExecutionRequest
     * @return GetResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetResponderExecution.ts.html |here} to see how to use GetResponderExecution API.
     */
    getResponderExecution(getResponderExecutionRequest: requests.GetResponderExecutionRequest): Promise<responses.GetResponderExecutionResponse>;
    /**
     * Get a ResponderRecipe by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetResponderRecipeRequest
     * @return GetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetResponderRecipe.ts.html |here} to see how to use GetResponderRecipe API.
     */
    getResponderRecipe(getResponderRecipeRequest: requests.GetResponderRecipeRequest): Promise<responses.GetResponderRecipeResponse>;
    /**
     * Get ResponderRule by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetResponderRecipeResponderRuleRequest
     * @return GetResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetResponderRecipeResponderRule.ts.html |here} to see how to use GetResponderRecipeResponderRule API.
     */
    getResponderRecipeResponderRule(getResponderRecipeResponderRuleRequest: requests.GetResponderRecipeResponderRuleRequest): Promise<responses.GetResponderRecipeResponderRuleResponse>;
    /**
     * Get a ResponderRule by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetResponderRuleRequest
     * @return GetResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetResponderRule.ts.html |here} to see how to use GetResponderRule API.
     */
    getResponderRule(getResponderRuleRequest: requests.GetResponderRuleRequest): Promise<responses.GetResponderRuleResponse>;
    /**
     * Gets a security zone policy using its identifier. When a policy is enabled in a security zone, then any action in the zone that attempts to violate that policy is denied.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSecurityPolicyRequest
     * @return GetSecurityPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetSecurityPolicy.ts.html |here} to see how to use GetSecurityPolicy API.
     */
    getSecurityPolicy(getSecurityPolicyRequest: requests.GetSecurityPolicyRequest): Promise<responses.GetSecurityPolicyResponse>;
    /**
     * Gets a security zone recipe by identifier. A security zone recipe is a collection of security zone policies.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSecurityRecipeRequest
     * @return GetSecurityRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetSecurityRecipe.ts.html |here} to see how to use GetSecurityRecipe API.
     */
    getSecurityRecipe(getSecurityRecipeRequest: requests.GetSecurityRecipeRequest): Promise<responses.GetSecurityRecipeResponse>;
    /**
     * Gets a security zone by its identifier. A security zone is associated with a security zone recipe and enforces all security zone policies in the recipe. Any actions in the zone's compartments that violate a policy are denied.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSecurityZoneRequest
     * @return GetSecurityZoneResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetSecurityZone.ts.html |here} to see how to use GetSecurityZone API.
     */
    getSecurityZone(getSecurityZoneRequest: requests.GetSecurityZoneRequest): Promise<responses.GetSecurityZoneResponse>;
    /**
     * Returns Sighting details
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSightingRequest
     * @return GetSightingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetSighting.ts.html |here} to see how to use GetSighting API.
     */
    getSighting(getSightingRequest: requests.GetSightingRequest): Promise<responses.GetSightingResponse>;
    /**
     * Returns a Target identified by targetId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTargetRequest
     * @return GetTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetTarget.ts.html |here} to see how to use GetTarget API.
     */
    getTarget(getTargetRequest: requests.GetTargetRequest): Promise<responses.GetTargetResponse>;
    /**
     * Get a TargetDetectorRecipe by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTargetDetectorRecipeRequest
     * @return GetTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetTargetDetectorRecipe.ts.html |here} to see how to use GetTargetDetectorRecipe API.
     */
    getTargetDetectorRecipe(getTargetDetectorRecipeRequest: requests.GetTargetDetectorRecipeRequest): Promise<responses.GetTargetDetectorRecipeResponse>;
    /**
     * Get DetectorRule by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTargetDetectorRecipeDetectorRuleRequest
     * @return GetTargetDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetTargetDetectorRecipeDetectorRule.ts.html |here} to see how to use GetTargetDetectorRecipeDetectorRule API.
     */
    getTargetDetectorRecipeDetectorRule(getTargetDetectorRecipeDetectorRuleRequest: requests.GetTargetDetectorRecipeDetectorRuleRequest): Promise<responses.GetTargetDetectorRecipeDetectorRuleResponse>;
    /**
     * Get a TargetResponderRecipe by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTargetResponderRecipeRequest
     * @return GetTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetTargetResponderRecipe.ts.html |here} to see how to use GetTargetResponderRecipe API.
     */
    getTargetResponderRecipe(getTargetResponderRecipeRequest: requests.GetTargetResponderRecipeRequest): Promise<responses.GetTargetResponderRecipeResponse>;
    /**
     * Get ResponderRule by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTargetResponderRecipeResponderRuleRequest
     * @return GetTargetResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetTargetResponderRecipeResponderRule.ts.html |here} to see how to use GetTargetResponderRecipeResponderRule API.
     */
    getTargetResponderRecipeResponderRule(getTargetResponderRecipeResponderRuleRequest: requests.GetTargetResponderRecipeResponderRuleRequest): Promise<responses.GetTargetResponderRecipeResponderRuleResponse>;
    /**
     * Gets details of the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Returns a list of condition types.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListConditionMetadataTypesRequest
     * @return ListConditionMetadataTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListConditionMetadataTypes.ts.html |here} to see how to use ListConditionMetadataTypes API.
     */
    listConditionMetadataTypes(listConditionMetadataTypesRequest: requests.ListConditionMetadataTypesRequest): Promise<responses.ListConditionMetadataTypesResponse>;
    /**
     * Returns a list of all Data Mask Rules in the root 'compartmentId' passed.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDataMaskRulesRequest
     * @return ListDataMaskRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListDataMaskRules.ts.html |here} to see how to use ListDataMaskRules API.
     */
    listDataMaskRules(listDataMaskRulesRequest: requests.ListDataMaskRulesRequest): Promise<responses.ListDataMaskRulesResponse>;
    /**
     * Returns a list of events from CloudGuard DataSource
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDataSourceEventsRequest
     * @return ListDataSourceEventsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListDataSourceEvents.ts.html |here} to see how to use ListDataSourceEvents API.
     */
    listDataSourceEvents(listDataSourceEventsRequest: requests.ListDataSourceEventsRequest): Promise<responses.ListDataSourceEventsResponse>;
    /**
       * Returns a list of all Data Sources in a compartment
  * <p>
  The ListDataSources operation returns only the data Sources in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListdataSources on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListDataSourcesRequest
       * @return ListDataSourcesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListDataSources.ts.html |here} to see how to use ListDataSources API.
       */
    listDataSources(listDataSourcesRequest: requests.ListDataSourcesRequest): Promise<responses.ListDataSourcesResponse>;
    /**
     * Returns a list of DetectorRule associated with DetectorRecipe.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDetectorRecipeDetectorRulesRequest
     * @return ListDetectorRecipeDetectorRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListDetectorRecipeDetectorRules.ts.html |here} to see how to use ListDetectorRecipeDetectorRules API.
     */
    listDetectorRecipeDetectorRules(listDetectorRecipeDetectorRulesRequest: requests.ListDetectorRecipeDetectorRulesRequest): Promise<responses.ListDetectorRecipeDetectorRulesResponse>;
    /**
       * Returns a list of all Detector Recipes in a compartment
  * <p>
  The ListDetectorRecipes operation returns only the detector recipes in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListDetectorRecipes on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListDetectorRecipesRequest
       * @return ListDetectorRecipesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListDetectorRecipes.ts.html |here} to see how to use ListDetectorRecipes API.
       */
    listDetectorRecipes(listDetectorRecipesRequest: requests.ListDetectorRecipesRequest): Promise<responses.ListDetectorRecipesResponse>;
    /**
     * Returns a list of detector rules for the detectorId passed.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDetectorRulesRequest
     * @return ListDetectorRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListDetectorRules.ts.html |here} to see how to use ListDetectorRules API.
     */
    listDetectorRules(listDetectorRulesRequest: requests.ListDetectorRulesRequest): Promise<responses.ListDetectorRulesResponse>;
    /**
     * Returns detector catalog - list of detectors supported by Cloud Guard
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDetectorsRequest
     * @return ListDetectorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListDetectors.ts.html |here} to see how to use ListDetectors API.
     */
    listDetectors(listDetectorsRequest: requests.ListDetectorsRequest): Promise<responses.ListDetectorsResponse>;
    /**
     * Returns a list of Impacted Resources for a CloudGuard Problem
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListImpactedResourcesRequest
     * @return ListImpactedResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListImpactedResources.ts.html |here} to see how to use ListImpactedResources API.
     */
    listImpactedResources(listImpactedResourcesRequest: requests.ListImpactedResourcesRequest): Promise<responses.ListImpactedResourcesResponse>;
    /**
     * Returns all ManagedList types supported by Cloud Guard
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagedListTypesRequest
     * @return ListManagedListTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListManagedListTypes.ts.html |here} to see how to use ListManagedListTypes API.
     */
    listManagedListTypes(listManagedListTypesRequest: requests.ListManagedListTypesRequest): Promise<responses.ListManagedListTypesResponse>;
    /**
       * Returns a list of ListManagedLists.
  * The ListManagedLists operation returns only the managed lists in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return ManagedLists in only
  * those compartments for which the requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListManagedLists on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListManagedListsRequest
       * @return ListManagedListsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListManagedLists.ts.html |here} to see how to use ListManagedLists API.
       */
    listManagedLists(listManagedListsRequest: requests.ListManagedListsRequest): Promise<responses.ListManagedListsResponse>;
    /**
     * Returns the list of global policy statements needed by Cloud Guard when enabling
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListPoliciesRequest
     * @return ListPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListPolicies.ts.html |here} to see how to use ListPolicies API.
     */
    listPolicies(listPoliciesRequest: requests.ListPoliciesRequest): Promise<responses.ListPoliciesResponse>;
    /**
     * Returns a list of endpoints associated with a cloud guard problem
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListProblemEndpointsRequest
     * @return ListProblemEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListProblemEndpoints.ts.html |here} to see how to use ListProblemEndpoints API.
     */
    listProblemEndpoints(listProblemEndpointsRequest: requests.ListProblemEndpointsRequest): Promise<responses.ListProblemEndpointsResponse>;
    /**
     * Returns a list of entities for a CloudGuard Problem
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListProblemEntitiesRequest
     * @return ListProblemEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListProblemEntities.ts.html |here} to see how to use ListProblemEntities API.
     */
    listProblemEntities(listProblemEntitiesRequest: requests.ListProblemEntitiesRequest): Promise<responses.ListProblemEntitiesResponse>;
    /**
     * Returns a list of Actions done on CloudGuard Problem
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListProblemHistoriesRequest
     * @return ListProblemHistoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListProblemHistories.ts.html |here} to see how to use ListProblemHistories API.
     */
    listProblemHistories(listProblemHistoriesRequest: requests.ListProblemHistoriesRequest): Promise<responses.ListProblemHistoriesResponse>;
    /**
       * Returns a list of all Problems identified by the Cloud Guard
  * <p>
  The ListProblems operation returns only the problems in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListProblems on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListProblemsRequest
       * @return ListProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListProblems.ts.html |here} to see how to use ListProblems API.
       */
    listProblems(listProblemsRequest: requests.ListProblemsRequest): Promise<responses.ListProblemsResponse>;
    /**
     * Returns a list of all Recommendations.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListRecommendationsRequest
     * @return ListRecommendationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListRecommendations.ts.html |here} to see how to use ListRecommendations API.
     */
    listRecommendations(listRecommendationsRequest: requests.ListRecommendationsRequest): Promise<responses.ListRecommendationsResponse>;
    /**
     * Returns a list of endpoints for Cloud Guard resource profile
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListResourceProfileEndpointsRequest
     * @return ListResourceProfileEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListResourceProfileEndpoints.ts.html |here} to see how to use ListResourceProfileEndpoints API.
     */
    listResourceProfileEndpoints(listResourceProfileEndpointsRequest: requests.ListResourceProfileEndpointsRequest): Promise<responses.ListResourceProfileEndpointsResponse>;
    /**
     * Returns a list of impacted resources for Cloud Guard resource profile
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListResourceProfileImpactedResourcesRequest
     * @return ListResourceProfileImpactedResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListResourceProfileImpactedResources.ts.html |here} to see how to use ListResourceProfileImpactedResources API.
     */
    listResourceProfileImpactedResources(listResourceProfileImpactedResourcesRequest: requests.ListResourceProfileImpactedResourcesRequest): Promise<responses.ListResourceProfileImpactedResourcesResponse>;
    /**
       * Returns a list of all resource profiles identified by the Cloud Guard
  * The ListResourceProfiles operation returns only resource profiles that match the passed filters.
  * <p>
  The ListResourceProfiles operation returns only the resource profiles in `compartmentId` passed.
  * The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListResourceProfiles on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListResourceProfilesRequest
       * @return ListResourceProfilesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListResourceProfiles.ts.html |here} to see how to use ListResourceProfiles API.
       */
    listResourceProfiles(listResourceProfilesRequest: requests.ListResourceProfilesRequest): Promise<responses.ListResourceProfilesResponse>;
    /**
     * Returns a list of resource types.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListResourceTypesRequest
     * @return ListResourceTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListResourceTypes.ts.html |here} to see how to use ListResourceTypes API.
     */
    listResourceTypes(listResourceTypesRequest: requests.ListResourceTypesRequest): Promise<responses.ListResourceTypesResponse>;
    /**
     * Returns a list of Responder activities done on CloudGuard Problem
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListResponderActivitiesRequest
     * @return ListResponderActivitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListResponderActivities.ts.html |here} to see how to use ListResponderActivities API.
     */
    listResponderActivities(listResponderActivitiesRequest: requests.ListResponderActivitiesRequest): Promise<responses.ListResponderActivitiesResponse>;
    /**
     * Returns a list of Responder Executions. A Responder Execution is an entity that tracks the collective execution of multiple Responder Rule Executions for a given Problem.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListResponderExecutionsRequest
     * @return ListResponderExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListResponderExecutions.ts.html |here} to see how to use ListResponderExecutions API.
     */
    listResponderExecutions(listResponderExecutionsRequest: requests.ListResponderExecutionsRequest): Promise<responses.ListResponderExecutionsResponse>;
    /**
     * Returns a list of ResponderRule associated with ResponderRecipe.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListResponderRecipeResponderRulesRequest
     * @return ListResponderRecipeResponderRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListResponderRecipeResponderRules.ts.html |here} to see how to use ListResponderRecipeResponderRules API.
     */
    listResponderRecipeResponderRules(listResponderRecipeResponderRulesRequest: requests.ListResponderRecipeResponderRulesRequest): Promise<responses.ListResponderRecipeResponderRulesResponse>;
    /**
       * Returns a list of all ResponderRecipes in a compartment
  * The ListResponderRecipe operation returns only the targets in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListResponderRecipe on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListResponderRecipesRequest
       * @return ListResponderRecipesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListResponderRecipes.ts.html |here} to see how to use ListResponderRecipes API.
       */
    listResponderRecipes(listResponderRecipesRequest: requests.ListResponderRecipesRequest): Promise<responses.ListResponderRecipesResponse>;
    /**
     * Returns a list of ResponderRule.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListResponderRulesRequest
     * @return ListResponderRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListResponderRules.ts.html |here} to see how to use ListResponderRules API.
     */
    listResponderRules(listResponderRulesRequest: requests.ListResponderRulesRequest): Promise<responses.ListResponderRulesResponse>;
    /**
     * Returns a list of security zone policies. Specify any compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSecurityPoliciesRequest
     * @return ListSecurityPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListSecurityPolicies.ts.html |here} to see how to use ListSecurityPolicies API.
     */
    listSecurityPolicies(listSecurityPoliciesRequest: requests.ListSecurityPoliciesRequest): Promise<responses.ListSecurityPoliciesResponse>;
    /**
     * Gets a list of all security zone recipes in a compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSecurityRecipesRequest
     * @return ListSecurityRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListSecurityRecipes.ts.html |here} to see how to use ListSecurityRecipes API.
     */
    listSecurityRecipes(listSecurityRecipesRequest: requests.ListSecurityRecipesRequest): Promise<responses.ListSecurityRecipesResponse>;
    /**
     * Gets a list of all security zones in a compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSecurityZonesRequest
     * @return ListSecurityZonesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListSecurityZones.ts.html |here} to see how to use ListSecurityZones API.
     */
    listSecurityZones(listSecurityZonesRequest: requests.ListSecurityZonesRequest): Promise<responses.ListSecurityZonesResponse>;
    /**
     * Returns Sighting endpoints details
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSightingEndpointsRequest
     * @return ListSightingEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListSightingEndpoints.ts.html |here} to see how to use ListSightingEndpoints API.
     */
    listSightingEndpoints(listSightingEndpointsRequest: requests.ListSightingEndpointsRequest): Promise<responses.ListSightingEndpointsResponse>;
    /**
     * Return a list of Impacted Resources for a CloudGuard Sighting
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSightingImpactedResourcesRequest
     * @return ListSightingImpactedResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListSightingImpactedResources.ts.html |here} to see how to use ListSightingImpactedResources API.
     */
    listSightingImpactedResources(listSightingImpactedResourcesRequest: requests.ListSightingImpactedResourcesRequest): Promise<responses.ListSightingImpactedResourcesResponse>;
    /**
       * Returns a list of all Sightings identified by the Cloud Guard
  * The ListSightings operation returns only sightings that match the passed filters.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSightings on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListSightingsRequest
       * @return ListSightingsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListSightings.ts.html |here} to see how to use ListSightings API.
       */
    listSightings(listSightingsRequest: requests.ListSightingsRequest): Promise<responses.ListSightingsResponse>;
    /**
     * Returns a list of tactics associated with detector rules.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTacticsRequest
     * @return ListTacticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListTactics.ts.html |here} to see how to use ListTactics API.
     */
    listTactics(listTacticsRequest: requests.ListTacticsRequest): Promise<responses.ListTacticsResponse>;
    /**
     * Returns a list of DetectorRule associated with DetectorRecipe within a Target.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTargetDetectorRecipeDetectorRulesRequest
     * @return ListTargetDetectorRecipeDetectorRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListTargetDetectorRecipeDetectorRules.ts.html |here} to see how to use ListTargetDetectorRecipeDetectorRules API.
     */
    listTargetDetectorRecipeDetectorRules(listTargetDetectorRecipeDetectorRulesRequest: requests.ListTargetDetectorRecipeDetectorRulesRequest): Promise<responses.ListTargetDetectorRecipeDetectorRulesResponse>;
    /**
     * Returns a list of all detector recipes associated with the target identified by targetId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTargetDetectorRecipesRequest
     * @return ListTargetDetectorRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListTargetDetectorRecipes.ts.html |here} to see how to use ListTargetDetectorRecipes API.
     */
    listTargetDetectorRecipes(listTargetDetectorRecipesRequest: requests.ListTargetDetectorRecipesRequest): Promise<responses.ListTargetDetectorRecipesResponse>;
    /**
     * Returns a list of ResponderRule associated with ResponderRecipe within a Target.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTargetResponderRecipeResponderRulesRequest
     * @return ListTargetResponderRecipeResponderRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListTargetResponderRecipeResponderRules.ts.html |here} to see how to use ListTargetResponderRecipeResponderRules API.
     */
    listTargetResponderRecipeResponderRules(listTargetResponderRecipeResponderRulesRequest: requests.ListTargetResponderRecipeResponderRulesRequest): Promise<responses.ListTargetResponderRecipeResponderRulesResponse>;
    /**
     * Returns a list of all responder recipes associated with the target identified by targetId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTargetResponderRecipesRequest
     * @return ListTargetResponderRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListTargetResponderRecipes.ts.html |here} to see how to use ListTargetResponderRecipes API.
     */
    listTargetResponderRecipes(listTargetResponderRecipesRequest: requests.ListTargetResponderRecipesRequest): Promise<responses.ListTargetResponderRecipesResponse>;
    /**
       * Returns a list of all Targets in a compartment
  * The ListTargets operation returns only the targets in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListTargets on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListTargetsRequest
       * @return ListTargetsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListTargets.ts.html |here} to see how to use ListTargets API.
       */
    listTargets(listTargetsRequest: requests.ListTargetsRequest): Promise<responses.ListTargetsResponse>;
    /**
     * Returns a list of techniques associated with detector rules.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTechniquesRequest
     * @return ListTechniquesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListTechniques.ts.html |here} to see how to use ListTechniques API.
     */
    listTechniques(listTechniquesRequest: requests.ListTechniquesRequest): Promise<responses.ListTechniquesResponse>;
    /**
     * Return a (paginated) list of errors for a given work request.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Return a (paginated) list of logs for a given work request.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * Removes an existing compartment from a security zone. When you remove a subcompartment from a security zone, it no longer enforces security zone policies on the resources in the subcompartment. You can't remove the primary compartment that was used to create the security zone.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveCompartmentRequest
     * @return RemoveCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RemoveCompartment.ts.html |here} to see how to use RemoveCompartment API.
     */
    removeCompartment(removeCompartmentRequest: requests.RemoveCompartmentRequest): Promise<responses.RemoveCompartmentResponse>;
    /**
     * Examines the number of problems related to the resource and the relative severity of those problems.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestRiskScoresRequest
     * @return RequestRiskScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestRiskScores.ts.html |here} to see how to use RequestRiskScores API.
     */
    requestRiskScores(requestRiskScoresRequest: requests.RequestRiskScoresRequest): Promise<responses.RequestRiskScoresResponse>;
    /**
     * Measures the number of resources examined across all regions and compares it with the
     * number of problems detected, for a given time period.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSecurityScoreSummarizedTrendRequest
     * @return RequestSecurityScoreSummarizedTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSecurityScoreSummarizedTrend.ts.html |here} to see how to use RequestSecurityScoreSummarizedTrend API.
     */
    requestSecurityScoreSummarizedTrend(requestSecurityScoreSummarizedTrendRequest: requests.RequestSecurityScoreSummarizedTrendRequest): Promise<responses.RequestSecurityScoreSummarizedTrendResponse>;
    /**
     * Measures the number of resources examined across all regions and compares it with the number of problems detected.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSecurityScoresRequest
     * @return RequestSecurityScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSecurityScores.ts.html |here} to see how to use RequestSecurityScores API.
     */
    requestSecurityScores(requestSecurityScoresRequest: requests.RequestSecurityScoresRequest): Promise<responses.RequestSecurityScoresResponse>;
    /**
       * Returns the summary of Activity type problems identified by cloud guard, for a given set of dimensions.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  * <p>
  The compartmentId to be passed with `accessLevel` and `compartmentIdInSubtree` params has to be the root
  * compartment id (tenant-id) only.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param RequestSummarizedActivityProblemsRequest
       * @return RequestSummarizedActivityProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSummarizedActivityProblems.ts.html |here} to see how to use RequestSummarizedActivityProblems API.
       */
    requestSummarizedActivityProblems(requestSummarizedActivityProblemsRequest: requests.RequestSummarizedActivityProblemsRequest): Promise<responses.RequestSummarizedActivityProblemsResponse>;
    /**
       * Returns the number of problems identified by cloud guard, for a given set of dimensions.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param RequestSummarizedProblemsRequest
       * @return RequestSummarizedProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSummarizedProblems.ts.html |here} to see how to use RequestSummarizedProblems API.
       */
    requestSummarizedProblems(requestSummarizedProblemsRequest: requests.RequestSummarizedProblemsRequest): Promise<responses.RequestSummarizedProblemsResponse>;
    /**
       * Returns the number of Responder Executions, for a given set of dimensions.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param RequestSummarizedResponderExecutionsRequest
       * @return RequestSummarizedResponderExecutionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSummarizedResponderExecutions.ts.html |here} to see how to use RequestSummarizedResponderExecutions API.
       */
    requestSummarizedResponderExecutions(requestSummarizedResponderExecutionsRequest: requests.RequestSummarizedResponderExecutionsRequest): Promise<responses.RequestSummarizedResponderExecutionsResponse>;
    /**
     * DEPRECATED
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSummarizedRiskScoresRequest
     * @return RequestSummarizedRiskScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSummarizedRiskScores.ts.html |here} to see how to use RequestSummarizedRiskScores API.
     */
    requestSummarizedRiskScores(requestSummarizedRiskScoresRequest: requests.RequestSummarizedRiskScoresRequest): Promise<responses.RequestSummarizedRiskScoresResponse>;
    /**
     * DEPRECATED
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSummarizedSecurityScoresRequest
     * @return RequestSummarizedSecurityScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSummarizedSecurityScores.ts.html |here} to see how to use RequestSummarizedSecurityScores API.
     */
    requestSummarizedSecurityScores(requestSummarizedSecurityScoresRequest: requests.RequestSummarizedSecurityScoresRequest): Promise<responses.RequestSummarizedSecurityScoresResponse>;
    /**
     * Summarizes the resource profile risk score top trends for the given time range based on the search filters.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSummarizedTopTrendResourceProfileRiskScoresRequest
     * @return RequestSummarizedTopTrendResourceProfileRiskScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSummarizedTopTrendResourceProfileRiskScores.ts.html |here} to see how to use RequestSummarizedTopTrendResourceProfileRiskScores API.
     */
    requestSummarizedTopTrendResourceProfileRiskScores(requestSummarizedTopTrendResourceProfileRiskScoresRequest: requests.RequestSummarizedTopTrendResourceProfileRiskScoresRequest): Promise<responses.RequestSummarizedTopTrendResourceProfileRiskScoresResponse>;
    /**
       * Returns the number of problems identified by cloud guard, for a given time period.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param RequestSummarizedTrendProblemsRequest
       * @return RequestSummarizedTrendProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSummarizedTrendProblems.ts.html |here} to see how to use RequestSummarizedTrendProblems API.
       */
    requestSummarizedTrendProblems(requestSummarizedTrendProblemsRequest: requests.RequestSummarizedTrendProblemsRequest): Promise<responses.RequestSummarizedTrendProblemsResponse>;
    /**
     * Summarizes the resource risk score trend for the given time range based on the search filters.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSummarizedTrendResourceRiskScoresRequest
     * @return RequestSummarizedTrendResourceRiskScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSummarizedTrendResourceRiskScores.ts.html |here} to see how to use RequestSummarizedTrendResourceRiskScores API.
     */
    requestSummarizedTrendResourceRiskScores(requestSummarizedTrendResourceRiskScoresRequest: requests.RequestSummarizedTrendResourceRiskScoresRequest): Promise<responses.RequestSummarizedTrendResourceRiskScoresResponse>;
    /**
       * Returns the number of remediations performed by Responders, for a given time period.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param RequestSummarizedTrendResponderExecutionsRequest
       * @return RequestSummarizedTrendResponderExecutionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSummarizedTrendResponderExecutions.ts.html |here} to see how to use RequestSummarizedTrendResponderExecutions API.
       */
    requestSummarizedTrendResponderExecutions(requestSummarizedTrendResponderExecutionsRequest: requests.RequestSummarizedTrendResponderExecutionsRequest): Promise<responses.RequestSummarizedTrendResponderExecutionsResponse>;
    /**
     * DEPRECATED
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSummarizedTrendSecurityScoresRequest
     * @return RequestSummarizedTrendSecurityScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/RequestSummarizedTrendSecurityScores.ts.html |here} to see how to use RequestSummarizedTrendSecurityScores API.
     */
    requestSummarizedTrendSecurityScores(requestSummarizedTrendSecurityScoresRequest: requests.RequestSummarizedTrendSecurityScoresRequest): Promise<responses.RequestSummarizedTrendSecurityScoresResponse>;
    /**
     * Skips the execution for a bulk of responder executions
     * The operation is atomic in nature
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SkipBulkResponderExecutionRequest
     * @return SkipBulkResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/SkipBulkResponderExecution.ts.html |here} to see how to use SkipBulkResponderExecution API.
     */
    skipBulkResponderExecution(skipBulkResponderExecutionRequest: requests.SkipBulkResponderExecutionRequest): Promise<responses.SkipBulkResponderExecutionResponse>;
    /**
     * Skips the execution of the responder execution. When provided, If-Match is checked against ETag values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SkipResponderExecutionRequest
     * @return SkipResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/SkipResponderExecution.ts.html |here} to see how to use SkipResponderExecution API.
     */
    skipResponderExecution(skipResponderExecutionRequest: requests.SkipResponderExecutionRequest): Promise<responses.SkipResponderExecutionResponse>;
    /**
     * push the problem to responder
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param TriggerResponderRequest
     * @return TriggerResponderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/TriggerResponder.ts.html |here} to see how to use TriggerResponder API.
     */
    triggerResponder(triggerResponderRequest: requests.TriggerResponderRequest): Promise<responses.TriggerResponderResponse>;
    /**
     * Updates the statuses in bulk for a list of problems
     * The operation is atomic in nature
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateBulkProblemStatusRequest
     * @return UpdateBulkProblemStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateBulkProblemStatus.ts.html |here} to see how to use UpdateBulkProblemStatus API.
     */
    updateBulkProblemStatus(updateBulkProblemStatusRequest: requests.UpdateBulkProblemStatusRequest): Promise<responses.UpdateBulkProblemStatusResponse>;
    /**
     * Enable/Disable Cloud Guard. The reporting region cannot be updated once created.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateConfigurationRequest
     * @return UpdateConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateConfiguration.ts.html |here} to see how to use UpdateConfiguration API.
     */
    updateConfiguration(updateConfigurationRequest: requests.UpdateConfigurationRequest): Promise<responses.UpdateConfigurationResponse>;
    /**
     * Updates a DataMaskRule identified by dataMaskRuleId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDataMaskRuleRequest
     * @return UpdateDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateDataMaskRule.ts.html |here} to see how to use UpdateDataMaskRule API.
     */
    updateDataMaskRule(updateDataMaskRuleRequest: requests.UpdateDataMaskRuleRequest): Promise<responses.UpdateDataMaskRuleResponse>;
    /**
     * Updates a data source identified by dataSourceId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDataSourceRequest
     * @return UpdateDataSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateDataSource.ts.html |here} to see how to use UpdateDataSource API.
     */
    updateDataSource(updateDataSourceRequest: requests.UpdateDataSourceRequest): Promise<responses.UpdateDataSourceResponse>;
    /**
     * Updates a detector recipe identified by detectorRecipeId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDetectorRecipeRequest
     * @return UpdateDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateDetectorRecipe.ts.html |here} to see how to use UpdateDetectorRecipe API.
     */
    updateDetectorRecipe(updateDetectorRecipeRequest: requests.UpdateDetectorRecipeRequest): Promise<responses.UpdateDetectorRecipeResponse>;
    /**
     * Update the DetectorRule by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDetectorRecipeDetectorRuleRequest
     * @return UpdateDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateDetectorRecipeDetectorRule.ts.html |here} to see how to use UpdateDetectorRecipeDetectorRule API.
     */
    updateDetectorRecipeDetectorRule(updateDetectorRecipeDetectorRuleRequest: requests.UpdateDetectorRecipeDetectorRuleRequest): Promise<responses.UpdateDetectorRecipeDetectorRuleResponse>;
    /**
     * Updates a managed list identified by managedListId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateManagedListRequest
     * @return UpdateManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateManagedList.ts.html |here} to see how to use UpdateManagedList API.
     */
    updateManagedList(updateManagedListRequest: requests.UpdateManagedListRequest): Promise<responses.UpdateManagedListResponse>;
    /**
     * updates the problem details
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateProblemStatusRequest
     * @return UpdateProblemStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateProblemStatus.ts.html |here} to see how to use UpdateProblemStatus API.
     */
    updateProblemStatus(updateProblemStatusRequest: requests.UpdateProblemStatusRequest): Promise<responses.UpdateProblemStatusResponse>;
    /**
     * Update the ResponderRecipe resource by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateResponderRecipeRequest
     * @return UpdateResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateResponderRecipe.ts.html |here} to see how to use UpdateResponderRecipe API.
     */
    updateResponderRecipe(updateResponderRecipeRequest: requests.UpdateResponderRecipeRequest): Promise<responses.UpdateResponderRecipeResponse>;
    /**
     * Update the ResponderRule by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateResponderRecipeResponderRuleRequest
     * @return UpdateResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateResponderRecipeResponderRule.ts.html |here} to see how to use UpdateResponderRecipeResponderRule API.
     */
    updateResponderRecipeResponderRule(updateResponderRecipeResponderRuleRequest: requests.UpdateResponderRecipeResponderRuleRequest): Promise<responses.UpdateResponderRecipeResponderRuleResponse>;
    /**
     * Updates a security zone recipe. A security zone recipe is a collection of security zone policies.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateSecurityRecipeRequest
     * @return UpdateSecurityRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateSecurityRecipe.ts.html |here} to see how to use UpdateSecurityRecipe API.
     */
    updateSecurityRecipe(updateSecurityRecipeRequest: requests.UpdateSecurityRecipeRequest): Promise<responses.UpdateSecurityRecipeResponse>;
    /**
     * Updates the security zone identified by its id
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateSecurityZoneRequest
     * @return UpdateSecurityZoneResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateSecurityZone.ts.html |here} to see how to use UpdateSecurityZone API.
     */
    updateSecurityZone(updateSecurityZoneRequest: requests.UpdateSecurityZoneRequest): Promise<responses.UpdateSecurityZoneResponse>;
    /**
     * Updates a Target identified by targetId
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateTargetRequest
     * @return UpdateTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateTarget.ts.html |here} to see how to use UpdateTarget API.
     */
    updateTarget(updateTargetRequest: requests.UpdateTargetRequest): Promise<responses.UpdateTargetResponse>;
    /**
     * Update the TargetDetectorRecipe resource by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateTargetDetectorRecipeRequest
     * @return UpdateTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateTargetDetectorRecipe.ts.html |here} to see how to use UpdateTargetDetectorRecipe API.
     */
    updateTargetDetectorRecipe(updateTargetDetectorRecipeRequest: requests.UpdateTargetDetectorRecipeRequest): Promise<responses.UpdateTargetDetectorRecipeResponse>;
    /**
     * Update the DetectorRule by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateTargetDetectorRecipeDetectorRuleRequest
     * @return UpdateTargetDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateTargetDetectorRecipeDetectorRule.ts.html |here} to see how to use UpdateTargetDetectorRecipeDetectorRule API.
     */
    updateTargetDetectorRecipeDetectorRule(updateTargetDetectorRecipeDetectorRuleRequest: requests.UpdateTargetDetectorRecipeDetectorRuleRequest): Promise<responses.UpdateTargetDetectorRecipeDetectorRuleResponse>;
    /**
     * Update the TargetResponderRecipe resource by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateTargetResponderRecipeRequest
     * @return UpdateTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateTargetResponderRecipe.ts.html |here} to see how to use UpdateTargetResponderRecipe API.
     */
    updateTargetResponderRecipe(updateTargetResponderRecipeRequest: requests.UpdateTargetResponderRecipeRequest): Promise<responses.UpdateTargetResponderRecipeResponse>;
    /**
     * Update the ResponderRule by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateTargetResponderRecipeResponderRuleRequest
     * @return UpdateTargetResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/cloudguard/UpdateTargetResponderRecipeResponderRule.ts.html |here} to see how to use UpdateTargetResponderRecipeResponderRule API.
     */
    updateTargetResponderRecipeResponderRule(updateTargetResponderRecipeResponderRuleRequest: requests.UpdateTargetResponderRecipeResponderRuleRequest): Promise<responses.UpdateTargetResponderRecipeResponderRuleResponse>;
}
