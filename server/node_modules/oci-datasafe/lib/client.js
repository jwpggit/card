"use strict";
/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataSafeClient = exports.DataSafeApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const datasafe_waiter_1 = require("./datasafe-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DataSafeApiKeys;
(function (DataSafeApiKeys) {
})(DataSafeApiKeys = exports.DataSafeApiKeys || (exports.DataSafeApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class DataSafeClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = false;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this.targetService = "DataSafe";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20181201";
        if (this.logger)
            this.logger.info(`DataSafeClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DataSafeClient.serviceEndpointTemplate, this._region, DataSafeClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DataSafeClient.serviceEndpointTemplate, this._regionId, DataSafeClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DataSafeClient.serviceEndpointTemplate, region, DataSafeClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DataSafeClient.serviceEndpointTemplate, regionId, DataSafeClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new DataSafeWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new datasafe_waiter_1.DataSafeWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Reactivates a previously deactivated Data Safe target database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ActivateTargetDatabaseRequest
     * @return ActivateTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ActivateTargetDatabase.ts.html |here} to see how to use ActivateTargetDatabase API.
     */
    activateTargetDatabase(activateTargetDatabaseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#activateTargetDatabase.");
            const operationName = "activateTargetDatabase";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ActivateTargetDatabase";
            const pathParams = {
                "{targetDatabaseId}": activateTargetDatabaseRequest.targetDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": activateTargetDatabaseRequest.opcRetryToken,
                "if-match": activateTargetDatabaseRequest.ifMatch,
                "opc-request-id": activateTargetDatabaseRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, activateTargetDatabaseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases/{targetDatabaseId}/actions/activate",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(activateTargetDatabaseRequest.activateTargetDatabaseDetails, "ActivateTargetDatabaseDetails", model.ActivateTargetDatabaseDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds columns to the specified masking policy from the associated sensitive data model. It
     * automatically pulls all the sensitive columns and their relationships from the sensitive
     * data model and uses this information to create columns in the masking policy. It also assigns
     * default masking formats to these columns based on the associated sensitive types.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddMaskingColumnsFromSdmRequest
     * @return AddMaskingColumnsFromSdmResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/AddMaskingColumnsFromSdm.ts.html |here} to see how to use AddMaskingColumnsFromSdm API.
     */
    addMaskingColumnsFromSdm(addMaskingColumnsFromSdmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#addMaskingColumnsFromSdm.");
            const operationName = "addMaskingColumnsFromSdm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/AddMaskingColumnsFromSdm";
            const pathParams = {
                "{maskingPolicyId}": addMaskingColumnsFromSdmRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": addMaskingColumnsFromSdmRequest.ifMatch,
                "opc-request-id": addMaskingColumnsFromSdmRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addMaskingColumnsFromSdmRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/actions/addMaskingColumnsFromSdm",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates alerts in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AlertsUpdateRequest
     * @return AlertsUpdateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/AlertsUpdate.ts.html |here} to see how to use AlertsUpdate API.
     */
    alertsUpdate(alertsUpdateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#alertsUpdate.");
            const operationName = "alertsUpdate";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Alert/AlertsUpdate";
            const pathParams = {};
            const queryParams = {
                "compartmentIdInSubtree": alertsUpdateRequest.compartmentIdInSubtree,
                "accessLevel": alertsUpdateRequest.accessLevel
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": alertsUpdateRequest.opcRequestId,
                "if-match": alertsUpdateRequest.ifMatch,
                "opc-retry-token": alertsUpdateRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, alertsUpdateRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alerts/actions/updateAll",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(alertsUpdateRequest.alertsUpdateDetails, "AlertsUpdateDetails", model.AlertsUpdateDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Applies the results of a discovery job to the specified sensitive data model. Note that the plannedAction attribute
     * of discovery results is used for processing them. You should first use PatchDiscoveryJobResults to set the plannedAction
     * attribute of the discovery results you want to process. ApplyDiscoveryJobResults automatically reads the plannedAction
     * attribute and updates the sensitive data model to reflect the actions you planned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ApplyDiscoveryJobResultsRequest
     * @return ApplyDiscoveryJobResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ApplyDiscoveryJobResults.ts.html |here} to see how to use ApplyDiscoveryJobResults API.
     */
    applyDiscoveryJobResults(applyDiscoveryJobResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#applyDiscoveryJobResults.");
            const operationName = "applyDiscoveryJobResults";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/ApplyDiscoveryJobResults";
            const pathParams = {
                "{sensitiveDataModelId}": applyDiscoveryJobResultsRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": applyDiscoveryJobResultsRequest.ifMatch,
                "opc-request-id": applyDiscoveryJobResultsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, applyDiscoveryJobResultsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/actions/applyDiscoveryJobResults",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(applyDiscoveryJobResultsRequest.applyDiscoveryJobResultsDetails, "ApplyDiscoveryJobResultsDetails", model.ApplyDiscoveryJobResultsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Applies the difference of a SDM Masking policy difference resource to the specified masking policy. Note that the plannedAction attribute
     * of difference columns is used for processing. You should first use PatchSdmMaskingPolicyDifferenceColumns to set the plannedAction
     * attribute of the difference columns you want to process. ApplySdmMaskingPolicyDifference automatically reads the plannedAction
     * attribute and updates the masking policy to reflect the actions you planned. If the sdmMaskingPolicydifferenceId is not passed, the
     * latest sdmMaskingPolicydifference is used. Note that if the masking policy associated with the SdmMaskingPolicyDifference used for this
     * operation is not associated with the original SDM anymore, this operation won't be allowed.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ApplySdmMaskingPolicyDifferenceRequest
     * @return ApplySdmMaskingPolicyDifferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ApplySdmMaskingPolicyDifference.ts.html |here} to see how to use ApplySdmMaskingPolicyDifference API.
     */
    applySdmMaskingPolicyDifference(applySdmMaskingPolicyDifferenceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#applySdmMaskingPolicyDifference.");
            const operationName = "applySdmMaskingPolicyDifference";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/ApplySdmMaskingPolicyDifference";
            const pathParams = {
                "{maskingPolicyId}": applySdmMaskingPolicyDifferenceRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": applySdmMaskingPolicyDifferenceRequest.ifMatch,
                "opc-request-id": applySdmMaskingPolicyDifferenceRequest.opcRequestId,
                "opc-retry-token": applySdmMaskingPolicyDifferenceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, applySdmMaskingPolicyDifferenceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/maskingColumns/actions/applyDifferenceToMaskingColumns",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(applySdmMaskingPolicyDifferenceRequest.applySdmMaskingPolicyDifferenceDetails, "ApplySdmMaskingPolicyDifferenceDetails", model.ApplySdmMaskingPolicyDifferenceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Calculates the volume of audit events available on the target database to be collected. Measurable up to the defined retention period of the audit target resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CalculateAuditVolumeAvailableRequest
     * @return CalculateAuditVolumeAvailableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CalculateAuditVolumeAvailable.ts.html |here} to see how to use CalculateAuditVolumeAvailable API.
     */
    calculateAuditVolumeAvailable(calculateAuditVolumeAvailableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#calculateAuditVolumeAvailable.");
            const operationName = "calculateAuditVolumeAvailable";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/CalculateAuditVolumeAvailable";
            const pathParams = {
                "{auditProfileId}": calculateAuditVolumeAvailableRequest.auditProfileId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": calculateAuditVolumeAvailableRequest.ifMatch,
                "opc-retry-token": calculateAuditVolumeAvailableRequest.opcRetryToken,
                "opc-request-id": calculateAuditVolumeAvailableRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, calculateAuditVolumeAvailableRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfiles/{auditProfileId}/actions/calculateAuditVolumeAvailable",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(calculateAuditVolumeAvailableRequest.calculateAuditVolumeAvailableDetails, "CalculateAuditVolumeAvailableDetails", model.CalculateAuditVolumeAvailableDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Calculates the volume of audit events collected by data safe.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CalculateAuditVolumeCollectedRequest
     * @return CalculateAuditVolumeCollectedResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CalculateAuditVolumeCollected.ts.html |here} to see how to use CalculateAuditVolumeCollected API.
     */
    calculateAuditVolumeCollected(calculateAuditVolumeCollectedRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#calculateAuditVolumeCollected.");
            const operationName = "calculateAuditVolumeCollected";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/CalculateAuditVolumeCollected";
            const pathParams = {
                "{auditProfileId}": calculateAuditVolumeCollectedRequest.auditProfileId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": calculateAuditVolumeCollectedRequest.ifMatch,
                "opc-retry-token": calculateAuditVolumeCollectedRequest.opcRetryToken,
                "opc-request-id": calculateAuditVolumeCollectedRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, calculateAuditVolumeCollectedRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfiles/{auditProfileId}/actions/calculateAuditVolumeCollected",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(calculateAuditVolumeCollectedRequest.calculateAuditVolumeCollectedDetails, "CalculateAuditVolumeCollectedDetails", model.CalculateAuditVolumeCollectedDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancel the given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#cancelWorkRequest.");
            const operationName = "cancelWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequest/CancelWorkRequest";
            const pathParams = {
                "{workRequestId}": cancelWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": cancelWorkRequestRequest.opcRetryToken,
                "opc-request-id": cancelWorkRequestRequest.opcRequestId,
                "if-match": cancelWorkRequestRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified alert into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAlertCompartmentRequest
     * @return ChangeAlertCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeAlertCompartment.ts.html |here} to see how to use ChangeAlertCompartment API.
     */
    changeAlertCompartment(changeAlertCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeAlertCompartment.");
            const operationName = "changeAlertCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Alert/ChangeAlertCompartment";
            const pathParams = {
                "{alertId}": changeAlertCompartmentRequest.alertId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeAlertCompartmentRequest.opcRequestId,
                "if-match": changeAlertCompartmentRequest.ifMatch,
                "opc-retry-token": changeAlertCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAlertCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alerts/{alertId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAlertCompartmentRequest.changeAlertCompartmentDetails, "ChangeAlertCompartmentDetails", model.ChangeAlertCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the archive retreival to the specified compartment. When provided, if-Match is checked against ETag value of the resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAuditArchiveRetrievalCompartmentRequest
     * @return ChangeAuditArchiveRetrievalCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeAuditArchiveRetrievalCompartment.ts.html |here} to see how to use ChangeAuditArchiveRetrievalCompartment API.
     */
    changeAuditArchiveRetrievalCompartment(changeAuditArchiveRetrievalCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeAuditArchiveRetrievalCompartment.");
            const operationName = "changeAuditArchiveRetrievalCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditArchiveRetrieval/ChangeAuditArchiveRetrievalCompartment";
            const pathParams = {
                "{auditArchiveRetrievalId}": changeAuditArchiveRetrievalCompartmentRequest.auditArchiveRetrievalId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAuditArchiveRetrievalCompartmentRequest.ifMatch,
                "opc-request-id": changeAuditArchiveRetrievalCompartmentRequest.opcRequestId,
                "opc-retry-token": changeAuditArchiveRetrievalCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAuditArchiveRetrievalCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditArchiveRetrievals/{auditArchiveRetrievalId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAuditArchiveRetrievalCompartmentRequest.changeAuditArchiveRetrievalCompartmentDetails, "ChangeAuditArchiveRetrievalCompartmentDetails", model.ChangeAuditArchiveRetrievalCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified audit policy and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAuditPolicyCompartmentRequest
     * @return ChangeAuditPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeAuditPolicyCompartment.ts.html |here} to see how to use ChangeAuditPolicyCompartment API.
     */
    changeAuditPolicyCompartment(changeAuditPolicyCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeAuditPolicyCompartment.");
            const operationName = "changeAuditPolicyCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicy/ChangeAuditPolicyCompartment";
            const pathParams = {
                "{auditPolicyId}": changeAuditPolicyCompartmentRequest.auditPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAuditPolicyCompartmentRequest.ifMatch,
                "opc-request-id": changeAuditPolicyCompartmentRequest.opcRequestId,
                "opc-retry-token": changeAuditPolicyCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAuditPolicyCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditPolicies/{auditPolicyId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAuditPolicyCompartmentRequest.changeAuditPolicyCompartmentDetails, "ChangeAuditPolicyCompartmentDetails", model.ChangeAuditPolicyCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified audit profile and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAuditProfileCompartmentRequest
     * @return ChangeAuditProfileCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeAuditProfileCompartment.ts.html |here} to see how to use ChangeAuditProfileCompartment API.
     */
    changeAuditProfileCompartment(changeAuditProfileCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeAuditProfileCompartment.");
            const operationName = "changeAuditProfileCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/ChangeAuditProfileCompartment";
            const pathParams = {
                "{auditProfileId}": changeAuditProfileCompartmentRequest.auditProfileId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAuditProfileCompartmentRequest.ifMatch,
                "opc-retry-token": changeAuditProfileCompartmentRequest.opcRetryToken,
                "opc-request-id": changeAuditProfileCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAuditProfileCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfiles/{auditProfileId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAuditProfileCompartmentRequest.changeAuditProfileCompartmentDetails, "ChangeAuditProfileCompartmentDetails", model.ChangeAuditProfileCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the Data Safe private endpoint and its dependent resources to the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDataSafePrivateEndpointCompartmentRequest
     * @return ChangeDataSafePrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeDataSafePrivateEndpointCompartment.ts.html |here} to see how to use ChangeDataSafePrivateEndpointCompartment API.
     */
    changeDataSafePrivateEndpointCompartment(changeDataSafePrivateEndpointCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeDataSafePrivateEndpointCompartment.");
            const operationName = "changeDataSafePrivateEndpointCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpoint/ChangeDataSafePrivateEndpointCompartment";
            const pathParams = {
                "{dataSafePrivateEndpointId}": changeDataSafePrivateEndpointCompartmentRequest.dataSafePrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeDataSafePrivateEndpointCompartmentRequest.opcRequestId,
                "if-match": changeDataSafePrivateEndpointCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDataSafePrivateEndpointCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDataSafePrivateEndpointCompartmentRequest.changeDataSafePrivateEndpointCompartmentDetails, "ChangeDataSafePrivateEndpointCompartmentDetails", model.ChangeDataSafePrivateEndpointCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified discovery job and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDiscoveryJobCompartmentRequest
     * @return ChangeDiscoveryJobCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeDiscoveryJobCompartment.ts.html |here} to see how to use ChangeDiscoveryJobCompartment API.
     */
    changeDiscoveryJobCompartment(changeDiscoveryJobCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeDiscoveryJobCompartment.");
            const operationName = "changeDiscoveryJobCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/ChangeDiscoveryJobCompartment";
            const pathParams = {
                "{discoveryJobId}": changeDiscoveryJobCompartmentRequest.discoveryJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeDiscoveryJobCompartmentRequest.ifMatch,
                "opc-request-id": changeDiscoveryJobCompartmentRequest.opcRequestId,
                "opc-retry-token": changeDiscoveryJobCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDiscoveryJobCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoveryJobs/{discoveryJobId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDiscoveryJobCompartmentRequest.changeDiscoveryJobCompartmentDetails, "ChangeDiscoveryJobCompartmentDetails", model.ChangeDiscoveryJobCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified library masking format into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeLibraryMaskingFormatCompartmentRequest
     * @return ChangeLibraryMaskingFormatCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeLibraryMaskingFormatCompartment.ts.html |here} to see how to use ChangeLibraryMaskingFormatCompartment API.
     */
    changeLibraryMaskingFormatCompartment(changeLibraryMaskingFormatCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeLibraryMaskingFormatCompartment.");
            const operationName = "changeLibraryMaskingFormatCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormat/ChangeLibraryMaskingFormatCompartment";
            const pathParams = {
                "{libraryMaskingFormatId}": changeLibraryMaskingFormatCompartmentRequest.libraryMaskingFormatId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeLibraryMaskingFormatCompartmentRequest.ifMatch,
                "opc-retry-token": changeLibraryMaskingFormatCompartmentRequest.opcRetryToken,
                "opc-request-id": changeLibraryMaskingFormatCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeLibraryMaskingFormatCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/libraryMaskingFormats/{libraryMaskingFormatId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeLibraryMaskingFormatCompartmentRequest.changeLibraryMaskingFormatCompartmentDetails, "ChangeLibraryMaskingFormatCompartmentDetails", model.ChangeLibraryMaskingFormatCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified masking policy and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMaskingPolicyCompartmentRequest
     * @return ChangeMaskingPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeMaskingPolicyCompartment.ts.html |here} to see how to use ChangeMaskingPolicyCompartment API.
     */
    changeMaskingPolicyCompartment(changeMaskingPolicyCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeMaskingPolicyCompartment.");
            const operationName = "changeMaskingPolicyCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/ChangeMaskingPolicyCompartment";
            const pathParams = {
                "{maskingPolicyId}": changeMaskingPolicyCompartmentRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeMaskingPolicyCompartmentRequest.ifMatch,
                "opc-retry-token": changeMaskingPolicyCompartmentRequest.opcRetryToken,
                "opc-request-id": changeMaskingPolicyCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMaskingPolicyCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMaskingPolicyCompartmentRequest.changeMaskingPolicyCompartmentDetails, "ChangeMaskingPolicyCompartmentDetails", model.ChangeMaskingPolicyCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified on-premises connector into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeOnPremConnectorCompartmentRequest
     * @return ChangeOnPremConnectorCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeOnPremConnectorCompartment.ts.html |here} to see how to use ChangeOnPremConnectorCompartment API.
     */
    changeOnPremConnectorCompartment(changeOnPremConnectorCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeOnPremConnectorCompartment.");
            const operationName = "changeOnPremConnectorCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/ChangeOnPremConnectorCompartment";
            const pathParams = {
                "{onPremConnectorId}": changeOnPremConnectorCompartmentRequest.onPremConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeOnPremConnectorCompartmentRequest.opcRequestId,
                "if-match": changeOnPremConnectorCompartmentRequest.ifMatch,
                "opc-retry-token": changeOnPremConnectorCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeOnPremConnectorCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/onPremConnectors/{onPremConnectorId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeOnPremConnectorCompartmentRequest.changeOnPremConnectorCompartmentDetails, "ChangeOnPremConnectorCompartmentDetails", model.ChangeOnPremConnectorCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeReportCompartmentRequest
     * @return ChangeReportCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeReportCompartment.ts.html |here} to see how to use ChangeReportCompartment API.
     */
    changeReportCompartment(changeReportCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeReportCompartment.");
            const operationName = "changeReportCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Report/ChangeReportCompartment";
            const pathParams = {
                "{reportId}": changeReportCompartmentRequest.reportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeReportCompartmentRequest.ifMatch,
                "opc-request-id": changeReportCompartmentRequest.opcRequestId,
                "opc-retry-token": changeReportCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeReportCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reports/{reportId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeReportCompartmentRequest.changeReportCompartmentDetails, "ChangeReportCompartmentDetails", model.ChangeReportCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeReportDefinitionCompartmentRequest
     * @return ChangeReportDefinitionCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeReportDefinitionCompartment.ts.html |here} to see how to use ChangeReportDefinitionCompartment API.
     */
    changeReportDefinitionCompartment(changeReportDefinitionCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeReportDefinitionCompartment.");
            const operationName = "changeReportDefinitionCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/ChangeReportDefinitionCompartment";
            const pathParams = {
                "{reportDefinitionId}": changeReportDefinitionCompartmentRequest.reportDefinitionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeReportDefinitionCompartmentRequest.ifMatch,
                "opc-request-id": changeReportDefinitionCompartmentRequest.opcRequestId,
                "opc-retry-token": changeReportDefinitionCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeReportDefinitionCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reportDefinitions/{reportDefinitionId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeReportDefinitionCompartmentRequest.changeReportDefinitionCompartmentDetails, "ChangeReportDefinitionCompartmentDetails", model.ChangeReportDefinitionCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Change the online and offline months .
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeRetentionRequest
     * @return ChangeRetentionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeRetention.ts.html |here} to see how to use ChangeRetention API.
     */
    changeRetention(changeRetentionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeRetention.");
            const operationName = "changeRetention";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/ChangeRetention";
            const pathParams = {
                "{auditProfileId}": changeRetentionRequest.auditProfileId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeRetentionRequest.ifMatch,
                "opc-request-id": changeRetentionRequest.opcRequestId,
                "opc-retry-token": changeRetentionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeRetentionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfiles/{auditProfileId}/actions/changeRetention",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeRetentionRequest.changeRetentionDetails, "ChangeRetentionDetails", model.ChangeRetentionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified SDM masking policy difference into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSdmMaskingPolicyDifferenceCompartmentRequest
     * @return ChangeSdmMaskingPolicyDifferenceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeSdmMaskingPolicyDifferenceCompartment.ts.html |here} to see how to use ChangeSdmMaskingPolicyDifferenceCompartment API.
     */
    changeSdmMaskingPolicyDifferenceCompartment(changeSdmMaskingPolicyDifferenceCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeSdmMaskingPolicyDifferenceCompartment.");
            const operationName = "changeSdmMaskingPolicyDifferenceCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/ChangeSdmMaskingPolicyDifferenceCompartment";
            const pathParams = {
                "{sdmMaskingPolicyDifferenceId}": changeSdmMaskingPolicyDifferenceCompartmentRequest.sdmMaskingPolicyDifferenceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeSdmMaskingPolicyDifferenceCompartmentRequest.ifMatch,
                "opc-request-id": changeSdmMaskingPolicyDifferenceCompartmentRequest.opcRequestId,
                "opc-retry-token": changeSdmMaskingPolicyDifferenceCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeSdmMaskingPolicyDifferenceCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeSdmMaskingPolicyDifferenceCompartmentRequest.changeSdmMaskingPolicyDifferenceCompartmentDetails, "ChangeSdmMaskingPolicyDifferenceCompartmentDetails", model.ChangeSdmMaskingPolicyDifferenceCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves the specified saved security assessment or future scheduled assessments into a different compartment.
  * <p>
  To start, call first the operation ListSecurityAssessments with filters \"type = save_schedule\". This returns the scheduleAssessmentId. Then, call this changeCompartment with the scheduleAssessmentId.
  * <p>
  The existing saved security assessments created due to the schedule are not moved. However, all new saves will be associated with the new compartment.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeSecurityAssessmentCompartmentRequest
       * @return ChangeSecurityAssessmentCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeSecurityAssessmentCompartment.ts.html |here} to see how to use ChangeSecurityAssessmentCompartment API.
       */
    changeSecurityAssessmentCompartment(changeSecurityAssessmentCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeSecurityAssessmentCompartment.");
            const operationName = "changeSecurityAssessmentCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/ChangeSecurityAssessmentCompartment";
            const pathParams = {
                "{securityAssessmentId}": changeSecurityAssessmentCompartmentRequest.securityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeSecurityAssessmentCompartmentRequest.opcRequestId,
                "if-match": changeSecurityAssessmentCompartmentRequest.ifMatch,
                "opc-retry-token": changeSecurityAssessmentCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeSecurityAssessmentCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeSecurityAssessmentCompartmentRequest.changeSecurityAssessmentCompartmentDetails, "ChangeSecurityAssessmentCompartmentDetails", model.ChangeSecurityAssessmentCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified sensitive data model and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSensitiveDataModelCompartmentRequest
     * @return ChangeSensitiveDataModelCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeSensitiveDataModelCompartment.ts.html |here} to see how to use ChangeSensitiveDataModelCompartment API.
     */
    changeSensitiveDataModelCompartment(changeSensitiveDataModelCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeSensitiveDataModelCompartment.");
            const operationName = "changeSensitiveDataModelCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/ChangeSensitiveDataModelCompartment";
            const pathParams = {
                "{sensitiveDataModelId}": changeSensitiveDataModelCompartmentRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeSensitiveDataModelCompartmentRequest.ifMatch,
                "opc-request-id": changeSensitiveDataModelCompartmentRequest.opcRequestId,
                "opc-retry-token": changeSensitiveDataModelCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeSensitiveDataModelCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeSensitiveDataModelCompartmentRequest.changeSensitiveDataModelCompartmentDetails, "ChangeSensitiveDataModelCompartmentDetails", model.ChangeSensitiveDataModelCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified sensitive type into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSensitiveTypeCompartmentRequest
     * @return ChangeSensitiveTypeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeSensitiveTypeCompartment.ts.html |here} to see how to use ChangeSensitiveTypeCompartment API.
     */
    changeSensitiveTypeCompartment(changeSensitiveTypeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeSensitiveTypeCompartment.");
            const operationName = "changeSensitiveTypeCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveType/ChangeSensitiveTypeCompartment";
            const pathParams = {
                "{sensitiveTypeId}": changeSensitiveTypeCompartmentRequest.sensitiveTypeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeSensitiveTypeCompartmentRequest.ifMatch,
                "opc-request-id": changeSensitiveTypeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeSensitiveTypeCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeSensitiveTypeCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveTypes/{sensitiveTypeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeSensitiveTypeCompartmentRequest.changeSensitiveTypeCompartmentDetails, "ChangeSensitiveTypeCompartmentDetails", model.ChangeSensitiveTypeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified target-alert policy Association into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeTargetAlertPolicyAssociationCompartmentRequest
     * @return ChangeTargetAlertPolicyAssociationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeTargetAlertPolicyAssociationCompartment.ts.html |here} to see how to use ChangeTargetAlertPolicyAssociationCompartment API.
     */
    changeTargetAlertPolicyAssociationCompartment(changeTargetAlertPolicyAssociationCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeTargetAlertPolicyAssociationCompartment.");
            const operationName = "changeTargetAlertPolicyAssociationCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/ChangeTargetAlertPolicyAssociationCompartment";
            const pathParams = {
                "{targetAlertPolicyAssociationId}": changeTargetAlertPolicyAssociationCompartmentRequest.targetAlertPolicyAssociationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeTargetAlertPolicyAssociationCompartmentRequest.opcRequestId,
                "if-match": changeTargetAlertPolicyAssociationCompartmentRequest.ifMatch,
                "opc-retry-token": changeTargetAlertPolicyAssociationCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeTargetAlertPolicyAssociationCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetAlertPolicyAssociations/{targetAlertPolicyAssociationId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeTargetAlertPolicyAssociationCompartmentRequest.changeTargetAlertPolicyAssociationCompartmentDetails, "ChangeTargetAlertPolicyAssociationCompartmentDetails", model.ChangeTargetAlertPolicyAssociationCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the Data Safe target database to the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeTargetDatabaseCompartmentRequest
     * @return ChangeTargetDatabaseCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeTargetDatabaseCompartment.ts.html |here} to see how to use ChangeTargetDatabaseCompartment API.
     */
    changeTargetDatabaseCompartment(changeTargetDatabaseCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeTargetDatabaseCompartment.");
            const operationName = "changeTargetDatabaseCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ChangeTargetDatabaseCompartment";
            const pathParams = {
                "{targetDatabaseId}": changeTargetDatabaseCompartmentRequest.targetDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeTargetDatabaseCompartmentRequest.ifMatch,
                "opc-request-id": changeTargetDatabaseCompartmentRequest.opcRequestId,
                "opc-retry-token": changeTargetDatabaseCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeTargetDatabaseCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases/{targetDatabaseId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeTargetDatabaseCompartmentRequest.changeTargetDatabaseCompartmentDetails, "ChangeTargetDatabaseCompartmentDetails", model.ChangeTargetDatabaseCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified saved user assessment or future scheduled assessments into a different compartment.
     * To start storing scheduled user assessments on a different compartment, first call the operation ListUserAssessments with
     * the filters \"type = save_schedule\". That call returns the scheduleAssessmentId. Then call
     * ChangeUserAssessmentCompartment with the scheduleAssessmentId. The existing saved user assessments created per the schedule
     * are not be moved. However, all new saves will be associated with the new compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeUserAssessmentCompartmentRequest
     * @return ChangeUserAssessmentCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ChangeUserAssessmentCompartment.ts.html |here} to see how to use ChangeUserAssessmentCompartment API.
     */
    changeUserAssessmentCompartment(changeUserAssessmentCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#changeUserAssessmentCompartment.");
            const operationName = "changeUserAssessmentCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ChangeUserAssessmentCompartment";
            const pathParams = {
                "{userAssessmentId}": changeUserAssessmentCompartmentRequest.userAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeUserAssessmentCompartmentRequest.ifMatch,
                "opc-retry-token": changeUserAssessmentCompartmentRequest.opcRetryToken,
                "opc-request-id": changeUserAssessmentCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeUserAssessmentCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeUserAssessmentCompartmentRequest.changeUserAssessmentCompartmentDetails, "ChangeUserAssessmentCompartmentDetails", model.ChangeUserAssessmentCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Compares two security assessments. For this comparison, a security assessment can be a saved assessment, a latest assessment, or a baseline assessment.
     * For example, you can compare saved assessment or a latest assessment against a baseline.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CompareSecurityAssessmentRequest
     * @return CompareSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CompareSecurityAssessment.ts.html |here} to see how to use CompareSecurityAssessment API.
     */
    compareSecurityAssessment(compareSecurityAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#compareSecurityAssessment.");
            const operationName = "compareSecurityAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/CompareSecurityAssessment";
            const pathParams = {
                "{securityAssessmentId}": compareSecurityAssessmentRequest.securityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": compareSecurityAssessmentRequest.opcRetryToken,
                "opc-request-id": compareSecurityAssessmentRequest.opcRequestId,
                "if-match": compareSecurityAssessmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, compareSecurityAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}/actions/compare",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(compareSecurityAssessmentRequest.compareSecurityAssessmentDetails, "CompareSecurityAssessmentDetails", model.CompareSecurityAssessmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Compares two user assessments. For this comparison, a user assessment can be a saved, a latest assessment, or a baseline.
     * As an example, it can be used to compare a user assessment saved or a latest assessment with a baseline.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CompareUserAssessmentRequest
     * @return CompareUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CompareUserAssessment.ts.html |here} to see how to use CompareUserAssessment API.
     */
    compareUserAssessment(compareUserAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#compareUserAssessment.");
            const operationName = "compareUserAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/CompareUserAssessment";
            const pathParams = {
                "{userAssessmentId}": compareUserAssessmentRequest.userAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": compareUserAssessmentRequest.opcRetryToken,
                "opc-request-id": compareUserAssessmentRequest.opcRequestId,
                "if-match": compareUserAssessmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, compareUserAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/actions/compare",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(compareUserAssessmentRequest.compareUserAssessmentDetails, "CompareUserAssessmentDetails", model.CompareUserAssessmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a work request to retrieve archived audit data. This asynchronous process will usually take over an hour to complete.
     * Save the id from the response of this operation. Call GetAuditArchiveRetrieval operation after an hour, passing the id to know the status of
     * this operation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAuditArchiveRetrievalRequest
     * @return CreateAuditArchiveRetrievalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateAuditArchiveRetrieval.ts.html |here} to see how to use CreateAuditArchiveRetrieval API.
     */
    createAuditArchiveRetrieval(createAuditArchiveRetrievalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createAuditArchiveRetrieval.");
            const operationName = "createAuditArchiveRetrieval";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createAuditArchiveRetrievalRequest.opcRetryToken,
                "opc-request-id": createAuditArchiveRetrievalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAuditArchiveRetrievalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditArchiveRetrievals",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAuditArchiveRetrievalRequest.createAuditArchiveRetrievalDetails, "CreateAuditArchiveRetrievalDetails", model.CreateAuditArchiveRetrievalDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditArchiveRetrieval",
                    bodyModel: model.AuditArchiveRetrieval,
                    type: "model.AuditArchiveRetrieval",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Data Safe private endpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDataSafePrivateEndpointRequest
     * @return CreateDataSafePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateDataSafePrivateEndpoint.ts.html |here} to see how to use CreateDataSafePrivateEndpoint API.
     */
    createDataSafePrivateEndpoint(createDataSafePrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createDataSafePrivateEndpoint.");
            const operationName = "createDataSafePrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpoint/CreateDataSafePrivateEndpoint";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDataSafePrivateEndpointRequest.opcRetryToken,
                "opc-request-id": createDataSafePrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDataSafePrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSafePrivateEndpoints",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDataSafePrivateEndpointRequest.createDataSafePrivateEndpointDetails, "CreateDataSafePrivateEndpointDetails", model.CreateDataSafePrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataSafePrivateEndpoint",
                    bodyModel: model.DataSafePrivateEndpoint,
                    type: "model.DataSafePrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Performs incremental data discovery for the specified sensitive data model. It uses the target database associated
     * with the sensitive data model.
     * After performing data discovery, you can use ListDiscoveryJobResults to view the discovery results, PatchDiscoveryJobResults
     * to specify the action you want perform on these results, and then ApplyDiscoveryJobResults to process the results
     * and apply them to the sensitive data model.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDiscoveryJobRequest
     * @return CreateDiscoveryJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateDiscoveryJob.ts.html |here} to see how to use CreateDiscoveryJob API.
     */
    createDiscoveryJob(createDiscoveryJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createDiscoveryJob.");
            const operationName = "createDiscoveryJob";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDiscoveryJobRequest.opcRetryToken,
                "opc-request-id": createDiscoveryJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDiscoveryJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoveryJobs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDiscoveryJobRequest.createDiscoveryJobDetails, "CreateDiscoveryJobDetails", model.CreateDiscoveryJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "discoveryJob",
                    bodyModel: model.DiscoveryJob,
                    type: "model.DiscoveryJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new library masking format. A masking format can have one or more
     * format entries. The combined output of all the format entries is used for masking.
     * It provides the flexibility to define a masking format that can generate different
     * parts of a data value separately and then combine them to get the final data value
     * for masking. Note that you cannot define masking condition in a library masking format.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateLibraryMaskingFormatRequest
     * @return CreateLibraryMaskingFormatResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateLibraryMaskingFormat.ts.html |here} to see how to use CreateLibraryMaskingFormat API.
     */
    createLibraryMaskingFormat(createLibraryMaskingFormatRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createLibraryMaskingFormat.");
            const operationName = "createLibraryMaskingFormat";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormat/CreateLibraryMaskingFormat";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createLibraryMaskingFormatRequest.opcRetryToken,
                "opc-request-id": createLibraryMaskingFormatRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createLibraryMaskingFormatRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/libraryMaskingFormats",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createLibraryMaskingFormatRequest.createLibraryMaskingFormatDetails, "CreateLibraryMaskingFormatDetails", model.CreateLibraryMaskingFormatDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "libraryMaskingFormat",
                    bodyModel: model.LibraryMaskingFormat,
                    type: "model.LibraryMaskingFormat",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new masking column in the specified masking policy. Use this operation
  * to add parent columns only. It automatically adds the child columns from the
  * associated sensitive data model or target database. If you provide the
  * sensitiveTypeId attribute but not the maskingFormats attribute, it automatically
  * assigns the default masking format associated with the specified sensitive type.
  * Alternatively, if you provide the maskingFormats attribute, the specified masking
  * formats are assigned to the column.
  * <p>
  Using the maskingFormats attribute, you can assign one or more masking formats
  * to a column. You need to specify a condition as part of each masking format. It
  * enables you to do <a href=\"https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html\">conditional masking</a>
  * so that you can mask the column data values differently using different
  * masking conditions. A masking format can have one or more format entries. The
  * combined output of all the format entries is used for masking. It provides the
  * flexibility to define a masking format that can generate different parts of a data
  * value separately and then combine them to get the final data value for masking.
  * <p>
  You can use the maskingColumnGroup attribute to group the columns that you would
  * like to mask together. It enables you to do <a href=\"https://docs.oracle.com/en/cloud/paas/data-safe/udscs/group-masking1.html#GUID-755056B9-9540-48C0-9491-262A44A85037\">group or compound masking</a> that ensures that the
  * masked data across the columns in a group continue to retain the same logical relationship.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateMaskingColumnRequest
       * @return CreateMaskingColumnResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateMaskingColumn.ts.html |here} to see how to use CreateMaskingColumn API.
       */
    createMaskingColumn(createMaskingColumnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createMaskingColumn.");
            const operationName = "createMaskingColumn";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/CreateMaskingColumn";
            const pathParams = {
                "{maskingPolicyId}": createMaskingColumnRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMaskingColumnRequest.opcRetryToken,
                "opc-request-id": createMaskingColumnRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMaskingColumnRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/maskingColumns",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMaskingColumnRequest.createMaskingColumnDetails, "CreateMaskingColumnDetails", model.CreateMaskingColumnDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new masking policy and associates it with a sensitive data model or a reference target database.
  * <p>
  To use a sensitive data model as the source of masking columns, set the columnSource attribute to
  * SENSITIVE_DATA_MODEL and provide the sensitiveDataModelId attribute. After creating a masking policy,
  * you can use the AddMaskingColumnsFromSdm operation to automatically add all the columns from
  * the associated sensitive data model. In this case, the target database associated with the
  * sensitive data model is used for column and masking format validations.
  * <p>
  You can also create a masking policy without using a sensitive data model. In this case,
  * you need to associate your masking policy with a target database by setting the columnSource
  * attribute to TARGET and providing the targetId attribute. The specified target database
  * is used for column and masking format validations.
  * <p>
  After creating a masking policy, you can use the CreateMaskingColumn or PatchMaskingColumns
  * operation to manually add columns to the policy. You need to add the parent columns only,
  * and it automatically adds the child columns (in referential relationship with the parent columns)
  * from the associated sensitive data model or target database.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateMaskingPolicyRequest
       * @return CreateMaskingPolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateMaskingPolicy.ts.html |here} to see how to use CreateMaskingPolicy API.
       */
    createMaskingPolicy(createMaskingPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createMaskingPolicy.");
            const operationName = "createMaskingPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/CreateMaskingPolicy";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMaskingPolicyRequest.opcRetryToken,
                "opc-request-id": createMaskingPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMaskingPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMaskingPolicyRequest.createMaskingPolicyDetails, "CreateMaskingPolicyDetails", model.CreateMaskingPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskingPolicy",
                    bodyModel: model.MaskingPolicy,
                    type: "model.MaskingPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new on-premises connector.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOnPremConnectorRequest
     * @return CreateOnPremConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateOnPremConnector.ts.html |here} to see how to use CreateOnPremConnector API.
     */
    createOnPremConnector(createOnPremConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createOnPremConnector.");
            const operationName = "createOnPremConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/CreateOnPremConnector";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOnPremConnectorRequest.opcRetryToken,
                "opc-request-id": createOnPremConnectorRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOnPremConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/onPremConnectors",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOnPremConnectorRequest.createOnPremConnectorDetails, "CreateOnPremConnectorDetails", model.CreateOnPremConnectorDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "onPremConnector",
                    bodyModel: model.OnPremConnector,
                    type: "model.OnPremConnector",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new report definition with parameters specified in the body. The report definition is stored in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateReportDefinitionRequest
     * @return CreateReportDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateReportDefinition.ts.html |here} to see how to use CreateReportDefinition API.
     */
    createReportDefinition(createReportDefinitionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createReportDefinition.");
            const operationName = "createReportDefinition";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/CreateReportDefinition";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createReportDefinitionRequest.opcRetryToken,
                "opc-request-id": createReportDefinitionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createReportDefinitionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reportDefinitions",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createReportDefinitionRequest.createReportDefinitionDetails, "CreateReportDefinitionDetails", model.CreateReportDefinitionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "reportDefinition",
                    bodyModel: model.ReportDefinition,
                    type: "model.ReportDefinition",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates SDM masking policy difference for the specified masking policy. It finds the difference between
     * masking columns of the masking policy and sensitive columns of the SDM. After performing this operation,
     * you can use ListDifferenceColumns to view the difference columns, PatchSdmMaskingPolicyDifferenceColumns
     * to specify the action you want perform on these columns, and then ApplySdmMaskingPolicyDifference to process the
     * difference columns and apply them to the masking policy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSdmMaskingPolicyDifferenceRequest
     * @return CreateSdmMaskingPolicyDifferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateSdmMaskingPolicyDifference.ts.html |here} to see how to use CreateSdmMaskingPolicyDifference API.
     */
    createSdmMaskingPolicyDifference(createSdmMaskingPolicyDifferenceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createSdmMaskingPolicyDifference.");
            const operationName = "createSdmMaskingPolicyDifference";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSdmMaskingPolicyDifferenceRequest.opcRetryToken,
                "opc-request-id": createSdmMaskingPolicyDifferenceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSdmMaskingPolicyDifferenceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sdmMaskingPolicyDifferences",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSdmMaskingPolicyDifferenceRequest.createSdmMaskingPolicyDifferenceDetails, "CreateSdmMaskingPolicyDifferenceDetails", model.CreateSdmMaskingPolicyDifferenceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sdmMaskingPolicyDifference",
                    bodyModel: model.SdmMaskingPolicyDifference,
                    type: "model.SdmMaskingPolicyDifference",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new saved security assessment for one or multiple targets in a compartment. When this operation is performed,
     * it will save the latest assessments in the specified compartment. If a schedule is passed, it will persist the latest assessments,
     * at the defined date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSecurityAssessmentRequest
     * @return CreateSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateSecurityAssessment.ts.html |here} to see how to use CreateSecurityAssessment API.
     */
    createSecurityAssessment(createSecurityAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createSecurityAssessment.");
            const operationName = "createSecurityAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/CreateSecurityAssessment";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSecurityAssessmentRequest.opcRetryToken,
                "opc-request-id": createSecurityAssessmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSecurityAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSecurityAssessmentRequest.createSecurityAssessmentDetails, "CreateSecurityAssessmentDetails", model.CreateSecurityAssessmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityAssessment",
                    bodyModel: model.SecurityAssessment,
                    type: "model.SecurityAssessment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new sensitive column in the specified sensitive data model.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSensitiveColumnRequest
     * @return CreateSensitiveColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateSensitiveColumn.ts.html |here} to see how to use CreateSensitiveColumn API.
     */
    createSensitiveColumn(createSensitiveColumnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createSensitiveColumn.");
            const operationName = "createSensitiveColumn";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/CreateSensitiveColumn";
            const pathParams = {
                "{sensitiveDataModelId}": createSensitiveColumnRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSensitiveColumnRequest.opcRetryToken,
                "opc-request-id": createSensitiveColumnRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSensitiveColumnRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSensitiveColumnRequest.createSensitiveColumnDetails, "CreateSensitiveColumnDetails", model.CreateSensitiveColumnDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new sensitive data model. If schemas and sensitive types are provided, it automatically runs data discovery
     * and adds the discovered columns to the sensitive data model. Otherwise, it creates an empty sensitive data model
     * that can be updated later.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSensitiveDataModelRequest
     * @return CreateSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateSensitiveDataModel.ts.html |here} to see how to use CreateSensitiveDataModel API.
     */
    createSensitiveDataModel(createSensitiveDataModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createSensitiveDataModel.");
            const operationName = "createSensitiveDataModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/CreateSensitiveDataModel";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSensitiveDataModelRequest.opcRetryToken,
                "opc-request-id": createSensitiveDataModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSensitiveDataModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSensitiveDataModelRequest.createSensitiveDataModelDetails, "CreateSensitiveDataModelDetails", model.CreateSensitiveDataModelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sensitiveDataModel",
                    bodyModel: model.SensitiveDataModel,
                    type: "model.SensitiveDataModel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new sensitive type, which can be a basic sensitive type with regular expressions or a sensitive category.
     * While sensitive types are used for data discovery, sensitive categories are used for logically grouping the related
     * or similar sensitive types.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSensitiveTypeRequest
     * @return CreateSensitiveTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateSensitiveType.ts.html |here} to see how to use CreateSensitiveType API.
     */
    createSensitiveType(createSensitiveTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createSensitiveType.");
            const operationName = "createSensitiveType";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSensitiveTypeRequest.opcRetryToken,
                "opc-request-id": createSensitiveTypeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSensitiveTypeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveTypes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSensitiveTypeRequest.createSensitiveTypeDetails, "CreateSensitiveTypeDetails", model.CreateSensitiveTypeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sensitiveType",
                    bodyModel: model.SensitiveType,
                    type: "model.SensitiveType",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new target-alert policy association to track a alert policy applied on target.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateTargetAlertPolicyAssociationRequest
     * @return CreateTargetAlertPolicyAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateTargetAlertPolicyAssociation.ts.html |here} to see how to use CreateTargetAlertPolicyAssociation API.
     */
    createTargetAlertPolicyAssociation(createTargetAlertPolicyAssociationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createTargetAlertPolicyAssociation.");
            const operationName = "createTargetAlertPolicyAssociation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/CreateTargetAlertPolicyAssociation";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTargetAlertPolicyAssociationRequest.opcRetryToken,
                "opc-request-id": createTargetAlertPolicyAssociationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createTargetAlertPolicyAssociationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetAlertPolicyAssociations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTargetAlertPolicyAssociationRequest.createTargetAlertPolicyAssociationDetails, "CreateTargetAlertPolicyAssociationDetails", model.CreateTargetAlertPolicyAssociationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetAlertPolicyAssociation",
                    bodyModel: model.TargetAlertPolicyAssociation,
                    type: "model.TargetAlertPolicyAssociation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Registers the specified database with Data Safe and creates a Data Safe target database in the Data Safe Console.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateTargetDatabaseRequest
     * @return CreateTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateTargetDatabase.ts.html |here} to see how to use CreateTargetDatabase API.
     */
    createTargetDatabase(createTargetDatabaseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createTargetDatabase.");
            const operationName = "createTargetDatabase";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/CreateTargetDatabase";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTargetDatabaseRequest.opcRetryToken,
                "opc-request-id": createTargetDatabaseRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createTargetDatabaseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTargetDatabaseRequest.createTargetDatabaseDetails, "CreateTargetDatabaseDetails", model.CreateTargetDatabaseDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetDatabase",
                    bodyModel: model.TargetDatabase,
                    type: "model.TargetDatabase",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new saved user assessment for one or multiple targets in a compartment. It saves the latest assessments in the
     * specified compartment. If a scheduled is passed in, this operation persists the latest assessments that exist at the defined
     * date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateUserAssessmentRequest
     * @return CreateUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/CreateUserAssessment.ts.html |here} to see how to use CreateUserAssessment API.
     */
    createUserAssessment(createUserAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#createUserAssessment.");
            const operationName = "createUserAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/CreateUserAssessment";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createUserAssessmentRequest.opcRetryToken,
                "opc-request-id": createUserAssessmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createUserAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createUserAssessmentRequest.createUserAssessmentDetails, "CreateUserAssessmentDetails", model.CreateUserAssessmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userAssessment",
                    bodyModel: model.UserAssessment,
                    type: "model.UserAssessment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deactivates a target database in Data Safe.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeactivateTargetDatabaseRequest
     * @return DeactivateTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeactivateTargetDatabase.ts.html |here} to see how to use DeactivateTargetDatabase API.
     */
    deactivateTargetDatabase(deactivateTargetDatabaseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deactivateTargetDatabase.");
            const operationName = "deactivateTargetDatabase";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/DeactivateTargetDatabase";
            const pathParams = {
                "{targetDatabaseId}": deactivateTargetDatabaseRequest.targetDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": deactivateTargetDatabaseRequest.opcRetryToken,
                "if-match": deactivateTargetDatabaseRequest.ifMatch,
                "opc-request-id": deactivateTargetDatabaseRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deactivateTargetDatabaseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases/{targetDatabaseId}/actions/deactivate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * To unload retrieved archive data, call the operation ListAuditArchiveRetrieval first.
     * This will return the auditArchiveRetrievalId. Then call this operation with auditArchiveRetrievalId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAuditArchiveRetrievalRequest
     * @return DeleteAuditArchiveRetrievalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteAuditArchiveRetrieval.ts.html |here} to see how to use DeleteAuditArchiveRetrieval API.
     */
    deleteAuditArchiveRetrieval(deleteAuditArchiveRetrievalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteAuditArchiveRetrieval.");
            const operationName = "deleteAuditArchiveRetrieval";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditArchiveRetrieval/DeleteAuditArchiveRetrieval";
            const pathParams = {
                "{auditArchiveRetrievalId}": deleteAuditArchiveRetrievalRequest.auditArchiveRetrievalId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAuditArchiveRetrievalRequest.ifMatch,
                "opc-request-id": deleteAuditArchiveRetrievalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAuditArchiveRetrievalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditArchiveRetrievals/{auditArchiveRetrievalId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified audit trail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAuditTrailRequest
     * @return DeleteAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteAuditTrail.ts.html |here} to see how to use DeleteAuditTrail API.
     */
    deleteAuditTrail(deleteAuditTrailRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteAuditTrail.");
            const operationName = "deleteAuditTrail";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/DeleteAuditTrail";
            const pathParams = {
                "{auditTrailId}": deleteAuditTrailRequest.auditTrailId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAuditTrailRequest.ifMatch,
                "opc-request-id": deleteAuditTrailRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAuditTrailRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditTrails/{auditTrailId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified Data Safe private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDataSafePrivateEndpointRequest
     * @return DeleteDataSafePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteDataSafePrivateEndpoint.ts.html |here} to see how to use DeleteDataSafePrivateEndpoint API.
     */
    deleteDataSafePrivateEndpoint(deleteDataSafePrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteDataSafePrivateEndpoint.");
            const operationName = "deleteDataSafePrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpoint/DeleteDataSafePrivateEndpoint";
            const pathParams = {
                "{dataSafePrivateEndpointId}": deleteDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDataSafePrivateEndpointRequest.ifMatch,
                "opc-request-id": deleteDataSafePrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDataSafePrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified discovery job.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDiscoveryJobRequest
     * @return DeleteDiscoveryJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteDiscoveryJob.ts.html |here} to see how to use DeleteDiscoveryJob API.
     */
    deleteDiscoveryJob(deleteDiscoveryJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteDiscoveryJob.");
            const operationName = "deleteDiscoveryJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/DeleteDiscoveryJob";
            const pathParams = {
                "{discoveryJobId}": deleteDiscoveryJobRequest.discoveryJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDiscoveryJobRequest.ifMatch,
                "opc-request-id": deleteDiscoveryJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDiscoveryJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoveryJobs/{discoveryJobId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified discovery result.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDiscoveryJobResultRequest
     * @return DeleteDiscoveryJobResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteDiscoveryJobResult.ts.html |here} to see how to use DeleteDiscoveryJobResult API.
     */
    deleteDiscoveryJobResult(deleteDiscoveryJobResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteDiscoveryJobResult.");
            const operationName = "deleteDiscoveryJobResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJobResult/DeleteDiscoveryJobResult";
            const pathParams = {
                "{discoveryJobId}": deleteDiscoveryJobResultRequest.discoveryJobId,
                "{resultKey}": deleteDiscoveryJobResultRequest.resultKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDiscoveryJobResultRequest.ifMatch,
                "opc-request-id": deleteDiscoveryJobResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDiscoveryJobResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoveryJobs/{discoveryJobId}/results/{resultKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified library masking format.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteLibraryMaskingFormatRequest
     * @return DeleteLibraryMaskingFormatResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteLibraryMaskingFormat.ts.html |here} to see how to use DeleteLibraryMaskingFormat API.
     */
    deleteLibraryMaskingFormat(deleteLibraryMaskingFormatRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteLibraryMaskingFormat.");
            const operationName = "deleteLibraryMaskingFormat";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormat/DeleteLibraryMaskingFormat";
            const pathParams = {
                "{libraryMaskingFormatId}": deleteLibraryMaskingFormatRequest.libraryMaskingFormatId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteLibraryMaskingFormatRequest.ifMatch,
                "opc-request-id": deleteLibraryMaskingFormatRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteLibraryMaskingFormatRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/libraryMaskingFormats/{libraryMaskingFormatId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified masking column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMaskingColumnRequest
     * @return DeleteMaskingColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteMaskingColumn.ts.html |here} to see how to use DeleteMaskingColumn API.
     */
    deleteMaskingColumn(deleteMaskingColumnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteMaskingColumn.");
            const operationName = "deleteMaskingColumn";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/DeleteMaskingColumn";
            const pathParams = {
                "{maskingColumnKey}": deleteMaskingColumnRequest.maskingColumnKey,
                "{maskingPolicyId}": deleteMaskingColumnRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMaskingColumnRequest.ifMatch,
                "opc-request-id": deleteMaskingColumnRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMaskingColumnRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/maskingColumns/{maskingColumnKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMaskingPolicyRequest
     * @return DeleteMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteMaskingPolicy.ts.html |here} to see how to use DeleteMaskingPolicy API.
     */
    deleteMaskingPolicy(deleteMaskingPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteMaskingPolicy.");
            const operationName = "deleteMaskingPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/DeleteMaskingPolicy";
            const pathParams = {
                "{maskingPolicyId}": deleteMaskingPolicyRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMaskingPolicyRequest.ifMatch,
                "opc-request-id": deleteMaskingPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMaskingPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified on-premises connector.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOnPremConnectorRequest
     * @return DeleteOnPremConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteOnPremConnector.ts.html |here} to see how to use DeleteOnPremConnector API.
     */
    deleteOnPremConnector(deleteOnPremConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteOnPremConnector.");
            const operationName = "deleteOnPremConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/DeleteOnPremConnector";
            const pathParams = {
                "{onPremConnectorId}": deleteOnPremConnectorRequest.onPremConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOnPremConnectorRequest.ifMatch,
                "opc-request-id": deleteOnPremConnectorRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOnPremConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/onPremConnectors/{onPremConnectorId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified report definition. Only the user created report definition can be deleted. The seeded report definitions cannot be deleted.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteReportDefinitionRequest
     * @return DeleteReportDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteReportDefinition.ts.html |here} to see how to use DeleteReportDefinition API.
     */
    deleteReportDefinition(deleteReportDefinitionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteReportDefinition.");
            const operationName = "deleteReportDefinition";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/DeleteReportDefinition";
            const pathParams = {
                "{reportDefinitionId}": deleteReportDefinitionRequest.reportDefinitionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteReportDefinitionRequest.ifMatch,
                "opc-request-id": deleteReportDefinitionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteReportDefinitionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reportDefinitions/{reportDefinitionId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified SDM Masking policy difference.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSdmMaskingPolicyDifferenceRequest
     * @return DeleteSdmMaskingPolicyDifferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteSdmMaskingPolicyDifference.ts.html |here} to see how to use DeleteSdmMaskingPolicyDifference API.
     */
    deleteSdmMaskingPolicyDifference(deleteSdmMaskingPolicyDifferenceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteSdmMaskingPolicyDifference.");
            const operationName = "deleteSdmMaskingPolicyDifference";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/DeleteSdmMaskingPolicyDifference";
            const pathParams = {
                "{sdmMaskingPolicyDifferenceId}": deleteSdmMaskingPolicyDifferenceRequest.sdmMaskingPolicyDifferenceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSdmMaskingPolicyDifferenceRequest.ifMatch,
                "opc-request-id": deleteSdmMaskingPolicyDifferenceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSdmMaskingPolicyDifferenceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified saved security assessment or schedule. To delete a security assessment schedule,
     * first call the operation ListSecurityAssessments with filters \"type = save_schedule\".
     * That operation returns the scheduleAssessmentId. Then, call DeleteSecurityAssessment with the scheduleAssessmentId.
     * If the assessment being deleted is the baseline for that compartment, then it will impact all baselines in the compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSecurityAssessmentRequest
     * @return DeleteSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteSecurityAssessment.ts.html |here} to see how to use DeleteSecurityAssessment API.
     */
    deleteSecurityAssessment(deleteSecurityAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteSecurityAssessment.");
            const operationName = "deleteSecurityAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/DeleteSecurityAssessment";
            const pathParams = {
                "{securityAssessmentId}": deleteSecurityAssessmentRequest.securityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteSecurityAssessmentRequest.opcRequestId,
                "if-match": deleteSecurityAssessmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSecurityAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified sensitive column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSensitiveColumnRequest
     * @return DeleteSensitiveColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteSensitiveColumn.ts.html |here} to see how to use DeleteSensitiveColumn API.
     */
    deleteSensitiveColumn(deleteSensitiveColumnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteSensitiveColumn.");
            const operationName = "deleteSensitiveColumn";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/DeleteSensitiveColumn";
            const pathParams = {
                "{sensitiveDataModelId}": deleteSensitiveColumnRequest.sensitiveDataModelId,
                "{sensitiveColumnKey}": deleteSensitiveColumnRequest.sensitiveColumnKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSensitiveColumnRequest.ifMatch,
                "opc-request-id": deleteSensitiveColumnRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSensitiveColumnRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/{sensitiveColumnKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified sensitive data model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSensitiveDataModelRequest
     * @return DeleteSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteSensitiveDataModel.ts.html |here} to see how to use DeleteSensitiveDataModel API.
     */
    deleteSensitiveDataModel(deleteSensitiveDataModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteSensitiveDataModel.");
            const operationName = "deleteSensitiveDataModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/DeleteSensitiveDataModel";
            const pathParams = {
                "{sensitiveDataModelId}": deleteSensitiveDataModelRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSensitiveDataModelRequest.ifMatch,
                "opc-request-id": deleteSensitiveDataModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSensitiveDataModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified sensitive type.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSensitiveTypeRequest
     * @return DeleteSensitiveTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteSensitiveType.ts.html |here} to see how to use DeleteSensitiveType API.
     */
    deleteSensitiveType(deleteSensitiveTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteSensitiveType.");
            const operationName = "deleteSensitiveType";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveType/DeleteSensitiveType";
            const pathParams = {
                "{sensitiveTypeId}": deleteSensitiveTypeRequest.sensitiveTypeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSensitiveTypeRequest.ifMatch,
                "opc-request-id": deleteSensitiveTypeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSensitiveTypeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveTypes/{sensitiveTypeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified target-alert policy Association.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteTargetAlertPolicyAssociationRequest
     * @return DeleteTargetAlertPolicyAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteTargetAlertPolicyAssociation.ts.html |here} to see how to use DeleteTargetAlertPolicyAssociation API.
     */
    deleteTargetAlertPolicyAssociation(deleteTargetAlertPolicyAssociationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteTargetAlertPolicyAssociation.");
            const operationName = "deleteTargetAlertPolicyAssociation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/DeleteTargetAlertPolicyAssociation";
            const pathParams = {
                "{targetAlertPolicyAssociationId}": deleteTargetAlertPolicyAssociationRequest.targetAlertPolicyAssociationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteTargetAlertPolicyAssociationRequest.ifMatch,
                "opc-request-id": deleteTargetAlertPolicyAssociationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteTargetAlertPolicyAssociationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetAlertPolicyAssociations/{targetAlertPolicyAssociationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deregisters the specified database from Data Safe and removes the target database from the Data Safe Console.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteTargetDatabaseRequest
     * @return DeleteTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteTargetDatabase.ts.html |here} to see how to use DeleteTargetDatabase API.
     */
    deleteTargetDatabase(deleteTargetDatabaseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteTargetDatabase.");
            const operationName = "deleteTargetDatabase";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/DeleteTargetDatabase";
            const pathParams = {
                "{targetDatabaseId}": deleteTargetDatabaseRequest.targetDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteTargetDatabaseRequest.ifMatch,
                "opc-request-id": deleteTargetDatabaseRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteTargetDatabaseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases/{targetDatabaseId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified saved user assessment or schedule. To delete a user assessment schedule, first call the operation
     * ListUserAssessments with filters \"type = save_schedule\".
     * That call returns the scheduleAssessmentId. Then call DeleteUserAssessment with the scheduleAssessmentId.
     * If the assessment being deleted is the baseline for that compartment, then it will impact all baselines in the compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteUserAssessmentRequest
     * @return DeleteUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DeleteUserAssessment.ts.html |here} to see how to use DeleteUserAssessment API.
     */
    deleteUserAssessment(deleteUserAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#deleteUserAssessment.");
            const operationName = "deleteUserAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/DeleteUserAssessment";
            const pathParams = {
                "{userAssessmentId}": deleteUserAssessmentRequest.userAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteUserAssessmentRequest.ifMatch,
                "opc-request-id": deleteUserAssessmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteUserAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the list of audit trails created under audit profile.The
     * operation can be used to create new audit trails for target database
     * when they become available for audit collection because of change of database version
     * or change of database unified mode or change of data base  edition or being deleted previously etc.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DiscoverAuditTrailsRequest
     * @return DiscoverAuditTrailsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DiscoverAuditTrails.ts.html |here} to see how to use DiscoverAuditTrails API.
     */
    discoverAuditTrails(discoverAuditTrailsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#discoverAuditTrails.");
            const operationName = "discoverAuditTrails";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/DiscoverAuditTrails";
            const pathParams = {
                "{auditProfileId}": discoverAuditTrailsRequest.auditProfileId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": discoverAuditTrailsRequest.opcRequestId,
                "if-match": discoverAuditTrailsRequest.ifMatch,
                "opc-retry-token": discoverAuditTrailsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, discoverAuditTrailsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfiles/{auditProfileId}/actions/discoverAuditTrails",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads an already-generated discovery report. Note that the GenerateDiscoveryReportForDownload operation is a
     * prerequisite for the DownloadDiscoveryReport operation. Use GenerateDiscoveryReportForDownload to generate a discovery
     * report file and then use DownloadDiscoveryReport to download the generated file. By default, it downloads report for
     * all the columns in a sensitive data model. Use the discoveryJobId attribute to download report for a specific discovery job.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadDiscoveryReportRequest
     * @return DownloadDiscoveryReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DownloadDiscoveryReport.ts.html |here} to see how to use DownloadDiscoveryReport API.
     */
    downloadDiscoveryReport(downloadDiscoveryReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#downloadDiscoveryReport.");
            const operationName = "downloadDiscoveryReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/DownloadDiscoveryReport";
            const pathParams = {
                "{sensitiveDataModelId}": downloadDiscoveryReportRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": downloadDiscoveryReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, downloadDiscoveryReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/downloadReport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(downloadDiscoveryReportRequest.downloadDiscoveryReportDetails, "DownloadDiscoveryReportDetails", model.DownloadDiscoveryReportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads the masking log generated by the last masking operation on a target database using the specified masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadMaskingLogRequest
     * @return DownloadMaskingLogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DownloadMaskingLog.ts.html |here} to see how to use DownloadMaskingLog API.
     */
    downloadMaskingLog(downloadMaskingLogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#downloadMaskingLog.");
            const operationName = "downloadMaskingLog";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/DownloadMaskingLog";
            const pathParams = {
                "{maskingPolicyId}": downloadMaskingLogRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": downloadMaskingLogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, downloadMaskingLogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/actions/downloadLog",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(downloadMaskingLogRequest.downloadMaskingLogDetails, "DownloadMaskingLogDetails", model.DownloadMaskingLogDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads an already-generated file corresponding to the specified masking policy.
     * Note that the GenerateMaskingPolicyForDownload operation is a prerequisite for the
     * DownloadMaskingPolicy operation. Use GenerateMaskingPolicyForDownload to generate
     * a masking policy file and then use DownloadMaskingPolicy to download the generated file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadMaskingPolicyRequest
     * @return DownloadMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DownloadMaskingPolicy.ts.html |here} to see how to use DownloadMaskingPolicy API.
     */
    downloadMaskingPolicy(downloadMaskingPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#downloadMaskingPolicy.");
            const operationName = "downloadMaskingPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/DownloadMaskingPolicy";
            const pathParams = {
                "{maskingPolicyId}": downloadMaskingPolicyRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": downloadMaskingPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, downloadMaskingPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/actions/download",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(downloadMaskingPolicyRequest.downloadMaskingPolicyDetails, "DownloadMaskingPolicyDetails", model.DownloadMaskingPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads an already-generated masking report. Note that the GenerateMaskingReportForDownload
     * operation is a prerequisite for the DownloadMaskingReport operation. Use GenerateMaskingReportForDownload
     * to generate a masking report file and then use DownloadMaskingReport to download the generated file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadMaskingReportRequest
     * @return DownloadMaskingReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DownloadMaskingReport.ts.html |here} to see how to use DownloadMaskingReport API.
     */
    downloadMaskingReport(downloadMaskingReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#downloadMaskingReport.");
            const operationName = "downloadMaskingReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/DownloadMaskingReport";
            const pathParams = {
                "{maskingPolicyId}": downloadMaskingReportRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": downloadMaskingReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, downloadMaskingReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/actions/downloadReport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(downloadMaskingReportRequest.downloadMaskingReportDetails, "DownloadMaskingReportDetails", model.DownloadMaskingReportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads the privilege script to grant/revoke required roles from the Data Safe account on the target database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadPrivilegeScriptRequest
     * @return DownloadPrivilegeScriptResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DownloadPrivilegeScript.ts.html |here} to see how to use DownloadPrivilegeScript API.
     */
    downloadPrivilegeScript(downloadPrivilegeScriptRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#downloadPrivilegeScript.");
            const operationName = "downloadPrivilegeScript";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/DownloadPrivilegeScript";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": downloadPrivilegeScriptRequest.opcRetryToken,
                "opc-request-id": downloadPrivilegeScriptRequest.opcRequestId,
                "if-match": downloadPrivilegeScriptRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, downloadPrivilegeScriptRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/actions/downloadPrivilegeScript",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads the report of the specified security assessment. To download the security assessment report, it needs to be generated first.
     * Please use GenerateSecurityAssessmentReport to generate a downloadable report in the preferred format (PDF, XLS).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadSecurityAssessmentReportRequest
     * @return DownloadSecurityAssessmentReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DownloadSecurityAssessmentReport.ts.html |here} to see how to use DownloadSecurityAssessmentReport API.
     */
    downloadSecurityAssessmentReport(downloadSecurityAssessmentReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#downloadSecurityAssessmentReport.");
            const operationName = "downloadSecurityAssessmentReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/DownloadSecurityAssessmentReport";
            const pathParams = {
                "{securityAssessmentId}": downloadSecurityAssessmentReportRequest.securityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": downloadSecurityAssessmentReportRequest.ifMatch,
                "opc-retry-token": downloadSecurityAssessmentReportRequest.opcRetryToken,
                "opc-request-id": downloadSecurityAssessmentReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, downloadSecurityAssessmentReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}/actions/downloadReport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(downloadSecurityAssessmentReportRequest.downloadSecurityAssessmentReportDetails, "DownloadSecurityAssessmentReportDetails", model.DownloadSecurityAssessmentReportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads an already-generated file corresponding to the specified sensitive data model. Note that the
     * GenerateSensitiveDataModelForDownload operation is a prerequisite for the DownloadSensitiveDataModel operation.
     * Use GenerateSensitiveDataModelForDownload to generate a data model file and then use DownloadSensitiveDataModel
     * to download the generated file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadSensitiveDataModelRequest
     * @return DownloadSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DownloadSensitiveDataModel.ts.html |here} to see how to use DownloadSensitiveDataModel API.
     */
    downloadSensitiveDataModel(downloadSensitiveDataModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#downloadSensitiveDataModel.");
            const operationName = "downloadSensitiveDataModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/DownloadSensitiveDataModel";
            const pathParams = {
                "{sensitiveDataModelId}": downloadSensitiveDataModelRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": downloadSensitiveDataModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, downloadSensitiveDataModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/download",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(downloadSensitiveDataModelRequest.downloadSensitiveDataModelDetails, "DownloadSensitiveDataModelDetails", model.DownloadSensitiveDataModelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads the report of the specified user assessment. To download the user assessment report, it needs to be generated first.
     * Please use GenerateUserAssessmentReport to generate a downloadable report in the preferred format (PDF, XLS).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadUserAssessmentReportRequest
     * @return DownloadUserAssessmentReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/DownloadUserAssessmentReport.ts.html |here} to see how to use DownloadUserAssessmentReport API.
     */
    downloadUserAssessmentReport(downloadUserAssessmentReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#downloadUserAssessmentReport.");
            const operationName = "downloadUserAssessmentReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/DownloadUserAssessmentReport";
            const pathParams = {
                "{userAssessmentId}": downloadUserAssessmentReportRequest.userAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": downloadUserAssessmentReportRequest.ifMatch,
                "opc-retry-token": downloadUserAssessmentReportRequest.opcRetryToken,
                "opc-request-id": downloadUserAssessmentReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, downloadUserAssessmentReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/actions/downloadReport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(downloadUserAssessmentReportRequest.downloadUserAssessmentReportDetails, "DownloadUserAssessmentReportDetails", model.DownloadUserAssessmentReportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables Data Safe in the tenancy and region.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableDataSafeConfigurationRequest
     * @return EnableDataSafeConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/EnableDataSafeConfiguration.ts.html |here} to see how to use EnableDataSafeConfiguration API.
     */
    enableDataSafeConfiguration(enableDataSafeConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#enableDataSafeConfiguration.");
            const operationName = "enableDataSafeConfiguration";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafeConfiguration/EnableDataSafeConfiguration";
            const pathParams = {};
            const queryParams = {
                "compartmentId": enableDataSafeConfigurationRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableDataSafeConfigurationRequest.ifMatch,
                "opc-request-id": enableDataSafeConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableDataSafeConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configuration",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(enableDataSafeConfigurationRequest.enableDataSafeConfigurationDetails, "EnableDataSafeConfigurationDetails", model.EnableDataSafeConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Generates a downloadable discovery report. It's a prerequisite for the DownloadDiscoveryReport operation. Use this
     * endpoint to generate a discovery report file and then use DownloadDiscoveryReport to download the generated file.
     * By default, it generates report for all the columns in a sensitive data model. Use the discoveryJobId attribute
     * to generate report for a specific discovery job.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateDiscoveryReportForDownloadRequest
     * @return GenerateDiscoveryReportForDownloadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GenerateDiscoveryReportForDownload.ts.html |here} to see how to use GenerateDiscoveryReportForDownload API.
     */
    generateDiscoveryReportForDownload(generateDiscoveryReportForDownloadRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#generateDiscoveryReportForDownload.");
            const operationName = "generateDiscoveryReportForDownload";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/GenerateDiscoveryReportForDownload";
            const pathParams = {
                "{sensitiveDataModelId}": generateDiscoveryReportForDownloadRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": generateDiscoveryReportForDownloadRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateDiscoveryReportForDownloadRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/generateReportForDownload",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(generateDiscoveryReportForDownloadRequest.generateDiscoveryReportForDownloadDetails, "GenerateDiscoveryReportForDownloadDetails", model.GenerateDiscoveryReportForDownloadDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Generates a downloadable file corresponding to the specified masking policy. It's
     * a prerequisite for the DownloadMaskingPolicy operation. Use this endpoint to generate
     * a masking policy file and then use DownloadMaskingPolicy to download the generated file.
     * Note that file generation and download are serial operations. The download operation
     * can't be invoked while the generate operation is in progress.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateMaskingPolicyForDownloadRequest
     * @return GenerateMaskingPolicyForDownloadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GenerateMaskingPolicyForDownload.ts.html |here} to see how to use GenerateMaskingPolicyForDownload API.
     */
    generateMaskingPolicyForDownload(generateMaskingPolicyForDownloadRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#generateMaskingPolicyForDownload.");
            const operationName = "generateMaskingPolicyForDownload";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/GenerateMaskingPolicyForDownload";
            const pathParams = {
                "{maskingPolicyId}": generateMaskingPolicyForDownloadRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": generateMaskingPolicyForDownloadRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateMaskingPolicyForDownloadRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/actions/generatePolicyForDownload",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(generateMaskingPolicyForDownloadRequest.generateMaskingPolicyForDownloadDetails, "GenerateMaskingPolicyForDownloadDetails", model.GenerateMaskingPolicyForDownloadDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Generates a downloadable masking report. It's a prerequisite for the
     * DownloadMaskingReport operation. Use this endpoint to generate a
     * masking report file and then use DownloadMaskingReport to download
     * the generated file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateMaskingReportForDownloadRequest
     * @return GenerateMaskingReportForDownloadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GenerateMaskingReportForDownload.ts.html |here} to see how to use GenerateMaskingReportForDownload API.
     */
    generateMaskingReportForDownload(generateMaskingReportForDownloadRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#generateMaskingReportForDownload.");
            const operationName = "generateMaskingReportForDownload";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/GenerateMaskingReportForDownload";
            const pathParams = {
                "{maskingPolicyId}": generateMaskingReportForDownloadRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": generateMaskingReportForDownloadRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateMaskingReportForDownloadRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/actions/generateReportForDownload",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(generateMaskingReportForDownloadRequest.generateMaskingReportForDownloadDetails, "GenerateMaskingReportForDownloadDetails", model.GenerateMaskingReportForDownloadDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates and downloads the configuration of the specified on-premises connector.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateOnPremConnectorConfigurationRequest
     * @return GenerateOnPremConnectorConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GenerateOnPremConnectorConfiguration.ts.html |here} to see how to use GenerateOnPremConnectorConfiguration API.
     */
    generateOnPremConnectorConfiguration(generateOnPremConnectorConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#generateOnPremConnectorConfiguration.");
            const operationName = "generateOnPremConnectorConfiguration";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/GenerateOnPremConnectorConfiguration";
            const pathParams = {
                "{onPremConnectorId}": generateOnPremConnectorConfigurationRequest.onPremConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": generateOnPremConnectorConfigurationRequest.opcRetryToken,
                "opc-request-id": generateOnPremConnectorConfigurationRequest.opcRequestId,
                "if-match": generateOnPremConnectorConfigurationRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateOnPremConnectorConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/onPremConnectors/{onPremConnectorId}/actions/generateConfiguration",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(generateOnPremConnectorConfigurationRequest.generateOnPremConnectorConfigurationDetails, "GenerateOnPremConnectorConfigurationDetails", model.GenerateOnPremConnectorConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Generates a PDF or XLS report based on parameters and report definition.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateReportRequest
     * @return GenerateReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GenerateReport.ts.html |here} to see how to use GenerateReport API.
     */
    generateReport(generateReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#generateReport.");
            const operationName = "generateReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/GenerateReport";
            const pathParams = {
                "{reportDefinitionId}": generateReportRequest.reportDefinitionId
            };
            const queryParams = {
                "scimQuery": generateReportRequest.scimQuery
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": generateReportRequest.ifMatch,
                "opc-request-id": generateReportRequest.opcRequestId,
                "opc-retry-token": generateReportRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reportDefinitions/{reportDefinitionId}/actions/generateReport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(generateReportRequest.generateReportDetails, "GenerateReportDetails", model.GenerateReportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Generates the report of the specified security assessment. You can get the report in PDF or XLS format.
     * After generating the report, use DownloadSecurityAssessmentReport to download it in the preferred format.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateSecurityAssessmentReportRequest
     * @return GenerateSecurityAssessmentReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GenerateSecurityAssessmentReport.ts.html |here} to see how to use GenerateSecurityAssessmentReport API.
     */
    generateSecurityAssessmentReport(generateSecurityAssessmentReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#generateSecurityAssessmentReport.");
            const operationName = "generateSecurityAssessmentReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/GenerateSecurityAssessmentReport";
            const pathParams = {
                "{securityAssessmentId}": generateSecurityAssessmentReportRequest.securityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": generateSecurityAssessmentReportRequest.ifMatch,
                "opc-retry-token": generateSecurityAssessmentReportRequest.opcRetryToken,
                "opc-request-id": generateSecurityAssessmentReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateSecurityAssessmentReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}/actions/generateReport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(generateSecurityAssessmentReportRequest.generateSecurityAssessmentReportDetails, "GenerateSecurityAssessmentReportDetails", model.GenerateSecurityAssessmentReportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Generates a downloadable file corresponding to the specified sensitive data model. It's a prerequisite for the
     * DownloadSensitiveDataModel operation. Use this endpoint to generate a data model file and then use DownloadSensitiveDataModel
     * to download the generated file. Note that file generation and download are serial operations. The download operation
     * can't be invoked while the generate operation is in progress.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateSensitiveDataModelForDownloadRequest
     * @return GenerateSensitiveDataModelForDownloadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GenerateSensitiveDataModelForDownload.ts.html |here} to see how to use GenerateSensitiveDataModelForDownload API.
     */
    generateSensitiveDataModelForDownload(generateSensitiveDataModelForDownloadRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#generateSensitiveDataModelForDownload.");
            const operationName = "generateSensitiveDataModelForDownload";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/GenerateSensitiveDataModelForDownload";
            const pathParams = {
                "{sensitiveDataModelId}": generateSensitiveDataModelForDownloadRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": generateSensitiveDataModelForDownloadRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateSensitiveDataModelForDownloadRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/generateDataModelForDownload",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(generateSensitiveDataModelForDownloadRequest.generateSensitiveDataModelForDownloadDetails, "GenerateSensitiveDataModelForDownloadDetails", model.GenerateSensitiveDataModelForDownloadDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Generates the report of the specified user assessment. The report is available in PDF or XLS format.
     * After generating the report, use DownloadUserAssessmentReport to download it in the preferred format.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateUserAssessmentReportRequest
     * @return GenerateUserAssessmentReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GenerateUserAssessmentReport.ts.html |here} to see how to use GenerateUserAssessmentReport API.
     */
    generateUserAssessmentReport(generateUserAssessmentReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#generateUserAssessmentReport.");
            const operationName = "generateUserAssessmentReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/GenerateUserAssessmentReport";
            const pathParams = {
                "{userAssessmentId}": generateUserAssessmentReportRequest.userAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": generateUserAssessmentReportRequest.ifMatch,
                "opc-retry-token": generateUserAssessmentReportRequest.opcRetryToken,
                "opc-request-id": generateUserAssessmentReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateUserAssessmentReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/actions/generateReport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(generateUserAssessmentReportRequest.generateUserAssessmentReportDetails, "GenerateUserAssessmentReportDetails", model.GenerateUserAssessmentReportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified alerts.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAlertRequest
     * @return GetAlertResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetAlert.ts.html |here} to see how to use GetAlert API.
     */
    getAlert(getAlertRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getAlert.");
            const operationName = "getAlert";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Alert/GetAlert";
            const pathParams = {
                "{alertId}": getAlertRequest.alertId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAlertRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAlertRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alerts/{alertId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alert",
                    bodyModel: model.Alert,
                    type: "model.Alert",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of alert policy by its ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAlertPolicyRequest
     * @return GetAlertPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetAlertPolicy.ts.html |here} to see how to use GetAlertPolicy API.
     */
    getAlertPolicy(getAlertPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getAlertPolicy.");
            const operationName = "getAlertPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicy/GetAlertPolicy";
            const pathParams = {
                "{alertPolicyId}": getAlertPolicyRequest.alertPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAlertPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAlertPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alertPolicies/{alertPolicyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alertPolicy",
                    bodyModel: model.AlertPolicy,
                    type: "model.AlertPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified archive retreival.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuditArchiveRetrievalRequest
     * @return GetAuditArchiveRetrievalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetAuditArchiveRetrieval.ts.html |here} to see how to use GetAuditArchiveRetrieval API.
     */
    getAuditArchiveRetrieval(getAuditArchiveRetrievalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getAuditArchiveRetrieval.");
            const operationName = "getAuditArchiveRetrieval";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditArchiveRetrieval/GetAuditArchiveRetrieval";
            const pathParams = {
                "{auditArchiveRetrievalId}": getAuditArchiveRetrievalRequest.auditArchiveRetrievalId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": getAuditArchiveRetrievalRequest.ifMatch,
                "opc-request-id": getAuditArchiveRetrievalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAuditArchiveRetrievalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditArchiveRetrievals/{auditArchiveRetrievalId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditArchiveRetrieval",
                    bodyModel: model.AuditArchiveRetrieval,
                    type: "model.AuditArchiveRetrieval",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a audit policy by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuditPolicyRequest
     * @return GetAuditPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetAuditPolicy.ts.html |here} to see how to use GetAuditPolicy API.
     */
    getAuditPolicy(getAuditPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getAuditPolicy.");
            const operationName = "getAuditPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicy/GetAuditPolicy";
            const pathParams = {
                "{auditPolicyId}": getAuditPolicyRequest.auditPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAuditPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAuditPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditPolicies/{auditPolicyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditPolicy",
                    bodyModel: model.AuditPolicy,
                    type: "model.AuditPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of audit profile resource and associated audit trails of the audit profile.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuditProfileRequest
     * @return GetAuditProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetAuditProfile.ts.html |here} to see how to use GetAuditProfile API.
     */
    getAuditProfile(getAuditProfileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getAuditProfile.");
            const operationName = "getAuditProfile";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/GetAuditProfile";
            const pathParams = {
                "{auditProfileId}": getAuditProfileRequest.auditProfileId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAuditProfileRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAuditProfileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfiles/{auditProfileId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditProfile",
                    bodyModel: model.AuditProfile,
                    type: "model.AuditProfile",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of audit trail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuditTrailRequest
     * @return GetAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetAuditTrail.ts.html |here} to see how to use GetAuditTrail API.
     */
    getAuditTrail(getAuditTrailRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getAuditTrail.");
            const operationName = "getAuditTrail";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/GetAuditTrail";
            const pathParams = {
                "{auditTrailId}": getAuditTrailRequest.auditTrailId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAuditTrailRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAuditTrailRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditTrails/{auditTrailId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditTrail",
                    bodyModel: model.AuditTrail,
                    type: "model.AuditTrail",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of basic masking formats compatible with the supported data types.
     * The data types are grouped into the following categories -
     * Character - Includes CHAR, NCHAR, VARCHAR2, and NVARCHAR2
     * Numeric - Includes NUMBER, FLOAT, RAW, BINARY_FLOAT, and BINARY_DOUBLE
     * Date - Includes DATE and TIMESTAMP
     * LOB - Includes BLOB, CLOB, and NCLOB
     * All - Includes all the supported data types
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetCompatibleFormatsForDataTypesRequest
     * @return GetCompatibleFormatsForDataTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetCompatibleFormatsForDataTypes.ts.html |here} to see how to use GetCompatibleFormatsForDataTypes API.
     */
    getCompatibleFormatsForDataTypes(getCompatibleFormatsForDataTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getCompatibleFormatsForDataTypes.");
            const operationName = "getCompatibleFormatsForDataTypes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/GetCompatibleFormatsForDataTypes";
            const pathParams = {};
            const queryParams = {
                "limit": getCompatibleFormatsForDataTypesRequest.limit,
                "page": getCompatibleFormatsForDataTypesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCompatibleFormatsForDataTypesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCompatibleFormatsForDataTypesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compatibleFormatsForDataTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "compatibleFormatsForDataTypes",
                    bodyModel: model.CompatibleFormatsForDataTypes,
                    type: "model.CompatibleFormatsForDataTypes",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of library masking formats compatible with the existing sensitive types.
     * For each sensitive type, it returns the assigned default masking format as well as
     * the other library masking formats that have the sensitiveTypeIds attribute containing
     * the OCID of the sensitive type.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetCompatibleFormatsForSensitiveTypesRequest
     * @return GetCompatibleFormatsForSensitiveTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetCompatibleFormatsForSensitiveTypes.ts.html |here} to see how to use GetCompatibleFormatsForSensitiveTypes API.
     */
    getCompatibleFormatsForSensitiveTypes(getCompatibleFormatsForSensitiveTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getCompatibleFormatsForSensitiveTypes.");
            const operationName = "getCompatibleFormatsForSensitiveTypes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/GetCompatibleFormatsForSensitiveTypes";
            const pathParams = {};
            const queryParams = {
                "compartmentId": getCompatibleFormatsForSensitiveTypesRequest.compartmentId,
                "compartmentIdInSubtree": getCompatibleFormatsForSensitiveTypesRequest.compartmentIdInSubtree,
                "accessLevel": getCompatibleFormatsForSensitiveTypesRequest.accessLevel,
                "limit": getCompatibleFormatsForSensitiveTypesRequest.limit,
                "page": getCompatibleFormatsForSensitiveTypesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCompatibleFormatsForSensitiveTypesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCompatibleFormatsForSensitiveTypesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compatibleFormatsForSensitiveTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "compatibleFormatsForSensitiveTypes",
                    bodyModel: model.CompatibleFormatsForSensitiveTypes,
                    type: "model.CompatibleFormatsForSensitiveTypes",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the Data Safe configuration.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDataSafeConfigurationRequest
     * @return GetDataSafeConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetDataSafeConfiguration.ts.html |here} to see how to use GetDataSafeConfiguration API.
     */
    getDataSafeConfiguration(getDataSafeConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getDataSafeConfiguration.");
            const operationName = "getDataSafeConfiguration";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafeConfiguration/GetDataSafeConfiguration";
            const pathParams = {};
            const queryParams = {
                "compartmentId": getDataSafeConfigurationRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDataSafeConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDataSafeConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configuration",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataSafeConfiguration",
                    bodyModel: model.DataSafeConfiguration,
                    type: "model.DataSafeConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified Data Safe private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDataSafePrivateEndpointRequest
     * @return GetDataSafePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetDataSafePrivateEndpoint.ts.html |here} to see how to use GetDataSafePrivateEndpoint API.
     */
    getDataSafePrivateEndpoint(getDataSafePrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getDataSafePrivateEndpoint.");
            const operationName = "getDataSafePrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpoint/GetDataSafePrivateEndpoint";
            const pathParams = {
                "{dataSafePrivateEndpointId}": getDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDataSafePrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDataSafePrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataSafePrivateEndpoint",
                    bodyModel: model.DataSafePrivateEndpoint,
                    type: "model.DataSafePrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified SDM Masking policy difference column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDifferenceColumnRequest
     * @return GetDifferenceColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetDifferenceColumn.ts.html |here} to see how to use GetDifferenceColumn API.
     */
    getDifferenceColumn(getDifferenceColumnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getDifferenceColumn.");
            const operationName = "getDifferenceColumn";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DifferenceColumn/GetDifferenceColumn";
            const pathParams = {
                "{sdmMaskingPolicyDifferenceId}": getDifferenceColumnRequest.sdmMaskingPolicyDifferenceId,
                "{differenceColumnKey}": getDifferenceColumnRequest.differenceColumnKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDifferenceColumnRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDifferenceColumnRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}/differenceColumns/{differenceColumnKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "differenceColumn",
                    bodyModel: model.DifferenceColumn,
                    type: "model.DifferenceColumn",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified discovery job.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDiscoveryJobRequest
     * @return GetDiscoveryJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetDiscoveryJob.ts.html |here} to see how to use GetDiscoveryJob API.
     */
    getDiscoveryJob(getDiscoveryJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getDiscoveryJob.");
            const operationName = "getDiscoveryJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/GetDiscoveryJob";
            const pathParams = {
                "{discoveryJobId}": getDiscoveryJobRequest.discoveryJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDiscoveryJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDiscoveryJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoveryJobs/{discoveryJobId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "discoveryJob",
                    bodyModel: model.DiscoveryJob,
                    type: "model.DiscoveryJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified discovery result.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDiscoveryJobResultRequest
     * @return GetDiscoveryJobResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetDiscoveryJobResult.ts.html |here} to see how to use GetDiscoveryJobResult API.
     */
    getDiscoveryJobResult(getDiscoveryJobResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getDiscoveryJobResult.");
            const operationName = "getDiscoveryJobResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJobResult/GetDiscoveryJobResult";
            const pathParams = {
                "{discoveryJobId}": getDiscoveryJobResultRequest.discoveryJobId,
                "{resultKey}": getDiscoveryJobResultRequest.resultKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDiscoveryJobResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDiscoveryJobResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoveryJobs/{discoveryJobId}/results/{resultKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "discoveryJobResult",
                    bodyModel: model.DiscoveryJobResult,
                    type: "model.DiscoveryJobResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified library masking format.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetLibraryMaskingFormatRequest
     * @return GetLibraryMaskingFormatResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetLibraryMaskingFormat.ts.html |here} to see how to use GetLibraryMaskingFormat API.
     */
    getLibraryMaskingFormat(getLibraryMaskingFormatRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getLibraryMaskingFormat.");
            const operationName = "getLibraryMaskingFormat";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormat/GetLibraryMaskingFormat";
            const pathParams = {
                "{libraryMaskingFormatId}": getLibraryMaskingFormatRequest.libraryMaskingFormatId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLibraryMaskingFormatRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getLibraryMaskingFormatRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/libraryMaskingFormats/{libraryMaskingFormatId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "libraryMaskingFormat",
                    bodyModel: model.LibraryMaskingFormat,
                    type: "model.LibraryMaskingFormat",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified masking column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMaskingColumnRequest
     * @return GetMaskingColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetMaskingColumn.ts.html |here} to see how to use GetMaskingColumn API.
     */
    getMaskingColumn(getMaskingColumnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getMaskingColumn.");
            const operationName = "getMaskingColumn";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/GetMaskingColumn";
            const pathParams = {
                "{maskingPolicyId}": getMaskingColumnRequest.maskingPolicyId,
                "{maskingColumnKey}": getMaskingColumnRequest.maskingColumnKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMaskingColumnRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMaskingColumnRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/maskingColumns/{maskingColumnKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskingColumn",
                    bodyModel: model.MaskingColumn,
                    type: "model.MaskingColumn",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMaskingPolicyRequest
     * @return GetMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetMaskingPolicy.ts.html |here} to see how to use GetMaskingPolicy API.
     */
    getMaskingPolicy(getMaskingPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getMaskingPolicy.");
            const operationName = "getMaskingPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/GetMaskingPolicy";
            const pathParams = {
                "{maskingPolicyId}": getMaskingPolicyRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMaskingPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMaskingPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskingPolicy",
                    bodyModel: model.MaskingPolicy,
                    type: "model.MaskingPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified masking report.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMaskingReportRequest
     * @return GetMaskingReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetMaskingReport.ts.html |here} to see how to use GetMaskingReport API.
     */
    getMaskingReport(getMaskingReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getMaskingReport.");
            const operationName = "getMaskingReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingReport/GetMaskingReport";
            const pathParams = {
                "{maskingReportId}": getMaskingReportRequest.maskingReportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMaskingReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMaskingReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingReports/{maskingReportId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskingReport",
                    bodyModel: model.MaskingReport,
                    type: "model.MaskingReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified on-premises connector.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOnPremConnectorRequest
     * @return GetOnPremConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetOnPremConnector.ts.html |here} to see how to use GetOnPremConnector API.
     */
    getOnPremConnector(getOnPremConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getOnPremConnector.");
            const operationName = "getOnPremConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/GetOnPremConnector";
            const pathParams = {
                "{onPremConnectorId}": getOnPremConnectorRequest.onPremConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOnPremConnectorRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOnPremConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/onPremConnectors/{onPremConnectorId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "onPremConnector",
                    bodyModel: model.OnPremConnector,
                    type: "model.OnPremConnector",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the details of given profile available on the target.
  * <p>
  The GetProfile operation returns only the profiles in the specified 'userAssessmentId'.
  * This does not include any subcompartments of the current compartment.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetProfileRequest
       * @return GetProfileResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetProfile.ts.html |here} to see how to use GetProfile API.
       */
    getProfile(getProfileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getProfile.");
            const operationName = "getProfile";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/GetProfile";
            const pathParams = {
                "{userAssessmentId}": getProfileRequest.userAssessmentId,
                "{profileName}": getProfileRequest.profileName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getProfileRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getProfileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/profiles/{profileName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.Profile,
                    type: "Array<model.Profile>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a report by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetReportRequest
     * @return GetReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetReport.ts.html |here} to see how to use GetReport API.
     */
    getReport(getReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getReport.");
            const operationName = "getReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Report/GetReport";
            const pathParams = {
                "{reportId}": getReportRequest.reportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reports/{reportId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "report",
                    bodyModel: model.Report,
                    type: "model.Report",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads the specified report in the form of PDF or XLXS.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetReportContentRequest
     * @return GetReportContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetReportContent.ts.html |here} to see how to use GetReportContent API.
     */
    getReportContent(getReportContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getReportContent.");
            const operationName = "getReportContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Report/GetReportContent";
            const pathParams = {
                "{reportId}": getReportContentRequest.reportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getReportContentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getReportContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reports/{reportId}/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of report definition specified by the identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetReportDefinitionRequest
     * @return GetReportDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetReportDefinition.ts.html |here} to see how to use GetReportDefinition API.
     */
    getReportDefinition(getReportDefinitionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getReportDefinition.");
            const operationName = "getReportDefinition";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/GetReportDefinition";
            const pathParams = {
                "{reportDefinitionId}": getReportDefinitionRequest.reportDefinitionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getReportDefinitionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getReportDefinitionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reportDefinitions/{reportDefinitionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "reportDefinition",
                    bodyModel: model.ReportDefinition,
                    type: "model.ReportDefinition",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified SDM Masking policy difference.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSdmMaskingPolicyDifferenceRequest
     * @return GetSdmMaskingPolicyDifferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetSdmMaskingPolicyDifference.ts.html |here} to see how to use GetSdmMaskingPolicyDifference API.
     */
    getSdmMaskingPolicyDifference(getSdmMaskingPolicyDifferenceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getSdmMaskingPolicyDifference.");
            const operationName = "getSdmMaskingPolicyDifference";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/GetSdmMaskingPolicyDifference";
            const pathParams = {
                "{sdmMaskingPolicyDifferenceId}": getSdmMaskingPolicyDifferenceRequest.sdmMaskingPolicyDifferenceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSdmMaskingPolicyDifferenceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSdmMaskingPolicyDifferenceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sdmMaskingPolicyDifference",
                    bodyModel: model.SdmMaskingPolicyDifference,
                    type: "model.SdmMaskingPolicyDifference",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified security assessment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityAssessmentRequest
     * @return GetSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetSecurityAssessment.ts.html |here} to see how to use GetSecurityAssessment API.
     */
    getSecurityAssessment(getSecurityAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getSecurityAssessment.");
            const operationName = "getSecurityAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/GetSecurityAssessment";
            const pathParams = {
                "{securityAssessmentId}": getSecurityAssessmentRequest.securityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSecurityAssessmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSecurityAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityAssessment",
                    bodyModel: model.SecurityAssessment,
                    type: "model.SecurityAssessment",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the comparison report on the security assessments submitted for comparison.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityAssessmentComparisonRequest
     * @return GetSecurityAssessmentComparisonResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetSecurityAssessmentComparison.ts.html |here} to see how to use GetSecurityAssessmentComparison API.
     */
    getSecurityAssessmentComparison(getSecurityAssessmentComparisonRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getSecurityAssessmentComparison.");
            const operationName = "getSecurityAssessmentComparison";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/GetSecurityAssessmentComparison";
            const pathParams = {
                "{securityAssessmentId}": getSecurityAssessmentComparisonRequest.securityAssessmentId,
                "{comparisonSecurityAssessmentId}": getSecurityAssessmentComparisonRequest.comparisonSecurityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSecurityAssessmentComparisonRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSecurityAssessmentComparisonRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}/comparison/{comparisonSecurityAssessmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityAssessmentComparison",
                    bodyModel: model.SecurityAssessmentComparison,
                    type: "model.SecurityAssessmentComparison",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified sensitive column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSensitiveColumnRequest
     * @return GetSensitiveColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetSensitiveColumn.ts.html |here} to see how to use GetSensitiveColumn API.
     */
    getSensitiveColumn(getSensitiveColumnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getSensitiveColumn.");
            const operationName = "getSensitiveColumn";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/GetSensitiveColumn";
            const pathParams = {
                "{sensitiveDataModelId}": getSensitiveColumnRequest.sensitiveDataModelId,
                "{sensitiveColumnKey}": getSensitiveColumnRequest.sensitiveColumnKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSensitiveColumnRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSensitiveColumnRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/{sensitiveColumnKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sensitiveColumn",
                    bodyModel: model.SensitiveColumn,
                    type: "model.SensitiveColumn",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified sensitive data model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSensitiveDataModelRequest
     * @return GetSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetSensitiveDataModel.ts.html |here} to see how to use GetSensitiveDataModel API.
     */
    getSensitiveDataModel(getSensitiveDataModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getSensitiveDataModel.");
            const operationName = "getSensitiveDataModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/GetSensitiveDataModel";
            const pathParams = {
                "{sensitiveDataModelId}": getSensitiveDataModelRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSensitiveDataModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSensitiveDataModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sensitiveDataModel",
                    bodyModel: model.SensitiveDataModel,
                    type: "model.SensitiveDataModel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified sensitive type.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSensitiveTypeRequest
     * @return GetSensitiveTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetSensitiveType.ts.html |here} to see how to use GetSensitiveType API.
     */
    getSensitiveType(getSensitiveTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getSensitiveType.");
            const operationName = "getSensitiveType";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveType/GetSensitiveType";
            const pathParams = {
                "{sensitiveTypeId}": getSensitiveTypeRequest.sensitiveTypeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSensitiveTypeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSensitiveTypeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveTypes/{sensitiveTypeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sensitiveType",
                    bodyModel: model.SensitiveType,
                    type: "model.SensitiveType",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of target-alert policy association by its ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTargetAlertPolicyAssociationRequest
     * @return GetTargetAlertPolicyAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetTargetAlertPolicyAssociation.ts.html |here} to see how to use GetTargetAlertPolicyAssociation API.
     */
    getTargetAlertPolicyAssociation(getTargetAlertPolicyAssociationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getTargetAlertPolicyAssociation.");
            const operationName = "getTargetAlertPolicyAssociation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/GetTargetAlertPolicyAssociation";
            const pathParams = {
                "{targetAlertPolicyAssociationId}": getTargetAlertPolicyAssociationRequest.targetAlertPolicyAssociationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTargetAlertPolicyAssociationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTargetAlertPolicyAssociationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetAlertPolicyAssociations/{targetAlertPolicyAssociationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetAlertPolicyAssociation",
                    bodyModel: model.TargetAlertPolicyAssociation,
                    type: "model.TargetAlertPolicyAssociation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the details of the specified Data Safe target database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTargetDatabaseRequest
     * @return GetTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetTargetDatabase.ts.html |here} to see how to use GetTargetDatabase API.
     */
    getTargetDatabase(getTargetDatabaseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getTargetDatabase.");
            const operationName = "getTargetDatabase";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/GetTargetDatabase";
            const pathParams = {
                "{targetDatabaseId}": getTargetDatabaseRequest.targetDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTargetDatabaseRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTargetDatabaseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases/{targetDatabaseId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetDatabase",
                    bodyModel: model.TargetDatabase,
                    type: "model.TargetDatabase",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a user assessment by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetUserAssessmentRequest
     * @return GetUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetUserAssessment.ts.html |here} to see how to use GetUserAssessment API.
     */
    getUserAssessment(getUserAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getUserAssessment.");
            const operationName = "getUserAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/GetUserAssessment";
            const pathParams = {
                "{userAssessmentId}": getUserAssessmentRequest.userAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getUserAssessmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getUserAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userAssessment",
                    bodyModel: model.UserAssessment,
                    type: "model.UserAssessment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the comparison report for the user assessments provided.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetUserAssessmentComparisonRequest
     * @return GetUserAssessmentComparisonResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetUserAssessmentComparison.ts.html |here} to see how to use GetUserAssessmentComparison API.
     */
    getUserAssessmentComparison(getUserAssessmentComparisonRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getUserAssessmentComparison.");
            const operationName = "getUserAssessmentComparison";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/GetUserAssessmentComparison";
            const pathParams = {
                "{userAssessmentId}": getUserAssessmentComparisonRequest.userAssessmentId,
                "{comparisonUserAssessmentId}": getUserAssessmentComparisonRequest.comparisonUserAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getUserAssessmentComparisonRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getUserAssessmentComparisonRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/comparison/{comparisonUserAssessmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userAssessmentComparison",
                    bodyModel: model.UserAssessmentComparison,
                    type: "model.UserAssessmentComparison",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the aggregation details of the alerts.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAlertAnalyticsRequest
     * @return ListAlertAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAlertAnalytics.ts.html |here} to see how to use ListAlertAnalytics API.
     */
    listAlertAnalytics(listAlertAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAlertAnalytics.");
            const operationName = "listAlertAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertSummary/ListAlertAnalytics";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAlertAnalyticsRequest.compartmentId,
                "compartmentIdInSubtree": listAlertAnalyticsRequest.compartmentIdInSubtree,
                "limit": listAlertAnalyticsRequest.limit,
                "page": listAlertAnalyticsRequest.page,
                "timeStarted": listAlertAnalyticsRequest.timeStarted,
                "timeEnded": listAlertAnalyticsRequest.timeEnded,
                "queryTimeZone": listAlertAnalyticsRequest.queryTimeZone,
                "sortOrder": listAlertAnalyticsRequest.sortOrder,
                "sortBy": listAlertAnalyticsRequest.sortBy,
                "accessLevel": listAlertAnalyticsRequest.accessLevel,
                "scimQuery": listAlertAnalyticsRequest.scimQuery,
                "summaryField": listAlertAnalyticsRequest.summaryField,
                "groupBy": listAlertAnalyticsRequest.groupBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAlertAnalyticsRequest.opcRequestId,
                "if-match": listAlertAnalyticsRequest.ifMatch,
                "opc-retry-token": listAlertAnalyticsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAlertAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alertAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alertAnalyticsCollection",
                    bodyModel: model.AlertAnalyticsCollection,
                    type: "model.AlertAnalyticsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of all alert policies.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAlertPoliciesRequest
     * @return ListAlertPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAlertPolicies.ts.html |here} to see how to use ListAlertPolicies API.
     */
    listAlertPolicies(listAlertPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAlertPolicies.");
            const operationName = "listAlertPolicies";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicy/ListAlertPolicies";
            const pathParams = {};
            const queryParams = {
                "alertPolicyId": listAlertPoliciesRequest.alertPolicyId,
                "type": listAlertPoliciesRequest.type,
                "isUserDefined": listAlertPoliciesRequest.isUserDefined,
                "displayName": listAlertPoliciesRequest.displayName,
                "compartmentId": listAlertPoliciesRequest.compartmentId,
                "lifecycleState": listAlertPoliciesRequest.lifecycleState,
                "limit": listAlertPoliciesRequest.limit,
                "page": listAlertPoliciesRequest.page,
                "sortOrder": listAlertPoliciesRequest.sortOrder,
                "sortBy": listAlertPoliciesRequest.sortBy,
                "timeCreatedGreaterThanOrEqualTo": listAlertPoliciesRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listAlertPoliciesRequest.timeCreatedLessThan,
                "compartmentIdInSubtree": listAlertPoliciesRequest.compartmentIdInSubtree,
                "accessLevel": listAlertPoliciesRequest.accessLevel
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAlertPoliciesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAlertPoliciesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alertPolicies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alertPolicyCollection",
                    bodyModel: model.AlertPolicyCollection,
                    type: "model.AlertPolicyCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the rules of the specified alert policy. The alert policy is said to be satisfied when all rules in the policy evaulate to true.
     * If there are three rules: rule1,rule2 and rule3, the policy is satisfied if rule1 AND rule2 AND rule3 is True.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAlertPolicyRulesRequest
     * @return ListAlertPolicyRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAlertPolicyRules.ts.html |here} to see how to use ListAlertPolicyRules API.
     */
    listAlertPolicyRules(listAlertPolicyRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAlertPolicyRules.");
            const operationName = "listAlertPolicyRules";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicy/ListAlertPolicyRules";
            const pathParams = {
                "{alertPolicyId}": listAlertPolicyRulesRequest.alertPolicyId
            };
            const queryParams = {
                "limit": listAlertPolicyRulesRequest.limit,
                "page": listAlertPolicyRulesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAlertPolicyRulesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAlertPolicyRulesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alertPolicies/{alertPolicyId}/rules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alertPolicyRuleCollection",
                    bodyModel: model.AlertPolicyRuleCollection,
                    type: "model.AlertPolicyRuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of all alerts.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAlertsRequest
     * @return ListAlertsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAlerts.ts.html |here} to see how to use ListAlerts API.
     */
    listAlerts(listAlertsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAlerts.");
            const operationName = "listAlerts";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertSummary/ListAlerts";
            const pathParams = {};
            const queryParams = {
                "id": listAlertsRequest.id,
                "compartmentId": listAlertsRequest.compartmentId,
                "compartmentIdInSubtree": listAlertsRequest.compartmentIdInSubtree,
                "limit": listAlertsRequest.limit,
                "page": listAlertsRequest.page,
                "accessLevel": listAlertsRequest.accessLevel,
                "sortOrder": listAlertsRequest.sortOrder,
                "sortBy": listAlertsRequest.sortBy,
                "scimQuery": listAlertsRequest.scimQuery,
                "field": listAlertsRequest.field
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAlertsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAlertsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alerts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alertCollection",
                    bodyModel: model.AlertCollection,
                    type: "model.AlertCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the list of audit archive retrieval.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuditArchiveRetrievalsRequest
     * @return ListAuditArchiveRetrievalsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAuditArchiveRetrievals.ts.html |here} to see how to use ListAuditArchiveRetrievals API.
     */
    listAuditArchiveRetrievals(listAuditArchiveRetrievalsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAuditArchiveRetrievals.");
            const operationName = "listAuditArchiveRetrievals";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditArchiveRetrieval/ListAuditArchiveRetrievals";
            const pathParams = {};
            const queryParams = {
                "displayName": listAuditArchiveRetrievalsRequest.displayName,
                "compartmentId": listAuditArchiveRetrievalsRequest.compartmentId,
                "compartmentIdInSubtree": listAuditArchiveRetrievalsRequest.compartmentIdInSubtree,
                "accessLevel": listAuditArchiveRetrievalsRequest.accessLevel,
                "auditArchiveRetrievalId": listAuditArchiveRetrievalsRequest.auditArchiveRetrievalId,
                "targetId": listAuditArchiveRetrievalsRequest.targetId,
                "limit": listAuditArchiveRetrievalsRequest.limit,
                "page": listAuditArchiveRetrievalsRequest.page,
                "lifecycleState": listAuditArchiveRetrievalsRequest.lifecycleState,
                "timeOfExpiry": listAuditArchiveRetrievalsRequest.timeOfExpiry,
                "sortOrder": listAuditArchiveRetrievalsRequest.sortOrder,
                "sortBy": listAuditArchiveRetrievalsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAuditArchiveRetrievalsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuditArchiveRetrievalsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditArchiveRetrievals",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditArchiveRetrievalCollection",
                    bodyModel: model.AuditArchiveRetrievalCollection,
                    type: "model.AuditArchiveRetrievalCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * By default the ListAuditEventAnalytics operation will return all of the summary columns. To filter for a specific summary column, specify
  * it in the `summaryField` query parameter.
  * <p>
  **Example:**
  * /ListAuditEventAnalytics?summaryField=targetName&summaryField=userName&summaryField=clientHostname
  * &summaryField=dmls&summaryField=privilegeChanges&summaryField=ddls&summaryField=loginFailure&summaryField=loginSuccess
  * &summaryField=allRecord&q=(auditEventTime ge \"2021-06-13T23:49:14\")
  * <p>
  /ListAuditEventAnalytics?timeStarted=2022-08-18T11:02:26.000Z&timeEnded=2022-08-24T11:02:26.000Z
  * This will give number of events grouped by periods. Period can be 1 day, 1 week, etc.
  * <p>
  /ListAuditEventAnalytics?summaryField=targetName&groupBy=targetName
  * This will give the number of events group by targetName. Only targetName summary column would be returned.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditEventAnalyticsRequest
       * @return ListAuditEventAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAuditEventAnalytics.ts.html |here} to see how to use ListAuditEventAnalytics API.
       */
    listAuditEventAnalytics(listAuditEventAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAuditEventAnalytics.");
            const operationName = "listAuditEventAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditEventSummary/ListAuditEventAnalytics";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAuditEventAnalyticsRequest.compartmentId,
                "limit": listAuditEventAnalyticsRequest.limit,
                "page": listAuditEventAnalyticsRequest.page,
                "compartmentIdInSubtree": listAuditEventAnalyticsRequest.compartmentIdInSubtree,
                "accessLevel": listAuditEventAnalyticsRequest.accessLevel,
                "scimQuery": listAuditEventAnalyticsRequest.scimQuery,
                "summaryField": listAuditEventAnalyticsRequest.summaryField,
                "timeStarted": listAuditEventAnalyticsRequest.timeStarted,
                "timeEnded": listAuditEventAnalyticsRequest.timeEnded,
                "queryTimeZone": listAuditEventAnalyticsRequest.queryTimeZone,
                "groupBy": listAuditEventAnalyticsRequest.groupBy,
                "sortOrder": listAuditEventAnalyticsRequest.sortOrder,
                "sortBy": listAuditEventAnalyticsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAuditEventAnalyticsRequest.opcRequestId,
                "if-match": listAuditEventAnalyticsRequest.ifMatch,
                "opc-retry-token": listAuditEventAnalyticsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuditEventAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditEventAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditEventAnalyticsCollection",
                    bodyModel: model.AuditEventAnalyticsCollection,
                    type: "model.AuditEventAnalyticsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * The ListAuditEvents operation returns specified `compartmentId` audit Events only.
  * The list does not include any audit Events associated with the `subcompartments` of the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListAuditEvents on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditEventsRequest
       * @return ListAuditEventsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAuditEvents.ts.html |here} to see how to use ListAuditEvents API.
       */
    listAuditEvents(listAuditEventsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAuditEvents.");
            const operationName = "listAuditEvents";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditEventSummary/ListAuditEvents";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAuditEventsRequest.compartmentId,
                "compartmentIdInSubtree": listAuditEventsRequest.compartmentIdInSubtree,
                "accessLevel": listAuditEventsRequest.accessLevel,
                "limit": listAuditEventsRequest.limit,
                "page": listAuditEventsRequest.page,
                "scimQuery": listAuditEventsRequest.scimQuery,
                "sortOrder": listAuditEventsRequest.sortOrder,
                "sortBy": listAuditEventsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAuditEventsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuditEventsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditEvents",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditEventCollection",
                    bodyModel: model.AuditEventCollection,
                    type: "model.AuditEventCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Retrieves a list of all audited targets with their corresponding provisioned audit policies, and their provisioning conditions.
  * <p>
  The ListAuditPolicies operation returns only the audit policies in the specified `compartmentId`.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListAuditPolicies on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditPoliciesRequest
       * @return ListAuditPoliciesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAuditPolicies.ts.html |here} to see how to use ListAuditPolicies API.
       */
    listAuditPolicies(listAuditPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAuditPolicies.");
            const operationName = "listAuditPolicies";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicyCollection/ListAuditPolicies";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAuditPoliciesRequest.compartmentId,
                "compartmentIdInSubtree": listAuditPoliciesRequest.compartmentIdInSubtree,
                "accessLevel": listAuditPoliciesRequest.accessLevel,
                "displayName": listAuditPoliciesRequest.displayName,
                "limit": listAuditPoliciesRequest.limit,
                "page": listAuditPoliciesRequest.page,
                "targetId": listAuditPoliciesRequest.targetId,
                "lifecycleState": listAuditPoliciesRequest.lifecycleState,
                "auditPolicyId": listAuditPoliciesRequest.auditPolicyId,
                "sortOrder": listAuditPoliciesRequest.sortOrder,
                "sortBy": listAuditPoliciesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAuditPoliciesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuditPoliciesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditPolicies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditPolicyCollection",
                    bodyModel: model.AuditPolicyCollection,
                    type: "model.AuditPolicyCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets a list of aggregated audit policy details on the target databases. A audit policy aggregation
  * helps understand the overall state of policies provisioned on targets.
  * It is especially useful to create dashboards or to support analytics.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform SummarizedAuditPolicyInfo on the specified
  * `compartmentId` and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  * <p>
  **Example:** ListAuditPolicyAnalytics?groupBy=auditPolicyCategory
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditPolicyAnalyticsRequest
       * @return ListAuditPolicyAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAuditPolicyAnalytics.ts.html |here} to see how to use ListAuditPolicyAnalytics API.
       */
    listAuditPolicyAnalytics(listAuditPolicyAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAuditPolicyAnalytics.");
            const operationName = "listAuditPolicyAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicyAnalyticCollection/ListAuditPolicyAnalytics";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAuditPolicyAnalyticsRequest.compartmentId,
                "compartmentIdInSubtree": listAuditPolicyAnalyticsRequest.compartmentIdInSubtree,
                "accessLevel": listAuditPolicyAnalyticsRequest.accessLevel,
                "limit": listAuditPolicyAnalyticsRequest.limit,
                "page": listAuditPolicyAnalyticsRequest.page,
                "groupBy": listAuditPolicyAnalyticsRequest.groupBy,
                "auditPolicyCategory": listAuditPolicyAnalyticsRequest.auditPolicyCategory,
                "auditPolicyName": listAuditPolicyAnalyticsRequest.auditPolicyName,
                "targetId": listAuditPolicyAnalyticsRequest.targetId,
                "lifecycleState": listAuditPolicyAnalyticsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAuditPolicyAnalyticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuditPolicyAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditPolicyAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditPolicyAnalyticCollection",
                    bodyModel: model.AuditPolicyAnalyticCollection,
                    type: "model.AuditPolicyAnalyticCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets a list of audit profile aggregated details . A audit profile  aggregation helps understand the overall  state of audit profile profiles.
  * As an example, it helps understand how many audit profiles have paid usage. It is especially useful to create dashboards or to support analytics.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform AuditProfileAnalytics on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditProfileAnalyticsRequest
       * @return ListAuditProfileAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAuditProfileAnalytics.ts.html |here} to see how to use ListAuditProfileAnalytics API.
       */
    listAuditProfileAnalytics(listAuditProfileAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAuditProfileAnalytics.");
            const operationName = "listAuditProfileAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfileAnalyticCollection/ListAuditProfileAnalytics";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAuditProfileAnalyticsRequest.compartmentId,
                "compartmentIdInSubtree": listAuditProfileAnalyticsRequest.compartmentIdInSubtree,
                "accessLevel": listAuditProfileAnalyticsRequest.accessLevel,
                "limit": listAuditProfileAnalyticsRequest.limit,
                "page": listAuditProfileAnalyticsRequest.page,
                "groupBy": listAuditProfileAnalyticsRequest.groupBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAuditProfileAnalyticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuditProfileAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfileAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditProfileAnalyticCollection",
                    bodyModel: model.AuditProfileAnalyticCollection,
                    type: "model.AuditProfileAnalyticCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets a list of all audit profiles.
  * <p>
  The ListAuditProfiles operation returns only the audit profiles in the specified `compartmentId`.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListAuditProfiles on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditProfilesRequest
       * @return ListAuditProfilesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAuditProfiles.ts.html |here} to see how to use ListAuditProfiles API.
       */
    listAuditProfiles(listAuditProfilesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAuditProfiles.");
            const operationName = "listAuditProfiles";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/ListAuditProfiles";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAuditProfilesRequest.compartmentId,
                "compartmentIdInSubtree": listAuditProfilesRequest.compartmentIdInSubtree,
                "accessLevel": listAuditProfilesRequest.accessLevel,
                "auditProfileId": listAuditProfilesRequest.auditProfileId,
                "targetId": listAuditProfilesRequest.targetId,
                "displayName": listAuditProfilesRequest.displayName,
                "limit": listAuditProfilesRequest.limit,
                "page": listAuditProfilesRequest.page,
                "lifecycleState": listAuditProfilesRequest.lifecycleState,
                "isOverrideGlobalRetentionSetting": listAuditProfilesRequest.isOverrideGlobalRetentionSetting,
                "isPaidUsageEnabled": listAuditProfilesRequest.isPaidUsageEnabled,
                "auditCollectedVolumeGreaterThanOrEqualTo": listAuditProfilesRequest.auditCollectedVolumeGreaterThanOrEqualTo,
                "sortOrder": listAuditProfilesRequest.sortOrder,
                "sortBy": listAuditProfilesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAuditProfilesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuditProfilesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfiles",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditProfileCollection",
                    bodyModel: model.AuditProfileCollection,
                    type: "model.AuditProfileCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets a list of audit trail aggregated details . A audit trail aggregation helps understand the overall  state of trails.
  * As an example, it helps understand how many trails are running or stopped. It is especially useful to create dashboards or to support analytics.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform AuditTrailAnalytics on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditTrailAnalyticsRequest
       * @return ListAuditTrailAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAuditTrailAnalytics.ts.html |here} to see how to use ListAuditTrailAnalytics API.
       */
    listAuditTrailAnalytics(listAuditTrailAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAuditTrailAnalytics.");
            const operationName = "listAuditTrailAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrailAnalyticCollection/ListAuditTrailAnalytics";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAuditTrailAnalyticsRequest.compartmentId,
                "compartmentIdInSubtree": listAuditTrailAnalyticsRequest.compartmentIdInSubtree,
                "accessLevel": listAuditTrailAnalyticsRequest.accessLevel,
                "limit": listAuditTrailAnalyticsRequest.limit,
                "page": listAuditTrailAnalyticsRequest.page,
                "groupBy": listAuditTrailAnalyticsRequest.groupBy,
                "targetId": listAuditTrailAnalyticsRequest.targetId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAuditTrailAnalyticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuditTrailAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditTrailAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditTrailAnalyticCollection",
                    bodyModel: model.AuditTrailAnalyticCollection,
                    type: "model.AuditTrailAnalyticCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets a list of all audit trails.
  * The ListAuditTrails operation returns only the audit trails in the specified `compartmentId`.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListAuditTrails on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditTrailsRequest
       * @return ListAuditTrailsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAuditTrails.ts.html |here} to see how to use ListAuditTrails API.
       */
    listAuditTrails(listAuditTrailsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAuditTrails.");
            const operationName = "listAuditTrails";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/ListAuditTrails";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAuditTrailsRequest.compartmentId,
                "compartmentIdInSubtree": listAuditTrailsRequest.compartmentIdInSubtree,
                "accessLevel": listAuditTrailsRequest.accessLevel,
                "auditTrailId": listAuditTrailsRequest.auditTrailId,
                "displayName": listAuditTrailsRequest.displayName,
                "targetId": listAuditTrailsRequest.targetId,
                "limit": listAuditTrailsRequest.limit,
                "page": listAuditTrailsRequest.page,
                "lifecycleState": listAuditTrailsRequest.lifecycleState,
                "status": listAuditTrailsRequest.status,
                "sortOrder": listAuditTrailsRequest.sortOrder,
                "sortBy": listAuditTrailsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAuditTrailsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuditTrailsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditTrails",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "auditTrailCollection",
                    bodyModel: model.AuditTrailCollection,
                    type: "model.AuditTrailCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of audit trails, and associated audit event volume for each trail up to defined start date.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAvailableAuditVolumesRequest
     * @return ListAvailableAuditVolumesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListAvailableAuditVolumes.ts.html |here} to see how to use ListAvailableAuditVolumes API.
     */
    listAvailableAuditVolumes(listAvailableAuditVolumesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listAvailableAuditVolumes.");
            const operationName = "listAvailableAuditVolumes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/ListAvailableAuditVolumes";
            const pathParams = {
                "{auditProfileId}": listAvailableAuditVolumesRequest.auditProfileId
            };
            const queryParams = {
                "workRequestId": listAvailableAuditVolumesRequest.workRequestId,
                "trailLocation": listAvailableAuditVolumesRequest.trailLocation,
                "monthInConsiderationGreaterThan": listAvailableAuditVolumesRequest.monthInConsiderationGreaterThan,
                "monthInConsiderationLessThan": listAvailableAuditVolumesRequest.monthInConsiderationLessThan,
                "limit": listAvailableAuditVolumesRequest.limit,
                "page": listAvailableAuditVolumesRequest.page,
                "sortOrder": listAvailableAuditVolumesRequest.sortOrder,
                "sortBy": listAvailableAuditVolumesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAvailableAuditVolumesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAvailableAuditVolumesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfiles/{auditProfileId}/availableAuditVolumes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "availableAuditVolumeCollection",
                    bodyModel: model.AvailableAuditVolumeCollection,
                    type: "model.AvailableAuditVolumeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of all collected audit volume data points.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCollectedAuditVolumesRequest
     * @return ListCollectedAuditVolumesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListCollectedAuditVolumes.ts.html |here} to see how to use ListCollectedAuditVolumes API.
     */
    listCollectedAuditVolumes(listCollectedAuditVolumesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listCollectedAuditVolumes.");
            const operationName = "listCollectedAuditVolumes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/ListCollectedAuditVolumes";
            const pathParams = {
                "{auditProfileId}": listCollectedAuditVolumesRequest.auditProfileId
            };
            const queryParams = {
                "workRequestId": listCollectedAuditVolumesRequest.workRequestId,
                "monthInConsiderationGreaterThan": listCollectedAuditVolumesRequest.monthInConsiderationGreaterThan,
                "monthInConsiderationLessThan": listCollectedAuditVolumesRequest.monthInConsiderationLessThan,
                "limit": listCollectedAuditVolumesRequest.limit,
                "page": listCollectedAuditVolumesRequest.page,
                "sortOrder": listCollectedAuditVolumesRequest.sortOrder,
                "sortBy": listCollectedAuditVolumesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCollectedAuditVolumesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCollectedAuditVolumesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfiles/{auditProfileId}/collectedAuditVolumes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "collectedAuditVolumeCollection",
                    bodyModel: model.CollectedAuditVolumeCollection,
                    type: "model.CollectedAuditVolumeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of column metadata objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListColumnsRequest
     * @return ListColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListColumns.ts.html |here} to see how to use ListColumns API.
     */
    listColumns(listColumnsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listColumns.");
            const operationName = "listColumns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ListColumns";
            const pathParams = {
                "{targetDatabaseId}": listColumnsRequest.targetDatabaseId
            };
            const queryParams = {
                "limit": listColumnsRequest.limit,
                "page": listColumnsRequest.page,
                "schemaName": listColumnsRequest.schemaName,
                "tableName": listColumnsRequest.tableName,
                "columnName": listColumnsRequest.columnName,
                "datatype": listColumnsRequest.datatype,
                "sortOrder": listColumnsRequest.sortOrder,
                "sortBy": listColumnsRequest.sortBy,
                "schemaNameContains": listColumnsRequest.schemaNameContains,
                "tableNameContains": listColumnsRequest.tableNameContains,
                "columnNameContains": listColumnsRequest.columnNameContains
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listColumnsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listColumnsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases/{targetDatabaseId}/columns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ColumnSummary,
                    type: "Array<model.ColumnSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listColumnsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ColumnSummary objects
     * contained in responses from the listColumns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllColumns(request) {
        return oci_common_1.paginateRecords(request, req => this.listColumns(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listColumnsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listColumns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllColumnsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listColumns(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ColumnSummary objects
     * contained in responses from the listColumns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listColumnsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listColumns(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listColumns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listColumnsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listColumns(req));
    }
    /**
     * Gets a list of Data Safe private endpoints.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDataSafePrivateEndpointsRequest
     * @return ListDataSafePrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListDataSafePrivateEndpoints.ts.html |here} to see how to use ListDataSafePrivateEndpoints API.
     */
    listDataSafePrivateEndpoints(listDataSafePrivateEndpointsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listDataSafePrivateEndpoints.");
            const operationName = "listDataSafePrivateEndpoints";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpointSummary/ListDataSafePrivateEndpoints";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDataSafePrivateEndpointsRequest.compartmentId,
                "displayName": listDataSafePrivateEndpointsRequest.displayName,
                "vcnId": listDataSafePrivateEndpointsRequest.vcnId,
                "lifecycleState": listDataSafePrivateEndpointsRequest.lifecycleState,
                "limit": listDataSafePrivateEndpointsRequest.limit,
                "page": listDataSafePrivateEndpointsRequest.page,
                "sortOrder": listDataSafePrivateEndpointsRequest.sortOrder,
                "sortBy": listDataSafePrivateEndpointsRequest.sortBy,
                "compartmentIdInSubtree": listDataSafePrivateEndpointsRequest.compartmentIdInSubtree,
                "accessLevel": listDataSafePrivateEndpointsRequest.accessLevel
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDataSafePrivateEndpointsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDataSafePrivateEndpointsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSafePrivateEndpoints",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.DataSafePrivateEndpointSummary,
                    type: "Array<model.DataSafePrivateEndpointSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listDataSafePrivateEndpointsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.DataSafePrivateEndpointSummary objects
     * contained in responses from the listDataSafePrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDataSafePrivateEndpoints(request) {
        return oci_common_1.paginateRecords(request, req => this.listDataSafePrivateEndpoints(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listDataSafePrivateEndpointsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listDataSafePrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDataSafePrivateEndpointsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDataSafePrivateEndpoints(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.DataSafePrivateEndpointSummary objects
     * contained in responses from the listDataSafePrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDataSafePrivateEndpointsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listDataSafePrivateEndpoints(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDataSafePrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDataSafePrivateEndpointsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listDataSafePrivateEndpoints(req));
    }
    /**
     * Gets a list of columns of a SDM masking policy difference resource based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDifferenceColumnsRequest
     * @return ListDifferenceColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListDifferenceColumns.ts.html |here} to see how to use ListDifferenceColumns API.
     */
    listDifferenceColumns(listDifferenceColumnsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listDifferenceColumns.");
            const operationName = "listDifferenceColumns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/ListDifferenceColumns";
            const pathParams = {
                "{sdmMaskingPolicyDifferenceId}": listDifferenceColumnsRequest.sdmMaskingPolicyDifferenceId
            };
            const queryParams = {
                "differenceType": listDifferenceColumnsRequest.differenceType,
                "plannedAction": listDifferenceColumnsRequest.plannedAction,
                "syncStatus": listDifferenceColumnsRequest.syncStatus,
                "schemaName": listDifferenceColumnsRequest.schemaName,
                "objectName": listDifferenceColumnsRequest.objectName,
                "columnName": listDifferenceColumnsRequest.columnName,
                "sortOrder": listDifferenceColumnsRequest.sortOrder,
                "sortBy": listDifferenceColumnsRequest.sortBy,
                "limit": listDifferenceColumnsRequest.limit,
                "page": listDifferenceColumnsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDifferenceColumnsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDifferenceColumnsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}/differenceColumns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sdmMaskingPolicyDifferenceColumnCollection",
                    bodyModel: model.SdmMaskingPolicyDifferenceColumnCollection,
                    type: "model.SdmMaskingPolicyDifferenceColumnCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets consolidated discovery analytics data based on the specified query parameters.
     * If CompartmentIdInSubtreeQueryParam is specified as true, the behaviour
     * is equivalent to accessLevel \"ACCESSIBLE\" by default.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDiscoveryAnalyticsRequest
     * @return ListDiscoveryAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListDiscoveryAnalytics.ts.html |here} to see how to use ListDiscoveryAnalytics API.
     */
    listDiscoveryAnalytics(listDiscoveryAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listDiscoveryAnalytics.");
            const operationName = "listDiscoveryAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/ListDiscoveryAnalytics";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDiscoveryAnalyticsRequest.compartmentId,
                "compartmentIdInSubtree": listDiscoveryAnalyticsRequest.compartmentIdInSubtree,
                "groupBy": listDiscoveryAnalyticsRequest.groupBy,
                "targetId": listDiscoveryAnalyticsRequest.targetId,
                "sensitiveDataModelId": listDiscoveryAnalyticsRequest.sensitiveDataModelId,
                "limit": listDiscoveryAnalyticsRequest.limit,
                "page": listDiscoveryAnalyticsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDiscoveryAnalyticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDiscoveryAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoveryAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "discoveryAnalyticsCollection",
                    bodyModel: model.DiscoveryAnalyticsCollection,
                    type: "model.DiscoveryAnalyticsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of discovery results based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDiscoveryJobResultsRequest
     * @return ListDiscoveryJobResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListDiscoveryJobResults.ts.html |here} to see how to use ListDiscoveryJobResults API.
     */
    listDiscoveryJobResults(listDiscoveryJobResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listDiscoveryJobResults.");
            const operationName = "listDiscoveryJobResults";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/ListDiscoveryJobResults";
            const pathParams = {
                "{discoveryJobId}": listDiscoveryJobResultsRequest.discoveryJobId
            };
            const queryParams = {
                "discoveryType": listDiscoveryJobResultsRequest.discoveryType,
                "plannedAction": listDiscoveryJobResultsRequest.plannedAction,
                "isResultApplied": listDiscoveryJobResultsRequest.isResultApplied,
                "schemaName": listDiscoveryJobResultsRequest.schemaName,
                "objectName": listDiscoveryJobResultsRequest.objectName,
                "columnName": listDiscoveryJobResultsRequest.columnName,
                "sortOrder": listDiscoveryJobResultsRequest.sortOrder,
                "sortBy": listDiscoveryJobResultsRequest.sortBy,
                "limit": listDiscoveryJobResultsRequest.limit,
                "page": listDiscoveryJobResultsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDiscoveryJobResultsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDiscoveryJobResultsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoveryJobs/{discoveryJobId}/results",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "discoveryJobResultCollection",
                    bodyModel: model.DiscoveryJobResultCollection,
                    type: "model.DiscoveryJobResultCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of incremental discovery jobs based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDiscoveryJobsRequest
     * @return ListDiscoveryJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListDiscoveryJobs.ts.html |here} to see how to use ListDiscoveryJobs API.
     */
    listDiscoveryJobs(listDiscoveryJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listDiscoveryJobs.");
            const operationName = "listDiscoveryJobs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/ListDiscoveryJobs";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDiscoveryJobsRequest.compartmentId,
                "compartmentIdInSubtree": listDiscoveryJobsRequest.compartmentIdInSubtree,
                "accessLevel": listDiscoveryJobsRequest.accessLevel,
                "displayName": listDiscoveryJobsRequest.displayName,
                "discoveryJobId": listDiscoveryJobsRequest.discoveryJobId,
                "targetId": listDiscoveryJobsRequest.targetId,
                "lifecycleState": listDiscoveryJobsRequest.lifecycleState,
                "sensitiveDataModelId": listDiscoveryJobsRequest.sensitiveDataModelId,
                "sortOrder": listDiscoveryJobsRequest.sortOrder,
                "sortBy": listDiscoveryJobsRequest.sortBy,
                "limit": listDiscoveryJobsRequest.limit,
                "page": listDiscoveryJobsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDiscoveryJobsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDiscoveryJobsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoveryJobs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "discoveryJobCollection",
                    bodyModel: model.DiscoveryJobCollection,
                    type: "model.DiscoveryJobCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * List all the findings from all the targets in the specified assessment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFindingsRequest
     * @return ListFindingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListFindings.ts.html |here} to see how to use ListFindings API.
     */
    listFindings(listFindingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listFindings.");
            const operationName = "listFindings";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/ListFindings";
            const pathParams = {
                "{securityAssessmentId}": listFindingsRequest.securityAssessmentId
            };
            const queryParams = {
                "severity": listFindingsRequest.severity,
                "references": listFindingsRequest.references,
                "limit": listFindingsRequest.limit,
                "page": listFindingsRequest.page,
                "compartmentIdInSubtree": listFindingsRequest.compartmentIdInSubtree,
                "accessLevel": listFindingsRequest.accessLevel,
                "findingKey": listFindingsRequest.findingKey
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listFindingsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listFindingsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}/findings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.FindingSummary,
                    type: "Array<model.FindingSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listFindingsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.FindingSummary objects
     * contained in responses from the listFindings operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFindings(request) {
        return oci_common_1.paginateRecords(request, req => this.listFindings(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listFindingsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listFindings operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFindingsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listFindings(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.FindingSummary objects
     * contained in responses from the listFindings operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listFindingsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listFindings(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listFindings operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listFindingsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listFindings(req));
    }
    /**
     * Gets a list of grants for a particular user in the specified user assessment. A user grant contains details such as the
     * privilege name, type, category, and depth level. The depth level indicates how deep in the hierarchy of roles granted to
     * roles a privilege grant is. The userKey in this operation is a system-generated identifier. Perform the operation ListUsers
     * to get the userKey for a particular user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListGrantsRequest
     * @return ListGrantsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListGrants.ts.html |here} to see how to use ListGrants API.
     */
    listGrants(listGrantsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listGrants.");
            const operationName = "listGrants";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ListGrants";
            const pathParams = {
                "{userAssessmentId}": listGrantsRequest.userAssessmentId,
                "{userKey}": listGrantsRequest.userKey
            };
            const queryParams = {
                "grantKey": listGrantsRequest.grantKey,
                "grantName": listGrantsRequest.grantName,
                "privilegeType": listGrantsRequest.privilegeType,
                "privilegeCategory": listGrantsRequest.privilegeCategory,
                "depthLevel": listGrantsRequest.depthLevel,
                "depthLevelGreaterThanOrEqualTo": listGrantsRequest.depthLevelGreaterThanOrEqualTo,
                "depthLevelLessThan": listGrantsRequest.depthLevelLessThan,
                "limit": listGrantsRequest.limit,
                "page": listGrantsRequest.page,
                "sortOrder": listGrantsRequest.sortOrder,
                "sortBy": listGrantsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listGrantsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listGrantsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/users/{userKey}/grants",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.GrantSummary,
                    type: "Array<model.GrantSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listGrantsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.GrantSummary objects
     * contained in responses from the listGrants operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllGrants(request) {
        return oci_common_1.paginateRecords(request, req => this.listGrants(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listGrantsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listGrants operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllGrantsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listGrants(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.GrantSummary objects
     * contained in responses from the listGrants operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listGrantsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listGrants(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listGrants operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listGrantsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listGrants(req));
    }
    /**
     * Gets a list of library masking formats based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListLibraryMaskingFormatsRequest
     * @return ListLibraryMaskingFormatsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListLibraryMaskingFormats.ts.html |here} to see how to use ListLibraryMaskingFormats API.
     */
    listLibraryMaskingFormats(listLibraryMaskingFormatsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listLibraryMaskingFormats.");
            const operationName = "listLibraryMaskingFormats";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormatSummary/ListLibraryMaskingFormats";
            const pathParams = {};
            const queryParams = {
                "libraryMaskingFormatId": listLibraryMaskingFormatsRequest.libraryMaskingFormatId,
                "compartmentId": listLibraryMaskingFormatsRequest.compartmentId,
                "compartmentIdInSubtree": listLibraryMaskingFormatsRequest.compartmentIdInSubtree,
                "accessLevel": listLibraryMaskingFormatsRequest.accessLevel,
                "displayName": listLibraryMaskingFormatsRequest.displayName,
                "limit": listLibraryMaskingFormatsRequest.limit,
                "page": listLibraryMaskingFormatsRequest.page,
                "lifecycleState": listLibraryMaskingFormatsRequest.lifecycleState,
                "timeCreatedGreaterThanOrEqualTo": listLibraryMaskingFormatsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listLibraryMaskingFormatsRequest.timeCreatedLessThan,
                "libraryMaskingFormatSource": listLibraryMaskingFormatsRequest.libraryMaskingFormatSource,
                "sortOrder": listLibraryMaskingFormatsRequest.sortOrder,
                "sortBy": listLibraryMaskingFormatsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLibraryMaskingFormatsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listLibraryMaskingFormatsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/libraryMaskingFormats",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "libraryMaskingFormatCollection",
                    bodyModel: model.LibraryMaskingFormatCollection,
                    type: "model.LibraryMaskingFormatCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of masked columns present in the specified masking report and based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskedColumnsRequest
     * @return ListMaskedColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListMaskedColumns.ts.html |here} to see how to use ListMaskedColumns API.
     */
    listMaskedColumns(listMaskedColumnsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listMaskedColumns.");
            const operationName = "listMaskedColumns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskedColumnSummary/ListMaskedColumns";
            const pathParams = {
                "{maskingReportId}": listMaskedColumnsRequest.maskingReportId
            };
            const queryParams = {
                "limit": listMaskedColumnsRequest.limit,
                "page": listMaskedColumnsRequest.page,
                "sortOrder": listMaskedColumnsRequest.sortOrder,
                "sortBy": listMaskedColumnsRequest.sortBy,
                "schemaName": listMaskedColumnsRequest.schemaName,
                "objectName": listMaskedColumnsRequest.objectName,
                "columnName": listMaskedColumnsRequest.columnName,
                "objectType": listMaskedColumnsRequest.objectType,
                "maskingColumnGroup": listMaskedColumnsRequest.maskingColumnGroup,
                "sensitiveTypeId": listMaskedColumnsRequest.sensitiveTypeId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMaskedColumnsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMaskedColumnsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingReports/{maskingReportId}/maskedColumns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskedColumnCollection",
                    bodyModel: model.MaskedColumnCollection,
                    type: "model.MaskedColumnCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets consolidated masking analytics data based on the specified query parameters.
     * If CompartmentIdInSubtreeQueryParam is specified as true, the behaviour
     * is equivalent to accessLevel \"ACCESSIBLE\" by default.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingAnalyticsRequest
     * @return ListMaskingAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListMaskingAnalytics.ts.html |here} to see how to use ListMaskingAnalytics API.
     */
    listMaskingAnalytics(listMaskingAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listMaskingAnalytics.");
            const operationName = "listMaskingAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/ListMaskingAnalytics";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMaskingAnalyticsRequest.compartmentId,
                "compartmentIdInSubtree": listMaskingAnalyticsRequest.compartmentIdInSubtree,
                "groupBy": listMaskingAnalyticsRequest.groupBy,
                "targetId": listMaskingAnalyticsRequest.targetId,
                "maskingPolicyId": listMaskingAnalyticsRequest.maskingPolicyId,
                "limit": listMaskingAnalyticsRequest.limit,
                "page": listMaskingAnalyticsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMaskingAnalyticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMaskingAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskingAnalyticsCollection",
                    bodyModel: model.MaskingAnalyticsCollection,
                    type: "model.MaskingAnalyticsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of masking columns present in the specified masking policy and based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingColumnsRequest
     * @return ListMaskingColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListMaskingColumns.ts.html |here} to see how to use ListMaskingColumns API.
     */
    listMaskingColumns(listMaskingColumnsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listMaskingColumns.");
            const operationName = "listMaskingColumns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/ListMaskingColumns";
            const pathParams = {
                "{maskingPolicyId}": listMaskingColumnsRequest.maskingPolicyId
            };
            const queryParams = {
                "limit": listMaskingColumnsRequest.limit,
                "page": listMaskingColumnsRequest.page,
                "sortOrder": listMaskingColumnsRequest.sortOrder,
                "sortBy": listMaskingColumnsRequest.sortBy,
                "maskingColumnLifecycleState": listMaskingColumnsRequest.maskingColumnLifecycleState,
                "dataType": listMaskingColumnsRequest.dataType,
                "schemaName": listMaskingColumnsRequest.schemaName,
                "objectName": listMaskingColumnsRequest.objectName,
                "columnName": listMaskingColumnsRequest.columnName,
                "objectType": listMaskingColumnsRequest.objectType,
                "maskingColumnGroup": listMaskingColumnsRequest.maskingColumnGroup,
                "sensitiveTypeId": listMaskingColumnsRequest.sensitiveTypeId,
                "isMaskingEnabled": listMaskingColumnsRequest.isMaskingEnabled,
                "isSeedRequired": listMaskingColumnsRequest.isSeedRequired,
                "timeCreatedGreaterThanOrEqualTo": listMaskingColumnsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listMaskingColumnsRequest.timeCreatedLessThan,
                "timeUpdatedGreaterThanOrEqualTo": listMaskingColumnsRequest.timeUpdatedGreaterThanOrEqualTo,
                "timeUpdatedLessThan": listMaskingColumnsRequest.timeUpdatedLessThan
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMaskingColumnsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMaskingColumnsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/maskingColumns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskingColumnCollection",
                    bodyModel: model.MaskingColumnCollection,
                    type: "model.MaskingColumnCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of masking objects present in the specified masking policy and based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingObjectsRequest
     * @return ListMaskingObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListMaskingObjects.ts.html |here} to see how to use ListMaskingObjects API.
     */
    listMaskingObjects(listMaskingObjectsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listMaskingObjects.");
            const operationName = "listMaskingObjects";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingObjectCollection/ListMaskingObjects";
            const pathParams = {
                "{maskingPolicyId}": listMaskingObjectsRequest.maskingPolicyId
            };
            const queryParams = {
                "limit": listMaskingObjectsRequest.limit,
                "page": listMaskingObjectsRequest.page,
                "sortOrder": listMaskingObjectsRequest.sortOrder,
                "sortBy": listMaskingObjectsRequest.sortBy,
                "schemaName": listMaskingObjectsRequest.schemaName,
                "objectName": listMaskingObjectsRequest.objectName,
                "objectType": listMaskingObjectsRequest.objectType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMaskingObjectsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMaskingObjectsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/maskingObjects",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskingObjectCollection",
                    bodyModel: model.MaskingObjectCollection,
                    type: "model.MaskingObjectCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of masking policies based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingPoliciesRequest
     * @return ListMaskingPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListMaskingPolicies.ts.html |here} to see how to use ListMaskingPolicies API.
     */
    listMaskingPolicies(listMaskingPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listMaskingPolicies.");
            const operationName = "listMaskingPolicies";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/ListMaskingPolicies";
            const pathParams = {};
            const queryParams = {
                "maskingPolicyId": listMaskingPoliciesRequest.maskingPolicyId,
                "compartmentId": listMaskingPoliciesRequest.compartmentId,
                "displayName": listMaskingPoliciesRequest.displayName,
                "limit": listMaskingPoliciesRequest.limit,
                "page": listMaskingPoliciesRequest.page,
                "lifecycleState": listMaskingPoliciesRequest.lifecycleState,
                "sortOrder": listMaskingPoliciesRequest.sortOrder,
                "sortBy": listMaskingPoliciesRequest.sortBy,
                "sensitiveDataModelId": listMaskingPoliciesRequest.sensitiveDataModelId,
                "targetId": listMaskingPoliciesRequest.targetId,
                "timeCreatedGreaterThanOrEqualTo": listMaskingPoliciesRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listMaskingPoliciesRequest.timeCreatedLessThan,
                "compartmentIdInSubtree": listMaskingPoliciesRequest.compartmentIdInSubtree,
                "accessLevel": listMaskingPoliciesRequest.accessLevel
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMaskingPoliciesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMaskingPoliciesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskingPolicyCollection",
                    bodyModel: model.MaskingPolicyCollection,
                    type: "model.MaskingPolicyCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of masking reports based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingReportsRequest
     * @return ListMaskingReportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListMaskingReports.ts.html |here} to see how to use ListMaskingReports API.
     */
    listMaskingReports(listMaskingReportsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listMaskingReports.");
            const operationName = "listMaskingReports";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/ListMaskingReports";
            const pathParams = {};
            const queryParams = {
                "limit": listMaskingReportsRequest.limit,
                "page": listMaskingReportsRequest.page,
                "maskingPolicyId": listMaskingReportsRequest.maskingPolicyId,
                "targetId": listMaskingReportsRequest.targetId,
                "sortOrder": listMaskingReportsRequest.sortOrder,
                "sortBy": listMaskingReportsRequest.sortBy,
                "compartmentId": listMaskingReportsRequest.compartmentId,
                "compartmentIdInSubtree": listMaskingReportsRequest.compartmentIdInSubtree,
                "accessLevel": listMaskingReportsRequest.accessLevel
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMaskingReportsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMaskingReportsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingReports",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskingReportCollection",
                    bodyModel: model.MaskingReportCollection,
                    type: "model.MaskingReportCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of masking schemas present in the specified masking policy and based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingSchemasRequest
     * @return ListMaskingSchemasResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListMaskingSchemas.ts.html |here} to see how to use ListMaskingSchemas API.
     */
    listMaskingSchemas(listMaskingSchemasRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listMaskingSchemas.");
            const operationName = "listMaskingSchemas";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingSchemaCollection/ListMaskingSchemas";
            const pathParams = {
                "{maskingPolicyId}": listMaskingSchemasRequest.maskingPolicyId
            };
            const queryParams = {
                "limit": listMaskingSchemasRequest.limit,
                "page": listMaskingSchemasRequest.page,
                "sortOrder": listMaskingSchemasRequest.sortOrder,
                "sortBy": listMaskingSchemasRequest.sortBy,
                "schemaName": listMaskingSchemasRequest.schemaName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMaskingSchemasRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMaskingSchemasRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/maskingSchemas",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "maskingSchemaCollection",
                    bodyModel: model.MaskingSchemaCollection,
                    type: "model.MaskingSchemaCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of on-premises connectors.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOnPremConnectorsRequest
     * @return ListOnPremConnectorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListOnPremConnectors.ts.html |here} to see how to use ListOnPremConnectors API.
     */
    listOnPremConnectors(listOnPremConnectorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listOnPremConnectors.");
            const operationName = "listOnPremConnectors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnectorSummary/ListOnPremConnectors";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOnPremConnectorsRequest.compartmentId,
                "onPremConnectorId": listOnPremConnectorsRequest.onPremConnectorId,
                "displayName": listOnPremConnectorsRequest.displayName,
                "onPremConnectorLifecycleState": listOnPremConnectorsRequest.onPremConnectorLifecycleState,
                "limit": listOnPremConnectorsRequest.limit,
                "page": listOnPremConnectorsRequest.page,
                "sortOrder": listOnPremConnectorsRequest.sortOrder,
                "sortBy": listOnPremConnectorsRequest.sortBy,
                "compartmentIdInSubtree": listOnPremConnectorsRequest.compartmentIdInSubtree,
                "accessLevel": listOnPremConnectorsRequest.accessLevel
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOnPremConnectorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOnPremConnectorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/onPremConnectors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.OnPremConnectorSummary,
                    type: "Array<model.OnPremConnectorSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listOnPremConnectorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.OnPremConnectorSummary objects
     * contained in responses from the listOnPremConnectors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOnPremConnectors(request) {
        return oci_common_1.paginateRecords(request, req => this.listOnPremConnectors(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listOnPremConnectorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listOnPremConnectors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOnPremConnectorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listOnPremConnectors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.OnPremConnectorSummary objects
     * contained in responses from the listOnPremConnectors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOnPremConnectorsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listOnPremConnectors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listOnPremConnectors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOnPremConnectorsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listOnPremConnectors(req));
    }
    /**
       * Gets a list of aggregated user profile details in the specified compartment. This provides information about the
  * overall profiles available. For example, the user profile details include how many users have the profile assigned
  * and do how many use password verification function. This data is especially useful content for dashboards or to support analytics.
  * <p>
  When you perform the ListProfileAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
  * parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
  * permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
  * root compartment. If the requestor does not have access to at least one subcompartment of the compartment specified by
  * compartmentId, then \"Not Authorized\" is returned.
  * <p>
  The parameter compartmentIdInSubtree applies when you perform ListProfileAnalytics on the compartmentId passed and when it is
  * set to true, the entire hierarchy of compartments can be returned.
  * <p>
  To use ListProfileAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
  * set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListProfileAnalyticsRequest
       * @return ListProfileAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListProfileAnalytics.ts.html |here} to see how to use ListProfileAnalytics API.
       */
    listProfileAnalytics(listProfileAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listProfileAnalytics.");
            const operationName = "listProfileAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Profile/ListProfileAnalytics";
            const pathParams = {
                "{userAssessmentId}": listProfileAnalyticsRequest.userAssessmentId
            };
            const queryParams = {
                "compartmentId": listProfileAnalyticsRequest.compartmentId,
                "compartmentIdInSubtree": listProfileAnalyticsRequest.compartmentIdInSubtree,
                "accessLevel": listProfileAnalyticsRequest.accessLevel,
                "targetId": listProfileAnalyticsRequest.targetId,
                "limit": listProfileAnalyticsRequest.limit,
                "page": listProfileAnalyticsRequest.page,
                "profileName": listProfileAnalyticsRequest.profileName,
                "sortBy": listProfileAnalyticsRequest.sortBy,
                "sortOrder": listProfileAnalyticsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listProfileAnalyticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listProfileAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/profileAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ProfileAggregation,
                    type: "Array<model.ProfileAggregation>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listProfileAnalyticsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ProfileAggregation objects
     * contained in responses from the listProfileAnalytics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllProfileAnalytics(request) {
        return oci_common_1.paginateRecords(request, req => this.listProfileAnalytics(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listProfileAnalyticsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listProfileAnalytics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllProfileAnalyticsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listProfileAnalytics(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ProfileAggregation objects
     * contained in responses from the listProfileAnalytics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listProfileAnalyticsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listProfileAnalytics(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listProfileAnalytics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listProfileAnalyticsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listProfileAnalytics(req));
    }
    /**
       * Gets a list of user profiles containing the profile details along with the target id and user counts.
  * <p>
  The ListProfiles operation returns only the profiles belonging to a certain target. If compartment type user assessment
  * id is provided, then profile information for all the targets belonging to the pertaining compartment is returned.
  * The list does not include any subcompartments of the compartment under consideration.
  * <p>
  The parameter 'accessLevel' specifies whether to return only those compartments for which the requestor has
  * INSPECT permissions on at least one resource directly or indirectly (ACCESSIBLE) (the resource can be in a
  * subcompartment) or to return Not Authorized if Principal doesn't have access to even one of the child compartments.
  * This is valid only when 'compartmentIdInSubtree' is set to 'true'.
  * <p>
  The parameter 'compartmentIdInSubtree' applies when you perform ListUserProfiles on the 'compartmentId' belonging
  * to the assessmentId passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment), set the parameter
  * 'compartmentIdInSubtree' to true and 'accessLevel' to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListProfileSummariesRequest
       * @return ListProfileSummariesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListProfileSummaries.ts.html |here} to see how to use ListProfileSummaries API.
       */
    listProfileSummaries(listProfileSummariesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listProfileSummaries.");
            const operationName = "listProfileSummaries";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ListProfileSummaries";
            const pathParams = {
                "{userAssessmentId}": listProfileSummariesRequest.userAssessmentId
            };
            const queryParams = {
                "compartmentId": listProfileSummariesRequest.compartmentId,
                "compartmentIdInSubtree": listProfileSummariesRequest.compartmentIdInSubtree,
                "accessLevel": listProfileSummariesRequest.accessLevel,
                "targetId": listProfileSummariesRequest.targetId,
                "limit": listProfileSummariesRequest.limit,
                "page": listProfileSummariesRequest.page,
                "profileName": listProfileSummariesRequest.profileName,
                "isUserCreated": listProfileSummariesRequest.isUserCreated,
                "passwordVerificationFunction": listProfileSummariesRequest.passwordVerificationFunction,
                "userCountGreaterThanOrEqual": listProfileSummariesRequest.userCountGreaterThanOrEqual,
                "userCountLessThan": listProfileSummariesRequest.userCountLessThan,
                "failedLoginAttemptsGreaterThanOrEqual": listProfileSummariesRequest.failedLoginAttemptsGreaterThanOrEqual,
                "failedLoginAttemptsLessThan": listProfileSummariesRequest.failedLoginAttemptsLessThan,
                "sessionsPerUserGreaterThanOrEqual": listProfileSummariesRequest.sessionsPerUserGreaterThanOrEqual,
                "sessionsPerUserLessThan": listProfileSummariesRequest.sessionsPerUserLessThan,
                "inactiveAccountTimeGreaterThanOrEqual": listProfileSummariesRequest.inactiveAccountTimeGreaterThanOrEqual,
                "inactiveAccountTimeLessThan": listProfileSummariesRequest.inactiveAccountTimeLessThan,
                "passwordLockTimeGreaterThanOrEqual": listProfileSummariesRequest.passwordLockTimeGreaterThanOrEqual,
                "passwordLockTimeLessThan": listProfileSummariesRequest.passwordLockTimeLessThan,
                "sortBy": listProfileSummariesRequest.sortBy,
                "sortOrder": listProfileSummariesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listProfileSummariesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listProfileSummariesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/profiles",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ProfileSummary,
                    type: "Array<model.ProfileSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listProfileSummariesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ProfileSummary objects
     * contained in responses from the listProfileSummaries operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllProfileSummaries(request) {
        return oci_common_1.paginateRecords(request, req => this.listProfileSummaries(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listProfileSummariesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listProfileSummaries operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllProfileSummariesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listProfileSummaries(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ProfileSummary objects
     * contained in responses from the listProfileSummaries operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listProfileSummariesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listProfileSummaries(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listProfileSummaries operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listProfileSummariesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listProfileSummaries(req));
    }
    /**
     * Gets a list of report definitions.
     * The ListReportDefinitions operation returns only the report definitions in the specified `compartmentId`.
     * It also returns the seeded report definitions which are available to all the compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListReportDefinitionsRequest
     * @return ListReportDefinitionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListReportDefinitions.ts.html |here} to see how to use ListReportDefinitions API.
     */
    listReportDefinitions(listReportDefinitionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listReportDefinitions.");
            const operationName = "listReportDefinitions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/ListReportDefinitions";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listReportDefinitionsRequest.compartmentId,
                "compartmentIdInSubtree": listReportDefinitionsRequest.compartmentIdInSubtree,
                "accessLevel": listReportDefinitionsRequest.accessLevel,
                "displayName": listReportDefinitionsRequest.displayName,
                "limit": listReportDefinitionsRequest.limit,
                "page": listReportDefinitionsRequest.page,
                "sortOrder": listReportDefinitionsRequest.sortOrder,
                "sortBy": listReportDefinitionsRequest.sortBy,
                "isSeeded": listReportDefinitionsRequest.isSeeded,
                "dataSource": listReportDefinitionsRequest.dataSource,
                "lifecycleState": listReportDefinitionsRequest.lifecycleState,
                "category": listReportDefinitionsRequest.category
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listReportDefinitionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listReportDefinitionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reportDefinitions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "reportDefinitionCollection",
                    bodyModel: model.ReportDefinitionCollection,
                    type: "model.ReportDefinitionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of all the reports in the compartment. It contains information such as report generation time.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListReportsRequest
     * @return ListReportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListReports.ts.html |here} to see how to use ListReports API.
     */
    listReports(listReportsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listReports.");
            const operationName = "listReports";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportSummary/ListReports";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listReportsRequest.compartmentId,
                "compartmentIdInSubtree": listReportsRequest.compartmentIdInSubtree,
                "accessLevel": listReportsRequest.accessLevel,
                "displayName": listReportsRequest.displayName,
                "limit": listReportsRequest.limit,
                "page": listReportsRequest.page,
                "sortOrder": listReportsRequest.sortOrder,
                "sortBy": listReportsRequest.sortBy,
                "reportDefinitionId": listReportsRequest.reportDefinitionId,
                "lifecycleState": listReportsRequest.lifecycleState,
                "type": listReportsRequest.type
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listReportsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listReportsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reports",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "reportCollection",
                    bodyModel: model.ReportCollection,
                    type: "model.ReportCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of role metadata objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRolesRequest
     * @return ListRolesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListRoles.ts.html |here} to see how to use ListRoles API.
     */
    listRoles(listRolesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listRoles.");
            const operationName = "listRoles";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ListRoles";
            const pathParams = {
                "{targetDatabaseId}": listRolesRequest.targetDatabaseId
            };
            const queryParams = {
                "limit": listRolesRequest.limit,
                "page": listRolesRequest.page,
                "roleName": listRolesRequest.roleName,
                "isOracleMaintained": listRolesRequest.isOracleMaintained,
                "authenticationType": listRolesRequest.authenticationType,
                "sortOrder": listRolesRequest.sortOrder,
                "sortBy": listRolesRequest.sortBy,
                "roleNameContains": listRolesRequest.roleNameContains
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRolesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listRolesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases/{targetDatabaseId}/roles",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.RoleSummary,
                    type: "Array<model.RoleSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listRolesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.RoleSummary objects
     * contained in responses from the listRoles operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRoles(request) {
        return oci_common_1.paginateRecords(request, req => this.listRoles(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listRolesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listRoles operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRolesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listRoles(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.RoleSummary objects
     * contained in responses from the listRoles operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRolesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listRoles(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listRoles operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRolesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listRoles(req));
    }
    /**
     * Returns list of schema.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSchemasRequest
     * @return ListSchemasResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListSchemas.ts.html |here} to see how to use ListSchemas API.
     */
    listSchemas(listSchemasRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listSchemas.");
            const operationName = "listSchemas";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ListSchemas";
            const pathParams = {
                "{targetDatabaseId}": listSchemasRequest.targetDatabaseId
            };
            const queryParams = {
                "limit": listSchemasRequest.limit,
                "page": listSchemasRequest.page,
                "schemaName": listSchemasRequest.schemaName,
                "sortOrder": listSchemasRequest.sortOrder,
                "sortBy": listSchemasRequest.sortBy,
                "isOracleMaintained": listSchemasRequest.isOracleMaintained,
                "schemaNameContains": listSchemasRequest.schemaNameContains
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSchemasRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSchemasRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases/{targetDatabaseId}/schemas",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SchemaSummary,
                    type: "Array<model.SchemaSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSchemasRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SchemaSummary objects
     * contained in responses from the listSchemas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSchemas(request) {
        return oci_common_1.paginateRecords(request, req => this.listSchemas(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSchemasResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSchemas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSchemasResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSchemas(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SchemaSummary objects
     * contained in responses from the listSchemas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSchemasRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSchemas(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSchemas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSchemasResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSchemas(req));
    }
    /**
     * Gets a list of SDM and masking policy difference resources based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSdmMaskingPolicyDifferencesRequest
     * @return ListSdmMaskingPolicyDifferencesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListSdmMaskingPolicyDifferences.ts.html |here} to see how to use ListSdmMaskingPolicyDifferences API.
     */
    listSdmMaskingPolicyDifferences(listSdmMaskingPolicyDifferencesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listSdmMaskingPolicyDifferences.");
            const operationName = "listSdmMaskingPolicyDifferences";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/ListSdmMaskingPolicyDifferences";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSdmMaskingPolicyDifferencesRequest.compartmentId,
                "compartmentIdInSubtree": listSdmMaskingPolicyDifferencesRequest.compartmentIdInSubtree,
                "differenceAccessLevel": listSdmMaskingPolicyDifferencesRequest.differenceAccessLevel,
                "displayName": listSdmMaskingPolicyDifferencesRequest.displayName,
                "sensitiveDataModelId": listSdmMaskingPolicyDifferencesRequest.sensitiveDataModelId,
                "lifecycleState": listSdmMaskingPolicyDifferencesRequest.lifecycleState,
                "maskingPolicyId": listSdmMaskingPolicyDifferencesRequest.maskingPolicyId,
                "sortOrder": listSdmMaskingPolicyDifferencesRequest.sortOrder,
                "sortBy": listSdmMaskingPolicyDifferencesRequest.sortBy,
                "limit": listSdmMaskingPolicyDifferencesRequest.limit,
                "page": listSdmMaskingPolicyDifferencesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSdmMaskingPolicyDifferencesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSdmMaskingPolicyDifferencesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sdmMaskingPolicyDifferences",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sdmMaskingPolicyDifferenceCollection",
                    bodyModel: model.SdmMaskingPolicyDifferenceCollection,
                    type: "model.SdmMaskingPolicyDifferenceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets a list of security assessments.
  * <p>
  The ListSecurityAssessments operation returns only the assessments in the specified `compartmentId`.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSecurityAssessments on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSecurityAssessmentsRequest
       * @return ListSecurityAssessmentsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListSecurityAssessments.ts.html |here} to see how to use ListSecurityAssessments API.
       */
    listSecurityAssessments(listSecurityAssessmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listSecurityAssessments.");
            const operationName = "listSecurityAssessments";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessmentSummary/ListSecurityAssessments";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSecurityAssessmentsRequest.compartmentId,
                "compartmentIdInSubtree": listSecurityAssessmentsRequest.compartmentIdInSubtree,
                "accessLevel": listSecurityAssessmentsRequest.accessLevel,
                "displayName": listSecurityAssessmentsRequest.displayName,
                "type": listSecurityAssessmentsRequest.type,
                "scheduleAssessmentId": listSecurityAssessmentsRequest.scheduleAssessmentId,
                "isScheduleAssessment": listSecurityAssessmentsRequest.isScheduleAssessment,
                "triggeredBy": listSecurityAssessmentsRequest.triggeredBy,
                "targetId": listSecurityAssessmentsRequest.targetId,
                "sortOrder": listSecurityAssessmentsRequest.sortOrder,
                "isBaseline": listSecurityAssessmentsRequest.isBaseline,
                "sortBy": listSecurityAssessmentsRequest.sortBy,
                "timeCreatedGreaterThanOrEqualTo": listSecurityAssessmentsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listSecurityAssessmentsRequest.timeCreatedLessThan,
                "limit": listSecurityAssessmentsRequest.limit,
                "page": listSecurityAssessmentsRequest.page,
                "lifecycleState": listSecurityAssessmentsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSecurityAssessmentsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSecurityAssessmentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SecurityAssessmentSummary,
                    type: "Array<model.SecurityAssessmentSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAssessmentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAssessmentSummary objects
     * contained in responses from the listSecurityAssessments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAssessments(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAssessments(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAssessmentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAssessments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAssessmentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAssessments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAssessmentSummary objects
     * contained in responses from the listSecurityAssessments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAssessmentsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAssessments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAssessments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAssessmentsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAssessments(req));
    }
    /**
     * Gets a list of sensitive columns present in the specified sensitive data model based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveColumnsRequest
     * @return ListSensitiveColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListSensitiveColumns.ts.html |here} to see how to use ListSensitiveColumns API.
     */
    listSensitiveColumns(listSensitiveColumnsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listSensitiveColumns.");
            const operationName = "listSensitiveColumns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/ListSensitiveColumns";
            const pathParams = {
                "{sensitiveDataModelId}": listSensitiveColumnsRequest.sensitiveDataModelId
            };
            const queryParams = {
                "timeCreatedGreaterThanOrEqualTo": listSensitiveColumnsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listSensitiveColumnsRequest.timeCreatedLessThan,
                "timeUpdatedGreaterThanOrEqualTo": listSensitiveColumnsRequest.timeUpdatedGreaterThanOrEqualTo,
                "timeUpdatedLessThan": listSensitiveColumnsRequest.timeUpdatedLessThan,
                "sensitiveColumnLifecycleState": listSensitiveColumnsRequest.sensitiveColumnLifecycleState,
                "schemaName": listSensitiveColumnsRequest.schemaName,
                "objectName": listSensitiveColumnsRequest.objectName,
                "columnName": listSensitiveColumnsRequest.columnName,
                "objectType": listSensitiveColumnsRequest.objectType,
                "dataType": listSensitiveColumnsRequest.dataType,
                "status": listSensitiveColumnsRequest.status,
                "sensitiveTypeId": listSensitiveColumnsRequest.sensitiveTypeId,
                "parentColumnKey": listSensitiveColumnsRequest.parentColumnKey,
                "relationType": listSensitiveColumnsRequest.relationType,
                "columnGroup": listSensitiveColumnsRequest.columnGroup,
                "limit": listSensitiveColumnsRequest.limit,
                "page": listSensitiveColumnsRequest.page,
                "sortOrder": listSensitiveColumnsRequest.sortOrder,
                "sortBy": listSensitiveColumnsRequest.sortBy,
                "isCaseInSensitive": listSensitiveColumnsRequest.isCaseInSensitive
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSensitiveColumnsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSensitiveColumnsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sensitiveColumnCollection",
                    bodyModel: model.SensitiveColumnCollection,
                    type: "model.SensitiveColumnCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of sensitive data models based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveDataModelsRequest
     * @return ListSensitiveDataModelsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListSensitiveDataModels.ts.html |here} to see how to use ListSensitiveDataModels API.
     */
    listSensitiveDataModels(listSensitiveDataModelsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listSensitiveDataModels.");
            const operationName = "listSensitiveDataModels";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/ListSensitiveDataModels";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSensitiveDataModelsRequest.compartmentId,
                "compartmentIdInSubtree": listSensitiveDataModelsRequest.compartmentIdInSubtree,
                "accessLevel": listSensitiveDataModelsRequest.accessLevel,
                "displayName": listSensitiveDataModelsRequest.displayName,
                "sensitiveDataModelId": listSensitiveDataModelsRequest.sensitiveDataModelId,
                "timeCreatedGreaterThanOrEqualTo": listSensitiveDataModelsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listSensitiveDataModelsRequest.timeCreatedLessThan,
                "targetId": listSensitiveDataModelsRequest.targetId,
                "sortOrder": listSensitiveDataModelsRequest.sortOrder,
                "sortBy": listSensitiveDataModelsRequest.sortBy,
                "limit": listSensitiveDataModelsRequest.limit,
                "page": listSensitiveDataModelsRequest.page,
                "lifecycleState": listSensitiveDataModelsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSensitiveDataModelsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSensitiveDataModelsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sensitiveDataModelCollection",
                    bodyModel: model.SensitiveDataModelCollection,
                    type: "model.SensitiveDataModelCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of sensitive objects present in the specified sensitive data model based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveObjectsRequest
     * @return ListSensitiveObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListSensitiveObjects.ts.html |here} to see how to use ListSensitiveObjects API.
     */
    listSensitiveObjects(listSensitiveObjectsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listSensitiveObjects.");
            const operationName = "listSensitiveObjects";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveObjectCollection/ListSensitiveObjects";
            const pathParams = {
                "{sensitiveDataModelId}": listSensitiveObjectsRequest.sensitiveDataModelId
            };
            const queryParams = {
                "schemaName": listSensitiveObjectsRequest.schemaName,
                "objectName": listSensitiveObjectsRequest.objectName,
                "objectType": listSensitiveObjectsRequest.objectType,
                "limit": listSensitiveObjectsRequest.limit,
                "page": listSensitiveObjectsRequest.page,
                "sortOrder": listSensitiveObjectsRequest.sortOrder,
                "sortBy": listSensitiveObjectsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSensitiveObjectsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSensitiveObjectsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveObjects",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sensitiveObjectCollection",
                    bodyModel: model.SensitiveObjectCollection,
                    type: "model.SensitiveObjectCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of sensitive schemas present in the specified sensitive data model based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveSchemasRequest
     * @return ListSensitiveSchemasResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListSensitiveSchemas.ts.html |here} to see how to use ListSensitiveSchemas API.
     */
    listSensitiveSchemas(listSensitiveSchemasRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listSensitiveSchemas.");
            const operationName = "listSensitiveSchemas";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveSchemaCollection/ListSensitiveSchemas";
            const pathParams = {
                "{sensitiveDataModelId}": listSensitiveSchemasRequest.sensitiveDataModelId
            };
            const queryParams = {
                "schemaName": listSensitiveSchemasRequest.schemaName,
                "limit": listSensitiveSchemasRequest.limit,
                "page": listSensitiveSchemasRequest.page,
                "sortOrder": listSensitiveSchemasRequest.sortOrder,
                "sortBy": listSensitiveSchemasRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSensitiveSchemasRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSensitiveSchemasRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveSchemas",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sensitiveSchemaCollection",
                    bodyModel: model.SensitiveSchemaCollection,
                    type: "model.SensitiveSchemaCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of sensitive types based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveTypesRequest
     * @return ListSensitiveTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListSensitiveTypes.ts.html |here} to see how to use ListSensitiveTypes API.
     */
    listSensitiveTypes(listSensitiveTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listSensitiveTypes.");
            const operationName = "listSensitiveTypes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveType/ListSensitiveTypes";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSensitiveTypesRequest.compartmentId,
                "compartmentIdInSubtree": listSensitiveTypesRequest.compartmentIdInSubtree,
                "accessLevel": listSensitiveTypesRequest.accessLevel,
                "displayName": listSensitiveTypesRequest.displayName,
                "sensitiveTypeId": listSensitiveTypesRequest.sensitiveTypeId,
                "sensitiveTypeSource": listSensitiveTypesRequest.sensitiveTypeSource,
                "entityType": listSensitiveTypesRequest.entityType,
                "parentCategoryId": listSensitiveTypesRequest.parentCategoryId,
                "defaultMaskingFormatId": listSensitiveTypesRequest.defaultMaskingFormatId,
                "timeCreatedGreaterThanOrEqualTo": listSensitiveTypesRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listSensitiveTypesRequest.timeCreatedLessThan,
                "sortOrder": listSensitiveTypesRequest.sortOrder,
                "sortBy": listSensitiveTypesRequest.sortBy,
                "limit": listSensitiveTypesRequest.limit,
                "page": listSensitiveTypesRequest.page,
                "lifecycleState": listSensitiveTypesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSensitiveTypesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSensitiveTypesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sensitiveTypeCollection",
                    bodyModel: model.SensitiveTypeCollection,
                    type: "model.SensitiveTypeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of table metadata objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTablesRequest
     * @return ListTablesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListTables.ts.html |here} to see how to use ListTables API.
     */
    listTables(listTablesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listTables.");
            const operationName = "listTables";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ListTables";
            const pathParams = {
                "{targetDatabaseId}": listTablesRequest.targetDatabaseId
            };
            const queryParams = {
                "limit": listTablesRequest.limit,
                "page": listTablesRequest.page,
                "schemaName": listTablesRequest.schemaName,
                "tableName": listTablesRequest.tableName,
                "sortOrder": listTablesRequest.sortOrder,
                "sortBy": listTablesRequest.sortBy,
                "tableNameContains": listTablesRequest.tableNameContains,
                "schemaNameContains": listTablesRequest.schemaNameContains
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTablesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTablesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases/{targetDatabaseId}/tables",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.TableSummary,
                    type: "Array<model.TableSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listTablesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TableSummary objects
     * contained in responses from the listTables operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTables(request) {
        return oci_common_1.paginateRecords(request, req => this.listTables(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listTablesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTables operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTablesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listTables(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.TableSummary objects
     * contained in responses from the listTables operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTablesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listTables(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTables operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTablesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listTables(req));
    }
    /**
     * Gets a list of all target-alert policy associations.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTargetAlertPolicyAssociationsRequest
     * @return ListTargetAlertPolicyAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListTargetAlertPolicyAssociations.ts.html |here} to see how to use ListTargetAlertPolicyAssociations API.
     */
    listTargetAlertPolicyAssociations(listTargetAlertPolicyAssociationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listTargetAlertPolicyAssociations.");
            const operationName = "listTargetAlertPolicyAssociations";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociationSummary/ListTargetAlertPolicyAssociations";
            const pathParams = {};
            const queryParams = {
                "targetAlertPolicyAssociationId": listTargetAlertPolicyAssociationsRequest.targetAlertPolicyAssociationId,
                "alertPolicyId": listTargetAlertPolicyAssociationsRequest.alertPolicyId,
                "targetId": listTargetAlertPolicyAssociationsRequest.targetId,
                "compartmentId": listTargetAlertPolicyAssociationsRequest.compartmentId,
                "lifecycleState": listTargetAlertPolicyAssociationsRequest.lifecycleState,
                "limit": listTargetAlertPolicyAssociationsRequest.limit,
                "page": listTargetAlertPolicyAssociationsRequest.page,
                "sortOrder": listTargetAlertPolicyAssociationsRequest.sortOrder,
                "sortBy": listTargetAlertPolicyAssociationsRequest.sortBy,
                "timeCreatedGreaterThanOrEqualTo": listTargetAlertPolicyAssociationsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listTargetAlertPolicyAssociationsRequest.timeCreatedLessThan,
                "compartmentIdInSubtree": listTargetAlertPolicyAssociationsRequest.compartmentIdInSubtree,
                "accessLevel": listTargetAlertPolicyAssociationsRequest.accessLevel
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTargetAlertPolicyAssociationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTargetAlertPolicyAssociationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetAlertPolicyAssociations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetAlertPolicyAssociationCollection",
                    bodyModel: model.TargetAlertPolicyAssociationCollection,
                    type: "model.TargetAlertPolicyAssociationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the list of registered target databases in Data Safe.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTargetDatabasesRequest
     * @return ListTargetDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListTargetDatabases.ts.html |here} to see how to use ListTargetDatabases API.
     */
    listTargetDatabases(listTargetDatabasesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listTargetDatabases.");
            const operationName = "listTargetDatabases";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabaseSummary/ListTargetDatabases";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listTargetDatabasesRequest.compartmentId,
                "associatedResourceId": listTargetDatabasesRequest.associatedResourceId,
                "targetDatabaseId": listTargetDatabasesRequest.targetDatabaseId,
                "displayName": listTargetDatabasesRequest.displayName,
                "lifecycleState": listTargetDatabasesRequest.lifecycleState,
                "databaseType": listTargetDatabasesRequest.databaseType,
                "infrastructureType": listTargetDatabasesRequest.infrastructureType,
                "limit": listTargetDatabasesRequest.limit,
                "page": listTargetDatabasesRequest.page,
                "compartmentIdInSubtree": listTargetDatabasesRequest.compartmentIdInSubtree,
                "accessLevel": listTargetDatabasesRequest.accessLevel,
                "sortOrder": listTargetDatabasesRequest.sortOrder,
                "sortBy": listTargetDatabasesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTargetDatabasesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTargetDatabasesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.TargetDatabaseSummary,
                    type: "Array<model.TargetDatabaseSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listTargetDatabasesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TargetDatabaseSummary objects
     * contained in responses from the listTargetDatabases operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTargetDatabases(request) {
        return oci_common_1.paginateRecords(request, req => this.listTargetDatabases(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listTargetDatabasesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTargetDatabases operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTargetDatabasesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listTargetDatabases(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.TargetDatabaseSummary objects
     * contained in responses from the listTargetDatabases operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTargetDatabasesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listTargetDatabases(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTargetDatabases operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTargetDatabasesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listTargetDatabases(req));
    }
    /**
       * Gets a list of aggregated user details from the specified user assessment. This provides information about the overall state
  * of database user security.  For example, the user details include how many users have the DBA role and how many users are in
  * the critical category. This data is especially useful content for dashboards or to support analytics.
  * <p>
  When you perform the ListUserAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
  * parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
  * permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
  * root compartment. If the requestor does not have access to at least one subcompartment of the compartment specified by
  * compartmentId, then \"Not Authorized\" is returned.
  * <p>
  The parameter compartmentIdInSubtree applies when you perform ListUserAnalytics on the compartmentId passed and when it is
  * set to true, the entire hierarchy of compartments can be returned.
  * <p>
  To use ListUserAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
  * set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListUserAnalyticsRequest
       * @return ListUserAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListUserAnalytics.ts.html |here} to see how to use ListUserAnalytics API.
       */
    listUserAnalytics(listUserAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listUserAnalytics.");
            const operationName = "listUserAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ListUserAnalytics";
            const pathParams = {
                "{userAssessmentId}": listUserAnalyticsRequest.userAssessmentId
            };
            const queryParams = {
                "compartmentIdInSubtree": listUserAnalyticsRequest.compartmentIdInSubtree,
                "accessLevel": listUserAnalyticsRequest.accessLevel,
                "limit": listUserAnalyticsRequest.limit,
                "userCategory": listUserAnalyticsRequest.userCategory,
                "userKey": listUserAnalyticsRequest.userKey,
                "accountStatus": listUserAnalyticsRequest.accountStatus,
                "authenticationType": listUserAnalyticsRequest.authenticationType,
                "userName": listUserAnalyticsRequest.userName,
                "targetId": listUserAnalyticsRequest.targetId,
                "timeLastLoginGreaterThanOrEqualTo": listUserAnalyticsRequest.timeLastLoginGreaterThanOrEqualTo,
                "timeLastLoginLessThan": listUserAnalyticsRequest.timeLastLoginLessThan,
                "timeUserCreatedGreaterThanOrEqualTo": listUserAnalyticsRequest.timeUserCreatedGreaterThanOrEqualTo,
                "timeUserCreatedLessThan": listUserAnalyticsRequest.timeUserCreatedLessThan,
                "timePasswordLastChangedGreaterThanOrEqualTo": listUserAnalyticsRequest.timePasswordLastChangedGreaterThanOrEqualTo,
                "timePasswordLastChangedLessThan": listUserAnalyticsRequest.timePasswordLastChangedLessThan,
                "page": listUserAnalyticsRequest.page,
                "sortOrder": listUserAnalyticsRequest.sortOrder,
                "sortBy": listUserAnalyticsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listUserAnalyticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listUserAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/userAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.UserAggregation,
                    type: "Array<model.UserAggregation>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listUserAnalyticsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.UserAggregation objects
     * contained in responses from the listUserAnalytics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserAnalytics(request) {
        return oci_common_1.paginateRecords(request, req => this.listUserAnalytics(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listUserAnalyticsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUserAnalytics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserAnalyticsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listUserAnalytics(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.UserAggregation objects
     * contained in responses from the listUserAnalytics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserAnalyticsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listUserAnalytics(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUserAnalytics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserAnalyticsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listUserAnalytics(req));
    }
    /**
       * Gets a list of user assessments.
  * <p>
  The ListUserAssessments operation returns only the assessments in the specified `compartmentId`.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListUserAssessments on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListUserAssessmentsRequest
       * @return ListUserAssessmentsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListUserAssessments.ts.html |here} to see how to use ListUserAssessments API.
       */
    listUserAssessments(listUserAssessmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listUserAssessments.");
            const operationName = "listUserAssessments";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessmentSummary/ListUserAssessments";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listUserAssessmentsRequest.compartmentId,
                "compartmentIdInSubtree": listUserAssessmentsRequest.compartmentIdInSubtree,
                "accessLevel": listUserAssessmentsRequest.accessLevel,
                "displayName": listUserAssessmentsRequest.displayName,
                "scheduleUserAssessmentId": listUserAssessmentsRequest.scheduleUserAssessmentId,
                "isScheduleAssessment": listUserAssessmentsRequest.isScheduleAssessment,
                "isBaseline": listUserAssessmentsRequest.isBaseline,
                "targetId": listUserAssessmentsRequest.targetId,
                "type": listUserAssessmentsRequest.type,
                "triggeredBy": listUserAssessmentsRequest.triggeredBy,
                "timeCreatedGreaterThanOrEqualTo": listUserAssessmentsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listUserAssessmentsRequest.timeCreatedLessThan,
                "limit": listUserAssessmentsRequest.limit,
                "page": listUserAssessmentsRequest.page,
                "lifecycleState": listUserAssessmentsRequest.lifecycleState,
                "sortOrder": listUserAssessmentsRequest.sortOrder,
                "sortBy": listUserAssessmentsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listUserAssessmentsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listUserAssessmentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.UserAssessmentSummary,
                    type: "Array<model.UserAssessmentSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listUserAssessmentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.UserAssessmentSummary objects
     * contained in responses from the listUserAssessments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserAssessments(request) {
        return oci_common_1.paginateRecords(request, req => this.listUserAssessments(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listUserAssessmentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUserAssessments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserAssessmentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listUserAssessments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.UserAssessmentSummary objects
     * contained in responses from the listUserAssessments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserAssessmentsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listUserAssessments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUserAssessments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserAssessmentsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listUserAssessments(req));
    }
    /**
     * Gets a list of users of the specified user assessment. The result contains the database user details for each user, such
     * as user type, account status, last login time, user creation time, authentication type, user profile, and the date and time
     * of the latest password change. It also contains the user category derived from these user details as well as privileges
     * granted to each user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListUsersRequest
     * @return ListUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListUsers.ts.html |here} to see how to use ListUsers API.
     */
    listUsers(listUsersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listUsers.");
            const operationName = "listUsers";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ListUsers";
            const pathParams = {
                "{userAssessmentId}": listUsersRequest.userAssessmentId
            };
            const queryParams = {
                "limit": listUsersRequest.limit,
                "compartmentIdInSubtree": listUsersRequest.compartmentIdInSubtree,
                "accessLevel": listUsersRequest.accessLevel,
                "userCategory": listUsersRequest.userCategory,
                "userRole": listUsersRequest.userRole,
                "userProfile": listUsersRequest.userProfile,
                "userType": listUsersRequest.userType,
                "userKey": listUsersRequest.userKey,
                "accountStatus": listUsersRequest.accountStatus,
                "authenticationType": listUsersRequest.authenticationType,
                "userName": listUsersRequest.userName,
                "targetId": listUsersRequest.targetId,
                "timeLastLoginGreaterThanOrEqualTo": listUsersRequest.timeLastLoginGreaterThanOrEqualTo,
                "timeLastLoginLessThan": listUsersRequest.timeLastLoginLessThan,
                "timeUserCreatedGreaterThanOrEqualTo": listUsersRequest.timeUserCreatedGreaterThanOrEqualTo,
                "timeUserCreatedLessThan": listUsersRequest.timeUserCreatedLessThan,
                "timePasswordLastChangedGreaterThanOrEqualTo": listUsersRequest.timePasswordLastChangedGreaterThanOrEqualTo,
                "timePasswordLastChangedLessThan": listUsersRequest.timePasswordLastChangedLessThan,
                "page": listUsersRequest.page,
                "sortOrder": listUsersRequest.sortOrder,
                "sortBy": listUsersRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listUsersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listUsersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/users",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.UserSummary,
                    type: "Array<model.UserSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listUsersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.UserSummary objects
     * contained in responses from the listUsers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUsers(request) {
        return oci_common_1.paginateRecords(request, req => this.listUsers(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listUsersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUsersResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listUsers(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.UserSummary objects
     * contained in responses from the listUsers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUsersRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listUsers(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUsersResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listUsers(req));
    }
    /**
     * Gets a list of errors for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequestError/ListWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestError,
                    type: "Array<model.WorkRequestError>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Gets a list of log entries for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequestLogEntry/ListWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestLogEntry,
                    type: "Array<model.WorkRequestLogEntry>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Gets a list of work requests.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequestSummary/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "operationType": listWorkRequestsRequest.operationType,
                "sortBy": listWorkRequestsRequest.sortBy,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "resourceId": listWorkRequestsRequest.resourceId,
                "targetDatabaseId": listWorkRequestsRequest.targetDatabaseId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestSummary,
                    type: "Array<model.WorkRequestSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Masks data using the specified masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param MaskDataRequest
     * @return MaskDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/MaskData.ts.html |here} to see how to use MaskData API.
     */
    maskData(maskDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#maskData.");
            const operationName = "maskData";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/MaskData";
            const pathParams = {
                "{maskingPolicyId}": maskDataRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": maskDataRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, maskDataRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/actions/mask",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(maskDataRequest.maskDataDetails, "MaskDataDetails", model.MaskDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Modifies Global Settings in Data Safe in the tenancy and region.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ModifyGlobalSettingsRequest
     * @return ModifyGlobalSettingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ModifyGlobalSettings.ts.html |here} to see how to use ModifyGlobalSettings API.
     */
    modifyGlobalSettings(modifyGlobalSettingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#modifyGlobalSettings.");
            const operationName = "modifyGlobalSettings";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafeConfiguration/ModifyGlobalSettings";
            const pathParams = {
                "{compartmentId}": modifyGlobalSettingsRequest.compartmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": modifyGlobalSettingsRequest.ifMatch,
                "opc-request-id": modifyGlobalSettingsRequest.opcRequestId,
                "opc-retry-token": modifyGlobalSettingsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, modifyGlobalSettingsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configuration/{compartmentId}/actions/modifyGlobalSettings",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(modifyGlobalSettingsRequest.modifyGlobalSettingsDetails, "ModifyGlobalSettingsDetails", model.ModifyGlobalSettingsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the status of one or more alert specified by the alert IDs.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchAlertsRequest
     * @return PatchAlertsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/PatchAlerts.ts.html |here} to see how to use PatchAlerts API.
     */
    patchAlerts(patchAlertsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#patchAlerts.");
            const operationName = "patchAlerts";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Alert/PatchAlerts";
            const pathParams = {};
            const queryParams = {
                "compartmentIdInSubtree": patchAlertsRequest.compartmentIdInSubtree,
                "accessLevel": patchAlertsRequest.accessLevel
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": patchAlertsRequest.opcRequestId,
                "if-match": patchAlertsRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchAlertsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alerts",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchAlertsRequest.patchAlertsDetails, "PatchAlertsDetails", model.PatchAlertsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Patches one or more discovery results. You can use this operation to set the plannedAction attribute before using
     * ApplyDiscoveryJobResults to process the results based on this attribute.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchDiscoveryJobResultsRequest
     * @return PatchDiscoveryJobResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/PatchDiscoveryJobResults.ts.html |here} to see how to use PatchDiscoveryJobResults API.
     */
    patchDiscoveryJobResults(patchDiscoveryJobResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#patchDiscoveryJobResults.");
            const operationName = "patchDiscoveryJobResults";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/PatchDiscoveryJobResults";
            const pathParams = {
                "{discoveryJobId}": patchDiscoveryJobResultsRequest.discoveryJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": patchDiscoveryJobResultsRequest.ifMatch,
                "opc-request-id": patchDiscoveryJobResultsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchDiscoveryJobResultsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoveryJobs/{discoveryJobId}/results",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchDiscoveryJobResultsRequest.patchDiscoveryJobResultDetails, "PatchDiscoveryJobResultDetails", model.PatchDiscoveryJobResultDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Patches one or more columns in the specified masking policy. Use it to create, or update
     * masking columns. To create masking columns, use CreateMaskingColumnDetails as the patch
     * value. And to update masking columns, use UpdateMaskingColumnDetails as the patch value.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchMaskingColumnsRequest
     * @return PatchMaskingColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/PatchMaskingColumns.ts.html |here} to see how to use PatchMaskingColumns API.
     */
    patchMaskingColumns(patchMaskingColumnsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#patchMaskingColumns.");
            const operationName = "patchMaskingColumns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/PatchMaskingColumns";
            const pathParams = {
                "{maskingPolicyId}": patchMaskingColumnsRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": patchMaskingColumnsRequest.opcRequestId,
                "if-match": patchMaskingColumnsRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchMaskingColumnsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/maskingColumns",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchMaskingColumnsRequest.patchMaskingColumnsDetails, "PatchMaskingColumnsDetails", model.PatchMaskingColumnsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Patches one or more SDM masking policy difference columns. You can use this operation to set the plannedAction attribute before using
     * ApplySdmMaskingPolicyDifference to process the difference based on this attribute.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchSdmMaskingPolicyDifferenceColumnsRequest
     * @return PatchSdmMaskingPolicyDifferenceColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/PatchSdmMaskingPolicyDifferenceColumns.ts.html |here} to see how to use PatchSdmMaskingPolicyDifferenceColumns API.
     */
    patchSdmMaskingPolicyDifferenceColumns(patchSdmMaskingPolicyDifferenceColumnsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#patchSdmMaskingPolicyDifferenceColumns.");
            const operationName = "patchSdmMaskingPolicyDifferenceColumns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/PatchSdmMaskingPolicyDifferenceColumns";
            const pathParams = {
                "{sdmMaskingPolicyDifferenceId}": patchSdmMaskingPolicyDifferenceColumnsRequest.sdmMaskingPolicyDifferenceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": patchSdmMaskingPolicyDifferenceColumnsRequest.ifMatch,
                "opc-request-id": patchSdmMaskingPolicyDifferenceColumnsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchSdmMaskingPolicyDifferenceColumnsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}/differenceColumns",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchSdmMaskingPolicyDifferenceColumnsRequest.patchSdmMaskingPolicyDifferenceColumnsDetails, "PatchSdmMaskingPolicyDifferenceColumnsDetails", model.PatchSdmMaskingPolicyDifferenceColumnsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Patches one or more columns in the specified sensitive data model. Use it to create, update, or delete sensitive columns.
     * To create sensitive columns, use CreateSensitiveColumnDetails as the patch value. And to update sensitive columns,
     * use UpdateSensitiveColumnDetails as the patch value.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchSensitiveColumnsRequest
     * @return PatchSensitiveColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/PatchSensitiveColumns.ts.html |here} to see how to use PatchSensitiveColumns API.
     */
    patchSensitiveColumns(patchSensitiveColumnsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#patchSensitiveColumns.");
            const operationName = "patchSensitiveColumns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/PatchSensitiveColumns";
            const pathParams = {
                "{sensitiveDataModelId}": patchSensitiveColumnsRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": patchSensitiveColumnsRequest.ifMatch,
                "opc-request-id": patchSensitiveColumnsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchSensitiveColumnsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchSensitiveColumnsRequest.patchSensitiveColumnDetails, "PatchSensitiveColumnDetails", model.PatchSensitiveColumnDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates new target-alert policy associations that will be applied on the target database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchTargetAlertPolicyAssociationRequest
     * @return PatchTargetAlertPolicyAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/PatchTargetAlertPolicyAssociation.ts.html |here} to see how to use PatchTargetAlertPolicyAssociation API.
     */
    patchTargetAlertPolicyAssociation(patchTargetAlertPolicyAssociationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#patchTargetAlertPolicyAssociation.");
            const operationName = "patchTargetAlertPolicyAssociation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/PatchTargetAlertPolicyAssociation";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": patchTargetAlertPolicyAssociationRequest.opcRequestId,
                "if-match": patchTargetAlertPolicyAssociationRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchTargetAlertPolicyAssociationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetAlertPolicyAssociations",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchTargetAlertPolicyAssociationRequest.patchTargetAlertPolicyAssociationDetails, "PatchTargetAlertPolicyAssociationDetails", model.PatchTargetAlertPolicyAssociationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Provision audit policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ProvisionAuditPolicyRequest
     * @return ProvisionAuditPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ProvisionAuditPolicy.ts.html |here} to see how to use ProvisionAuditPolicy API.
     */
    provisionAuditPolicy(provisionAuditPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#provisionAuditPolicy.");
            const operationName = "provisionAuditPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicy/ProvisionAuditPolicy";
            const pathParams = {
                "{auditPolicyId}": provisionAuditPolicyRequest.auditPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": provisionAuditPolicyRequest.ifMatch,
                "opc-request-id": provisionAuditPolicyRequest.opcRequestId,
                "opc-retry-token": provisionAuditPolicyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, provisionAuditPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditPolicies/{auditPolicyId}/actions/provision",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(provisionAuditPolicyRequest.provisionAuditPolicyDetails, "ProvisionAuditPolicyDetails", model.ProvisionAuditPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Runs a security assessment, refreshes the latest assessment, and saves it for future reference.
     * The assessment runs with a securityAssessmentId of type LATEST. Before you start, first call the ListSecurityAssessments operation with filter \"type = latest\" to get the security assessment id for the target's latest assessment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RefreshSecurityAssessmentRequest
     * @return RefreshSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/RefreshSecurityAssessment.ts.html |here} to see how to use RefreshSecurityAssessment API.
     */
    refreshSecurityAssessment(refreshSecurityAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#refreshSecurityAssessment.");
            const operationName = "refreshSecurityAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/RefreshSecurityAssessment";
            const pathParams = {
                "{securityAssessmentId}": refreshSecurityAssessmentRequest.securityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": refreshSecurityAssessmentRequest.opcRetryToken,
                "opc-request-id": refreshSecurityAssessmentRequest.opcRequestId,
                "if-match": refreshSecurityAssessmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, refreshSecurityAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}/actions/refresh",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(refreshSecurityAssessmentRequest.runSecurityAssessmentDetails, "RunSecurityAssessmentDetails", model.RunSecurityAssessmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Refreshes the latest assessment and saves it for future reference. This operation runs with a userAssessmentId of type LATEST.
     * Before you start, first call the ListUserAssessments operation with filter \"type = latest\" to get the user assessment ID for
     * the target's latest assessment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RefreshUserAssessmentRequest
     * @return RefreshUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/RefreshUserAssessment.ts.html |here} to see how to use RefreshUserAssessment API.
     */
    refreshUserAssessment(refreshUserAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#refreshUserAssessment.");
            const operationName = "refreshUserAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/RefreshUserAssessment";
            const pathParams = {
                "{userAssessmentId}": refreshUserAssessmentRequest.userAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": refreshUserAssessmentRequest.opcRetryToken,
                "opc-request-id": refreshUserAssessmentRequest.opcRequestId,
                "if-match": refreshUserAssessmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, refreshUserAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/actions/refresh",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(refreshUserAssessmentRequest.runUserAssessmentDetails, "RunUserAssessmentDetails", model.RunUserAssessmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the schedule of a PDF or XLS report.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveScheduleReportRequest
     * @return RemoveScheduleReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/RemoveScheduleReport.ts.html |here} to see how to use RemoveScheduleReport API.
     */
    removeScheduleReport(removeScheduleReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#removeScheduleReport.");
            const operationName = "removeScheduleReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/RemoveScheduleReport";
            const pathParams = {
                "{reportDefinitionId}": removeScheduleReportRequest.reportDefinitionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeScheduleReportRequest.ifMatch,
                "opc-request-id": removeScheduleReportRequest.opcRequestId,
                "opc-retry-token": removeScheduleReportRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeScheduleReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reportDefinitions/{reportDefinitionId}/actions/removeScheduleReport",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Resumes the specified audit trail once it got stopped.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ResumeAuditTrailRequest
     * @return ResumeAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ResumeAuditTrail.ts.html |here} to see how to use ResumeAuditTrail API.
     */
    resumeAuditTrail(resumeAuditTrailRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#resumeAuditTrail.");
            const operationName = "resumeAuditTrail";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/ResumeAuditTrail";
            const pathParams = {
                "{auditTrailId}": resumeAuditTrailRequest.auditTrailId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": resumeAuditTrailRequest.ifMatch,
                "opc-request-id": resumeAuditTrailRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, resumeAuditTrailRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditTrails/{auditTrailId}/actions/resume",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Resume the given work request. Issuing a resume does not guarantee of immediate resume of the work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ResumeWorkRequestRequest
     * @return ResumeWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ResumeWorkRequest.ts.html |here} to see how to use ResumeWorkRequest API.
     */
    resumeWorkRequest(resumeWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#resumeWorkRequest.");
            const operationName = "resumeWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequest/ResumeWorkRequest";
            const pathParams = {
                "{workRequestId}": resumeWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": resumeWorkRequestRequest.opcRetryToken,
                "opc-request-id": resumeWorkRequestRequest.opcRequestId,
                "if-match": resumeWorkRequestRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, resumeWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/actions/resume",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves the audit policy details from the source target database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RetrieveAuditPoliciesRequest
     * @return RetrieveAuditPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/RetrieveAuditPolicies.ts.html |here} to see how to use RetrieveAuditPolicies API.
     */
    retrieveAuditPolicies(retrieveAuditPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#retrieveAuditPolicies.");
            const operationName = "retrieveAuditPolicies";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicy/RetrieveAuditPolicies";
            const pathParams = {
                "{auditPolicyId}": retrieveAuditPoliciesRequest.auditPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": retrieveAuditPoliciesRequest.ifMatch,
                "opc-request-id": retrieveAuditPoliciesRequest.opcRequestId,
                "opc-retry-token": retrieveAuditPoliciesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, retrieveAuditPoliciesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditPolicies/{auditPolicyId}/actions/retrieveFromTarget",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Schedules a PDF or XLS report based on parameters and report definition.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ScheduleReportRequest
     * @return ScheduleReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/ScheduleReport.ts.html |here} to see how to use ScheduleReport API.
     */
    scheduleReport(scheduleReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#scheduleReport.");
            const operationName = "scheduleReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/ScheduleReport";
            const pathParams = {
                "{reportDefinitionId}": scheduleReportRequest.reportDefinitionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": scheduleReportRequest.ifMatch,
                "opc-request-id": scheduleReportRequest.opcRequestId,
                "opc-retry-token": scheduleReportRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, scheduleReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reportDefinitions/{reportDefinitionId}/actions/scheduleReport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(scheduleReportRequest.scheduleReportDetails, "ScheduleReportDetails", model.ScheduleReportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Sets the saved security assessment as the baseline in the compartment where the the specified assessment resides. The security assessment needs to be of type 'SAVED'.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SetSecurityAssessmentBaselineRequest
     * @return SetSecurityAssessmentBaselineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/SetSecurityAssessmentBaseline.ts.html |here} to see how to use SetSecurityAssessmentBaseline API.
     */
    setSecurityAssessmentBaseline(setSecurityAssessmentBaselineRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#setSecurityAssessmentBaseline.");
            const operationName = "setSecurityAssessmentBaseline";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/SetSecurityAssessmentBaseline";
            const pathParams = {
                "{securityAssessmentId}": setSecurityAssessmentBaselineRequest.securityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": setSecurityAssessmentBaselineRequest.ifMatch,
                "opc-retry-token": setSecurityAssessmentBaselineRequest.opcRetryToken,
                "opc-request-id": setSecurityAssessmentBaselineRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, setSecurityAssessmentBaselineRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}/actions/setBaseline",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(setSecurityAssessmentBaselineRequest.baseLineDetails, "SecurityAssessmentBaseLineDetails", model.SecurityAssessmentBaseLineDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Sets the saved user assessment as the baseline in the compartment where the specified assessment resides. The user assessment needs to be of type 'SAVED'.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SetUserAssessmentBaselineRequest
     * @return SetUserAssessmentBaselineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/SetUserAssessmentBaseline.ts.html |here} to see how to use SetUserAssessmentBaseline API.
     */
    setUserAssessmentBaseline(setUserAssessmentBaselineRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#setUserAssessmentBaseline.");
            const operationName = "setUserAssessmentBaseline";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/SetUserAssessmentBaseline";
            const pathParams = {
                "{userAssessmentId}": setUserAssessmentBaselineRequest.userAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": setUserAssessmentBaselineRequest.ifMatch,
                "opc-retry-token": setUserAssessmentBaselineRequest.opcRetryToken,
                "opc-request-id": setUserAssessmentBaselineRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, setUserAssessmentBaselineRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/actions/setBaseline",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(setUserAssessmentBaselineRequest.baseLineDetails, "UserAssessmentBaseLineDetails", model.UserAssessmentBaseLineDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Starts collection of audit records on the specified audit trail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StartAuditTrailRequest
     * @return StartAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/StartAuditTrail.ts.html |here} to see how to use StartAuditTrail API.
     */
    startAuditTrail(startAuditTrailRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#startAuditTrail.");
            const operationName = "startAuditTrail";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/StartAuditTrail";
            const pathParams = {
                "{auditTrailId}": startAuditTrailRequest.auditTrailId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": startAuditTrailRequest.ifMatch,
                "opc-request-id": startAuditTrailRequest.opcRequestId,
                "opc-retry-token": startAuditTrailRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, startAuditTrailRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditTrails/{auditTrailId}/actions/start",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(startAuditTrailRequest.startAuditTrailDetails, "StartAuditTrailDetails", model.StartAuditTrailDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Stops the specified audit trail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StopAuditTrailRequest
     * @return StopAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/StopAuditTrail.ts.html |here} to see how to use StopAuditTrail API.
     */
    stopAuditTrail(stopAuditTrailRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#stopAuditTrail.");
            const operationName = "stopAuditTrail";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/StopAuditTrail";
            const pathParams = {
                "{auditTrailId}": stopAuditTrailRequest.auditTrailId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": stopAuditTrailRequest.ifMatch,
                "opc-request-id": stopAuditTrailRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, stopAuditTrailRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditTrails/{auditTrailId}/actions/stop",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Suspend the given work request. Issuing a suspend does not guarantee of a immediate suspend of the work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SuspendWorkRequestRequest
     * @return SuspendWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/SuspendWorkRequest.ts.html |here} to see how to use SuspendWorkRequest API.
     */
    suspendWorkRequest(suspendWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#suspendWorkRequest.");
            const operationName = "suspendWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequest/SuspendWorkRequest";
            const pathParams = {
                "{workRequestId}": suspendWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": suspendWorkRequestRequest.opcRetryToken,
                "opc-request-id": suspendWorkRequestRequest.opcRequestId,
                "if-match": suspendWorkRequestRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, suspendWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/actions/suspend",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the baseline setting for the saved security assessment. The saved security assessment is no longer considered a baseline.
     * Sets the if-match parameter to the value of the etag from a previous GET or POST response for that resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UnsetSecurityAssessmentBaselineRequest
     * @return UnsetSecurityAssessmentBaselineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UnsetSecurityAssessmentBaseline.ts.html |here} to see how to use UnsetSecurityAssessmentBaseline API.
     */
    unsetSecurityAssessmentBaseline(unsetSecurityAssessmentBaselineRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#unsetSecurityAssessmentBaseline.");
            const operationName = "unsetSecurityAssessmentBaseline";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/UnsetSecurityAssessmentBaseline";
            const pathParams = {
                "{securityAssessmentId}": unsetSecurityAssessmentBaselineRequest.securityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": unsetSecurityAssessmentBaselineRequest.ifMatch,
                "opc-retry-token": unsetSecurityAssessmentBaselineRequest.opcRetryToken,
                "opc-request-id": unsetSecurityAssessmentBaselineRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, unsetSecurityAssessmentBaselineRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}/actions/unsetBaseline",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the baseline setting for the saved user assessment. The saved user assessment is no longer considered a baseline.
     * Sets the if-match parameter to the value of the etag from a previous GET or POST response for that resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UnsetUserAssessmentBaselineRequest
     * @return UnsetUserAssessmentBaselineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UnsetUserAssessmentBaseline.ts.html |here} to see how to use UnsetUserAssessmentBaseline API.
     */
    unsetUserAssessmentBaseline(unsetUserAssessmentBaselineRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#unsetUserAssessmentBaseline.");
            const operationName = "unsetUserAssessmentBaseline";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/UnsetUserAssessmentBaseline";
            const pathParams = {
                "{userAssessmentId}": unsetUserAssessmentBaselineRequest.userAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": unsetUserAssessmentBaselineRequest.ifMatch,
                "opc-retry-token": unsetUserAssessmentBaselineRequest.opcRetryToken,
                "opc-request-id": unsetUserAssessmentBaselineRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, unsetUserAssessmentBaselineRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}/actions/unsetBaseline",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the status of the specified alert.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAlertRequest
     * @return UpdateAlertResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateAlert.ts.html |here} to see how to use UpdateAlert API.
     */
    updateAlert(updateAlertRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateAlert.");
            const operationName = "updateAlert";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Alert/UpdateAlert";
            const pathParams = {
                "{alertId}": updateAlertRequest.alertId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAlertRequest.ifMatch,
                "opc-request-id": updateAlertRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAlertRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alerts/{alertId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAlertRequest.updateAlertDetails, "UpdateAlertDetails", model.UpdateAlertDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alert",
                    bodyModel: model.Alert,
                    type: "model.Alert",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the audit archive retrieval.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuditArchiveRetrievalRequest
     * @return UpdateAuditArchiveRetrievalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateAuditArchiveRetrieval.ts.html |here} to see how to use UpdateAuditArchiveRetrieval API.
     */
    updateAuditArchiveRetrieval(updateAuditArchiveRetrievalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateAuditArchiveRetrieval.");
            const operationName = "updateAuditArchiveRetrieval";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditArchiveRetrieval/UpdateAuditArchiveRetrieval";
            const pathParams = {
                "{auditArchiveRetrievalId}": updateAuditArchiveRetrievalRequest.auditArchiveRetrievalId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAuditArchiveRetrievalRequest.ifMatch,
                "opc-request-id": updateAuditArchiveRetrievalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAuditArchiveRetrievalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditArchiveRetrievals/{auditArchiveRetrievalId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAuditArchiveRetrievalRequest.updateAuditArchiveRetrievalDetails, "UpdateAuditArchiveRetrievalDetails", model.UpdateAuditArchiveRetrievalDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the audit policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuditPolicyRequest
     * @return UpdateAuditPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateAuditPolicy.ts.html |here} to see how to use UpdateAuditPolicy API.
     */
    updateAuditPolicy(updateAuditPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateAuditPolicy.");
            const operationName = "updateAuditPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicy/UpdateAuditPolicy";
            const pathParams = {
                "{auditPolicyId}": updateAuditPolicyRequest.auditPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAuditPolicyRequest.ifMatch,
                "opc-request-id": updateAuditPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAuditPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditPolicies/{auditPolicyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAuditPolicyRequest.updateAuditPolicyDetails, "UpdateAuditPolicyDetails", model.UpdateAuditPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified audit profile.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuditProfileRequest
     * @return UpdateAuditProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateAuditProfile.ts.html |here} to see how to use UpdateAuditProfile API.
     */
    updateAuditProfile(updateAuditProfileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateAuditProfile.");
            const operationName = "updateAuditProfile";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/UpdateAuditProfile";
            const pathParams = {
                "{auditProfileId}": updateAuditProfileRequest.auditProfileId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAuditProfileRequest.ifMatch,
                "opc-request-id": updateAuditProfileRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAuditProfileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditProfiles/{auditProfileId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAuditProfileRequest.updateAuditProfileDetails, "UpdateAuditProfileDetails", model.UpdateAuditProfileDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified audit trail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuditTrailRequest
     * @return UpdateAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateAuditTrail.ts.html |here} to see how to use UpdateAuditTrail API.
     */
    updateAuditTrail(updateAuditTrailRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateAuditTrail.");
            const operationName = "updateAuditTrail";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/UpdateAuditTrail";
            const pathParams = {
                "{auditTrailId}": updateAuditTrailRequest.auditTrailId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAuditTrailRequest.ifMatch,
                "opc-request-id": updateAuditTrailRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAuditTrailRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/auditTrails/{auditTrailId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAuditTrailRequest.updateAuditTrailDetails, "UpdateAuditTrailDetails", model.UpdateAuditTrailDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified Data Safe private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDataSafePrivateEndpointRequest
     * @return UpdateDataSafePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateDataSafePrivateEndpoint.ts.html |here} to see how to use UpdateDataSafePrivateEndpoint API.
     */
    updateDataSafePrivateEndpoint(updateDataSafePrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateDataSafePrivateEndpoint.");
            const operationName = "updateDataSafePrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpoint/UpdateDataSafePrivateEndpoint";
            const pathParams = {
                "{dataSafePrivateEndpointId}": updateDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDataSafePrivateEndpointRequest.ifMatch,
                "opc-request-id": updateDataSafePrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDataSafePrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDataSafePrivateEndpointRequest.updateDataSafePrivateEndpointDetails, "UpdateDataSafePrivateEndpointDetails", model.UpdateDataSafePrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified library masking format. Note that updating the formatEntries attribute replaces all the existing masking format entries with the specified format entries.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateLibraryMaskingFormatRequest
     * @return UpdateLibraryMaskingFormatResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateLibraryMaskingFormat.ts.html |here} to see how to use UpdateLibraryMaskingFormat API.
     */
    updateLibraryMaskingFormat(updateLibraryMaskingFormatRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateLibraryMaskingFormat.");
            const operationName = "updateLibraryMaskingFormat";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormat/UpdateLibraryMaskingFormat";
            const pathParams = {
                "{libraryMaskingFormatId}": updateLibraryMaskingFormatRequest.libraryMaskingFormatId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateLibraryMaskingFormatRequest.ifMatch,
                "opc-request-id": updateLibraryMaskingFormatRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateLibraryMaskingFormatRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/libraryMaskingFormats/{libraryMaskingFormatId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateLibraryMaskingFormatRequest.updateLibraryMaskingFormatDetails, "UpdateLibraryMaskingFormatDetails", model.UpdateLibraryMaskingFormatDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified masking column. Note that updating the maskingFormats
     * attribute replaces the currently assigned masking formats with the specified masking formats.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMaskingColumnRequest
     * @return UpdateMaskingColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateMaskingColumn.ts.html |here} to see how to use UpdateMaskingColumn API.
     */
    updateMaskingColumn(updateMaskingColumnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateMaskingColumn.");
            const operationName = "updateMaskingColumn";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/UpdateMaskingColumn";
            const pathParams = {
                "{maskingColumnKey}": updateMaskingColumnRequest.maskingColumnKey,
                "{maskingPolicyId}": updateMaskingColumnRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMaskingColumnRequest.ifMatch,
                "opc-request-id": updateMaskingColumnRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMaskingColumnRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/maskingColumns/{maskingColumnKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMaskingColumnRequest.updateMaskingColumnDetails, "UpdateMaskingColumnDetails", model.UpdateMaskingColumnDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMaskingPolicyRequest
     * @return UpdateMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateMaskingPolicy.ts.html |here} to see how to use UpdateMaskingPolicy API.
     */
    updateMaskingPolicy(updateMaskingPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateMaskingPolicy.");
            const operationName = "updateMaskingPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/UpdateMaskingPolicy";
            const pathParams = {
                "{maskingPolicyId}": updateMaskingPolicyRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMaskingPolicyRequest.ifMatch,
                "opc-request-id": updateMaskingPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMaskingPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMaskingPolicyRequest.updateMaskingPolicyDetails, "UpdateMaskingPolicyDetails", model.UpdateMaskingPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified on-premises connector.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOnPremConnectorRequest
     * @return UpdateOnPremConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateOnPremConnector.ts.html |here} to see how to use UpdateOnPremConnector API.
     */
    updateOnPremConnector(updateOnPremConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateOnPremConnector.");
            const operationName = "updateOnPremConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/UpdateOnPremConnector";
            const pathParams = {
                "{onPremConnectorId}": updateOnPremConnectorRequest.onPremConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOnPremConnectorRequest.ifMatch,
                "opc-request-id": updateOnPremConnectorRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOnPremConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/onPremConnectors/{onPremConnectorId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOnPremConnectorRequest.updateOnPremConnectorDetails, "UpdateOnPremConnectorDetails", model.UpdateOnPremConnectorDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the wallet for the specified on-premises connector to a new version.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOnPremConnectorWalletRequest
     * @return UpdateOnPremConnectorWalletResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateOnPremConnectorWallet.ts.html |here} to see how to use UpdateOnPremConnectorWallet API.
     */
    updateOnPremConnectorWallet(updateOnPremConnectorWalletRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateOnPremConnectorWallet.");
            const operationName = "updateOnPremConnectorWallet";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/UpdateOnPremConnectorWallet";
            const pathParams = {
                "{onPremConnectorId}": updateOnPremConnectorWalletRequest.onPremConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateOnPremConnectorWalletRequest.opcRetryToken,
                "if-match": updateOnPremConnectorWalletRequest.ifMatch,
                "opc-request-id": updateOnPremConnectorWalletRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOnPremConnectorWalletRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/onPremConnectors/{onPremConnectorId}/wallet",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOnPremConnectorWalletRequest.updateOnPremConnectorWalletDetails, "UpdateOnPremConnectorWalletDetails", model.UpdateOnPremConnectorWalletDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified report definition. Only user created report definition can be updated. Seeded report definitions need to be saved as new report definition first.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateReportDefinitionRequest
     * @return UpdateReportDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateReportDefinition.ts.html |here} to see how to use UpdateReportDefinition API.
     */
    updateReportDefinition(updateReportDefinitionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateReportDefinition.");
            const operationName = "updateReportDefinition";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/UpdateReportDefinition";
            const pathParams = {
                "{reportDefinitionId}": updateReportDefinitionRequest.reportDefinitionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateReportDefinitionRequest.ifMatch,
                "opc-request-id": updateReportDefinitionRequest.opcRequestId,
                "opc-retry-token": updateReportDefinitionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateReportDefinitionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/reportDefinitions/{reportDefinitionId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateReportDefinitionRequest.updateReportDefinitionDetails, "UpdateReportDefinitionDetails", model.UpdateReportDefinitionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified sdm masking policy difference.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSdmMaskingPolicyDifferenceRequest
     * @return UpdateSdmMaskingPolicyDifferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateSdmMaskingPolicyDifference.ts.html |here} to see how to use UpdateSdmMaskingPolicyDifference API.
     */
    updateSdmMaskingPolicyDifference(updateSdmMaskingPolicyDifferenceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateSdmMaskingPolicyDifference.");
            const operationName = "updateSdmMaskingPolicyDifference";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/UpdateSdmMaskingPolicyDifference";
            const pathParams = {
                "{sdmMaskingPolicyDifferenceId}": updateSdmMaskingPolicyDifferenceRequest.sdmMaskingPolicyDifferenceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSdmMaskingPolicyDifferenceRequest.ifMatch,
                "opc-request-id": updateSdmMaskingPolicyDifferenceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSdmMaskingPolicyDifferenceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSdmMaskingPolicyDifferenceRequest.updateSdmMaskingPolicyDifferenceDetails, "UpdateSdmMaskingPolicyDifferenceDetails", model.UpdateSdmMaskingPolicyDifferenceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified security assessment. This operation allows to update the security assessment displayName, description, or schedule.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSecurityAssessmentRequest
     * @return UpdateSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateSecurityAssessment.ts.html |here} to see how to use UpdateSecurityAssessment API.
     */
    updateSecurityAssessment(updateSecurityAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateSecurityAssessment.");
            const operationName = "updateSecurityAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/UpdateSecurityAssessment";
            const pathParams = {
                "{securityAssessmentId}": updateSecurityAssessmentRequest.securityAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateSecurityAssessmentRequest.opcRequestId,
                "if-match": updateSecurityAssessmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSecurityAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAssessments/{securityAssessmentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSecurityAssessmentRequest.updateSecurityAssessmentDetails, "UpdateSecurityAssessmentDetails", model.UpdateSecurityAssessmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified sensitive column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSensitiveColumnRequest
     * @return UpdateSensitiveColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateSensitiveColumn.ts.html |here} to see how to use UpdateSensitiveColumn API.
     */
    updateSensitiveColumn(updateSensitiveColumnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateSensitiveColumn.");
            const operationName = "updateSensitiveColumn";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/UpdateSensitiveColumn";
            const pathParams = {
                "{sensitiveDataModelId}": updateSensitiveColumnRequest.sensitiveDataModelId,
                "{sensitiveColumnKey}": updateSensitiveColumnRequest.sensitiveColumnKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSensitiveColumnRequest.ifMatch,
                "opc-request-id": updateSensitiveColumnRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSensitiveColumnRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/{sensitiveColumnKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSensitiveColumnRequest.updateSensitiveColumnDetails, "UpdateSensitiveColumnDetails", model.UpdateSensitiveColumnDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified sensitive data model. Note that updating any attribute of a sensitive
     * data model does not perform data discovery.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSensitiveDataModelRequest
     * @return UpdateSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateSensitiveDataModel.ts.html |here} to see how to use UpdateSensitiveDataModel API.
     */
    updateSensitiveDataModel(updateSensitiveDataModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateSensitiveDataModel.");
            const operationName = "updateSensitiveDataModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/UpdateSensitiveDataModel";
            const pathParams = {
                "{sensitiveDataModelId}": updateSensitiveDataModelRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSensitiveDataModelRequest.ifMatch,
                "opc-request-id": updateSensitiveDataModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSensitiveDataModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSensitiveDataModelRequest.updateSensitiveDataModelDetails, "UpdateSensitiveDataModelDetails", model.UpdateSensitiveDataModelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified sensitive type.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSensitiveTypeRequest
     * @return UpdateSensitiveTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateSensitiveType.ts.html |here} to see how to use UpdateSensitiveType API.
     */
    updateSensitiveType(updateSensitiveTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateSensitiveType.");
            const operationName = "updateSensitiveType";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveType/UpdateSensitiveType";
            const pathParams = {
                "{sensitiveTypeId}": updateSensitiveTypeRequest.sensitiveTypeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSensitiveTypeRequest.ifMatch,
                "opc-request-id": updateSensitiveTypeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSensitiveTypeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveTypes/{sensitiveTypeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSensitiveTypeRequest.updateSensitiveTypeDetails, "UpdateSensitiveTypeDetails", model.UpdateSensitiveTypeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified target-alert policy association.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateTargetAlertPolicyAssociationRequest
     * @return UpdateTargetAlertPolicyAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateTargetAlertPolicyAssociation.ts.html |here} to see how to use UpdateTargetAlertPolicyAssociation API.
     */
    updateTargetAlertPolicyAssociation(updateTargetAlertPolicyAssociationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateTargetAlertPolicyAssociation.");
            const operationName = "updateTargetAlertPolicyAssociation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/UpdateTargetAlertPolicyAssociation";
            const pathParams = {
                "{targetAlertPolicyAssociationId}": updateTargetAlertPolicyAssociationRequest.targetAlertPolicyAssociationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTargetAlertPolicyAssociationRequest.ifMatch,
                "opc-request-id": updateTargetAlertPolicyAssociationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateTargetAlertPolicyAssociationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetAlertPolicyAssociations/{targetAlertPolicyAssociationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTargetAlertPolicyAssociationRequest.updateTargetAlertPolicyAssociationDetails, "UpdateTargetAlertPolicyAssociationDetails", model.UpdateTargetAlertPolicyAssociationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified Data Safe target database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateTargetDatabaseRequest
     * @return UpdateTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateTargetDatabase.ts.html |here} to see how to use UpdateTargetDatabase API.
     */
    updateTargetDatabase(updateTargetDatabaseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateTargetDatabase.");
            const operationName = "updateTargetDatabase";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/UpdateTargetDatabase";
            const pathParams = {
                "{targetDatabaseId}": updateTargetDatabaseRequest.targetDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateTargetDatabaseRequest.opcRequestId,
                "if-match": updateTargetDatabaseRequest.ifMatch,
                "opc-retry-token": updateTargetDatabaseRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateTargetDatabaseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targetDatabases/{targetDatabaseId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTargetDatabaseRequest.updateTargetDatabaseDetails, "UpdateTargetDatabaseDetails", model.UpdateTargetDatabaseDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified user assessment. This operation allows to update the user assessment displayName, description, or schedule.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateUserAssessmentRequest
     * @return UpdateUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UpdateUserAssessment.ts.html |here} to see how to use UpdateUserAssessment API.
     */
    updateUserAssessment(updateUserAssessmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#updateUserAssessment.");
            const operationName = "updateUserAssessment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/UpdateUserAssessment";
            const pathParams = {
                "{userAssessmentId}": updateUserAssessmentRequest.userAssessmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateUserAssessmentRequest.opcRequestId,
                "if-match": updateUserAssessmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateUserAssessmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userAssessments/{userAssessmentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateUserAssessmentRequest.updateUserAssessmentDetails, "UpdateUserAssessmentDetails", model.UpdateUserAssessmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Uploads a masking policy file (also called template) to update the specified masking policy.
     * To create a new masking policy using a file, first use the CreateMaskingPolicy operation
     * to create an empty masking policy and then use this endpoint to upload the masking policy file.
     * Note that the upload operation replaces the content of the specified masking policy,
     * including all the existing columns and masking formats, with the content of the file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UploadMaskingPolicyRequest
     * @return UploadMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UploadMaskingPolicy.ts.html |here} to see how to use UploadMaskingPolicy API.
     */
    uploadMaskingPolicy(uploadMaskingPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#uploadMaskingPolicy.");
            const operationName = "uploadMaskingPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/UploadMaskingPolicy";
            const pathParams = {
                "{maskingPolicyId}": uploadMaskingPolicyRequest.maskingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "if-match": uploadMaskingPolicyRequest.ifMatch,
                "opc-request-id": uploadMaskingPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, uploadMaskingPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/maskingPolicies/{maskingPolicyId}/actions/upload",
                method: "POST",
                bodyContent: uploadMaskingPolicyRequest.uploadMaskingPolicyDetails,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Uploads a sensitive data model file (also called template) to update the specified sensitive data model. To create
     * a new sensitive data model using a file, first use the CreateSensitiveDataModel operation to create an empty data model
     * and then use this endpoint to upload the data model file. Note that the upload operation replaces the content of the
     * specified sensitive data model, including all the existing columns and their relationships, with the content of the file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UploadSensitiveDataModelRequest
     * @return UploadSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/datasafe/UploadSensitiveDataModel.ts.html |here} to see how to use UploadSensitiveDataModel API.
     */
    uploadSensitiveDataModel(uploadSensitiveDataModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataSafeClient#uploadSensitiveDataModel.");
            const operationName = "uploadSensitiveDataModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/UploadSensitiveDataModel";
            const pathParams = {
                "{sensitiveDataModelId}": uploadSensitiveDataModelRequest.sensitiveDataModelId
            };
            const queryParams = {};
            let headerParams = {
                "if-match": uploadSensitiveDataModelRequest.ifMatch,
                "opc-request-id": uploadSensitiveDataModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, uploadSensitiveDataModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/upload",
                method: "POST",
                bodyContent: uploadSensitiveDataModelRequest.uploadSensitiveDataModelDetails,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DataSafeClient = DataSafeClient;
DataSafeClient.serviceEndpointTemplate = "https://datasafe.{region}.oci.{secondLevelDomain}";
DataSafeClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map