"use strict";
/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlTuningClient = exports.SqlTuningApiKeys = exports.DiagnosabilityClient = exports.DiagnosabilityApiKeys = exports.DbManagementClient = exports.DbManagementApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const dbmanagement_waiter_1 = require("./dbmanagement-waiter");
const oci_common_1 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DbManagementApiKeys;
(function (DbManagementApiKeys) {
})(DbManagementApiKeys = exports.DbManagementApiKeys || (exports.DbManagementApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class DbManagementClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = false;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this.targetService = "DbManagement";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20201101";
        if (this.logger)
            this.logger.info(`DbManagementClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DbManagementClient.serviceEndpointTemplate, this._region, DbManagementClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DbManagementClient.serviceEndpointTemplate, this._regionId, DbManagementClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DbManagementClient.serviceEndpointTemplate, region, DbManagementClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DbManagementClient.serviceEndpointTemplate, regionId, DbManagementClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new DbManagementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new dbmanagement_waiter_1.DbManagementWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Adds data files or temp files to the tablespace.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddDataFilesRequest
     * @return AddDataFilesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/AddDataFiles.ts.html |here} to see how to use AddDataFiles API.
     */
    addDataFiles(addDataFilesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#addDataFiles.");
            const operationName = "addDataFiles";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Tablespace/AddDataFiles";
            const pathParams = {
                "{managedDatabaseId}": addDataFilesRequest.managedDatabaseId,
                "{tablespaceName}": addDataFilesRequest.tablespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addDataFilesRequest.opcRequestId,
                "opc-retry-token": addDataFilesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addDataFilesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}/actions/addDataFiles",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addDataFilesRequest.addDataFilesDetails, "AddDataFilesDetails", model.AddDataFilesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tablespaceAdminStatus",
                    bodyModel: model.TablespaceAdminStatus,
                    type: "model.TablespaceAdminStatus",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds a Managed Database to a specific Managed Database Group.
     * After the database is added, it will be included in the
     * management activities performed on the Managed Database Group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddManagedDatabaseToManagedDatabaseGroupRequest
     * @return AddManagedDatabaseToManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/AddManagedDatabaseToManagedDatabaseGroup.ts.html |here} to see how to use AddManagedDatabaseToManagedDatabaseGroup API.
     */
    addManagedDatabaseToManagedDatabaseGroup(addManagedDatabaseToManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#addManagedDatabaseToManagedDatabaseGroup.");
            const operationName = "addManagedDatabaseToManagedDatabaseGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabaseGroup/AddManagedDatabaseToManagedDatabaseGroup";
            const pathParams = {
                "{managedDatabaseGroupId}": addManagedDatabaseToManagedDatabaseGroupRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addManagedDatabaseToManagedDatabaseGroupRequest.opcRequestId,
                "opc-retry-token": addManagedDatabaseToManagedDatabaseGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addManagedDatabaseToManagedDatabaseGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/addManagedDatabase",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addManagedDatabaseToManagedDatabaseGroupRequest.addManagedDatabaseToManagedDatabaseGroupDetails, "AddManagedDatabaseToManagedDatabaseGroupDetails", model.AddManagedDatabaseToManagedDatabaseGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the metadata for each ADDM task who's end snapshot time falls within the provided start and end time. Details include
     * the name of the ADDM task, description, user, status and creation date time.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddmTasksRequest
     * @return AddmTasksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/AddmTasks.ts.html |here} to see how to use AddmTasks API.
     */
    addmTasks(addmTasksRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#addmTasks.");
            const operationName = "addmTasks";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/AddmTasksCollection/AddmTasks";
            const pathParams = {
                "{managedDatabaseId}": addmTasksRequest.managedDatabaseId
            };
            const queryParams = {
                "timeStart": addmTasksRequest.timeStart,
                "timeEnd": addmTasksRequest.timeEnd,
                "page": addmTasksRequest.page,
                "limit": addmTasksRequest.limit,
                "sortBy": addmTasksRequest.sortBy,
                "sortOrder": addmTasksRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addmTasksRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addmTasksRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/addmTasks",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmTasksCollection",
                    bodyModel: model.AddmTasksCollection,
                    type: "model.AddmTasksCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Changes database parameter values. There are two kinds of database
  * parameters:
  * <p>
  - Dynamic parameters: They can be changed for the current Oracle
  * Database instance. The changes take effect immediately.
  * - Static parameters: They cannot be changed for the current instance.
  * You must change these parameters and then restart the database before
  * changes take effect.
  * <p>
  **Note:** If the instance is started using a text initialization
  * parameter file, the parameter changes are applicable only for the
  * current instance. You must update them manually to be passed to
  * a future instance.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ChangeDatabaseParametersRequest
       * @return ChangeDatabaseParametersResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ChangeDatabaseParameters.ts.html |here} to see how to use ChangeDatabaseParameters API.
       */
    changeDatabaseParameters(changeDatabaseParametersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#changeDatabaseParameters.");
            const operationName = "changeDatabaseParameters";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ChangeDatabaseParameters";
            const pathParams = {
                "{managedDatabaseId}": changeDatabaseParametersRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeDatabaseParametersRequest.opcRequestId,
                "opc-retry-token": changeDatabaseParametersRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDatabaseParametersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/actions/changeDatabaseParameters",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDatabaseParametersRequest.changeDatabaseParametersDetails, "ChangeDatabaseParametersDetails", model.ChangeDatabaseParametersDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "updateDatabaseParametersResult",
                    bodyModel: model.UpdateDatabaseParametersResult,
                    type: "model.UpdateDatabaseParametersResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the Database Management private endpoint and its dependent resources to the specified compartment.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeDbManagementPrivateEndpointCompartmentRequest
     * @return ChangeDbManagementPrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ChangeDbManagementPrivateEndpointCompartment.ts.html |here} to see how to use ChangeDbManagementPrivateEndpointCompartment API.
     */
    changeDbManagementPrivateEndpointCompartment(changeDbManagementPrivateEndpointCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#changeDbManagementPrivateEndpointCompartment.");
            const operationName = "changeDbManagementPrivateEndpointCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/DbManagementPrivateEndpoint/ChangeDbManagementPrivateEndpointCompartment";
            const pathParams = {
                "{dbManagementPrivateEndpointId}": changeDbManagementPrivateEndpointCompartmentRequest.dbManagementPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeDbManagementPrivateEndpointCompartmentRequest.opcRequestId,
                "opc-retry-token": changeDbManagementPrivateEndpointCompartmentRequest.opcRetryToken,
                "if-match": changeDbManagementPrivateEndpointCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDbManagementPrivateEndpointCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbManagementPrivateEndpoints/{dbManagementPrivateEndpointId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDbManagementPrivateEndpointCompartmentRequest.changeDbManagementPrivateEndpointCompartmentDetails, "ChangeDbManagementPrivateEndpointCompartmentDetails", model.ChangeDbManagementPrivateEndpointCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the external DB system and its related resources (excluding databases) to the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeExternalDbSystemCompartmentRequest
     * @return ChangeExternalDbSystemCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ChangeExternalDbSystemCompartment.ts.html |here} to see how to use ChangeExternalDbSystemCompartment API.
     */
    changeExternalDbSystemCompartment(changeExternalDbSystemCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#changeExternalDbSystemCompartment.");
            const operationName = "changeExternalDbSystemCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystem/ChangeExternalDbSystemCompartment";
            const pathParams = {
                "{externalDbSystemId}": changeExternalDbSystemCompartmentRequest.externalDbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeExternalDbSystemCompartmentRequest.opcRequestId,
                "opc-retry-token": changeExternalDbSystemCompartmentRequest.opcRetryToken,
                "if-match": changeExternalDbSystemCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeExternalDbSystemCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystems/{externalDbSystemId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeExternalDbSystemCompartmentRequest.changeExternalDbSystemCompartmentDetails, "ChangeExternalDbSystemCompartmentDetails", model.ChangeExternalDbSystemCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the Exadata infrastructure  and its related resources (storage server, storage server connectors and storage server grid) to the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeExternalExadataInfrastructureCompartmentRequest
     * @return ChangeExternalExadataInfrastructureCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ChangeExternalExadataInfrastructureCompartment.ts.html |here} to see how to use ChangeExternalExadataInfrastructureCompartment API.
     */
    changeExternalExadataInfrastructureCompartment(changeExternalExadataInfrastructureCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#changeExternalExadataInfrastructureCompartment.");
            const operationName = "changeExternalExadataInfrastructureCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataInfrastructure/ChangeExternalExadataInfrastructureCompartment";
            const pathParams = {
                "{externalExadataInfrastructureId}": changeExternalExadataInfrastructureCompartmentRequest.externalExadataInfrastructureId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeExternalExadataInfrastructureCompartmentRequest.opcRequestId,
                "opc-retry-token": changeExternalExadataInfrastructureCompartmentRequest.opcRetryToken,
                "if-match": changeExternalExadataInfrastructureCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeExternalExadataInfrastructureCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataInfrastructures/{externalExadataInfrastructureId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeExternalExadataInfrastructureCompartmentRequest.changeExternalExadataInfrastructureCompartmentDetails, "ChangeExternalExadataInfrastructureCompartmentDetails", model.ChangeExternalExadataInfrastructureCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a job.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeJobCompartmentRequest
     * @return ChangeJobCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ChangeJobCompartment.ts.html |here} to see how to use ChangeJobCompartment API.
     */
    changeJobCompartment(changeJobCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#changeJobCompartment.");
            const operationName = "changeJobCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Job/ChangeJobCompartment";
            const pathParams = {
                "{jobId}": changeJobCompartmentRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeJobCompartmentRequest.opcRequestId,
                "opc-retry-token": changeJobCompartmentRequest.opcRetryToken,
                "if-match": changeJobCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeJobCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeJobCompartmentRequest.changeJobCompartmentDetails, "ChangeJobCompartmentDetails", model.ChangeJobCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a Managed Database Group to a different compartment.
     * The destination compartment must not have a Managed Database Group
     * with the same name.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeManagedDatabaseGroupCompartmentRequest
     * @return ChangeManagedDatabaseGroupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ChangeManagedDatabaseGroupCompartment.ts.html |here} to see how to use ChangeManagedDatabaseGroupCompartment API.
     */
    changeManagedDatabaseGroupCompartment(changeManagedDatabaseGroupCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#changeManagedDatabaseGroupCompartment.");
            const operationName = "changeManagedDatabaseGroupCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabaseGroup/ChangeManagedDatabaseGroupCompartment";
            const pathParams = {
                "{managedDatabaseGroupId}": changeManagedDatabaseGroupCompartmentRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeManagedDatabaseGroupCompartmentRequest.opcRequestId,
                "opc-retry-token": changeManagedDatabaseGroupCompartmentRequest.opcRetryToken,
                "if-match": changeManagedDatabaseGroupCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeManagedDatabaseGroupCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeManagedDatabaseGroupCompartmentRequest.changeManagedDatabaseGroupCompartmentDetails, "ChangeManagedDatabaseGroupCompartmentDetails", model.ChangeManagedDatabaseGroupCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Checks the status of the external DB system component connection specified in this connector.
     * This operation will refresh the connectionStatus and timeConnectionStatusLastUpdated fields.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CheckExternalDbSystemConnectorConnectionStatusRequest
     * @return CheckExternalDbSystemConnectorConnectionStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CheckExternalDbSystemConnectorConnectionStatus.ts.html |here} to see how to use CheckExternalDbSystemConnectorConnectionStatus API.
     */
    checkExternalDbSystemConnectorConnectionStatus(checkExternalDbSystemConnectorConnectionStatusRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#checkExternalDbSystemConnectorConnectionStatus.");
            const operationName = "checkExternalDbSystemConnectorConnectionStatus";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemConnector/CheckExternalDbSystemConnectorConnectionStatus";
            const pathParams = {
                "{externalDbSystemConnectorId}": checkExternalDbSystemConnectorConnectionStatusRequest.externalDbSystemConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": checkExternalDbSystemConnectorConnectionStatusRequest.ifMatch,
                "opc-request-id": checkExternalDbSystemConnectorConnectionStatusRequest.opcRequestId,
                "opc-retry-token": checkExternalDbSystemConnectorConnectionStatusRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, checkExternalDbSystemConnectorConnectionStatusRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemConnectors/{externalDbSystemConnectorId}/actions/checkConnectionStatus",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystemConnector",
                    bodyModel: model.ExternalDbSystemConnector,
                    type: "model.ExternalDbSystemConnector",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Check the status of the Exadata storage server connection specified by exadataStorageConnectorId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CheckExternalExadataStorageConnectorRequest
     * @return CheckExternalExadataStorageConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CheckExternalExadataStorageConnector.ts.html |here} to see how to use CheckExternalExadataStorageConnector API.
     */
    checkExternalExadataStorageConnector(checkExternalExadataStorageConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#checkExternalExadataStorageConnector.");
            const operationName = "checkExternalExadataStorageConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageConnector/CheckExternalExadataStorageConnector";
            const pathParams = {
                "{externalExadataStorageConnectorId}": checkExternalExadataStorageConnectorRequest.externalExadataStorageConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": checkExternalExadataStorageConnectorRequest.ifMatch,
                "opc-request-id": checkExternalExadataStorageConnectorRequest.opcRequestId,
                "opc-retry-token": checkExternalExadataStorageConnectorRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, checkExternalExadataStorageConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageConnectors/{externalExadataStorageConnectorId}/actions/checkStatus",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataStorageConnectorStatus",
                    bodyModel: model.ExternalExadataStorageConnectorStatus,
                    type: "model.ExternalExadataStorageConnectorStatus",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Database Management private endpoint.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDbManagementPrivateEndpointRequest
     * @return CreateDbManagementPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CreateDbManagementPrivateEndpoint.ts.html |here} to see how to use CreateDbManagementPrivateEndpoint API.
     */
    createDbManagementPrivateEndpoint(createDbManagementPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createDbManagementPrivateEndpoint.");
            const operationName = "createDbManagementPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/DbManagementPrivateEndpoint/CreateDbManagementPrivateEndpoint";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDbManagementPrivateEndpointRequest.opcRetryToken,
                "opc-request-id": createDbManagementPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDbManagementPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbManagementPrivateEndpoints",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDbManagementPrivateEndpointRequest.createDbManagementPrivateEndpointDetails, "CreateDbManagementPrivateEndpointDetails", model.CreateDbManagementPrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dbManagementPrivateEndpoint",
                    bodyModel: model.DbManagementPrivateEndpoint,
                    type: "model.DbManagementPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an external DB system and its related resources.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateExternalDbSystemRequest
     * @return CreateExternalDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CreateExternalDbSystem.ts.html |here} to see how to use CreateExternalDbSystem API.
     */
    createExternalDbSystem(createExternalDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createExternalDbSystem.");
            const operationName = "createExternalDbSystem";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystem/CreateExternalDbSystem";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createExternalDbSystemRequest.opcRequestId,
                "opc-retry-token": createExternalDbSystemRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createExternalDbSystemRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystems",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createExternalDbSystemRequest.createExternalDbSystemDetails, "CreateExternalDbSystemDetails", model.CreateExternalDbSystemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystem",
                    bodyModel: model.ExternalDbSystem,
                    type: "model.ExternalDbSystem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new external connector.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateExternalDbSystemConnectorRequest
     * @return CreateExternalDbSystemConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CreateExternalDbSystemConnector.ts.html |here} to see how to use CreateExternalDbSystemConnector API.
     */
    createExternalDbSystemConnector(createExternalDbSystemConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createExternalDbSystemConnector.");
            const operationName = "createExternalDbSystemConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemConnector/CreateExternalDbSystemConnector";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createExternalDbSystemConnectorRequest.opcRequestId,
                "opc-retry-token": createExternalDbSystemConnectorRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createExternalDbSystemConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemConnectors",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createExternalDbSystemConnectorRequest.createExternalDbSystemConnectorDetails, "CreateExternalDbSystemConnectorDetails", model.CreateExternalDbSystemConnectorDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystemConnector",
                    bodyModel: model.ExternalDbSystemConnector,
                    type: "model.ExternalDbSystemConnector",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an external DB system discovery resource and initiates the discovery process.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateExternalDbSystemDiscoveryRequest
     * @return CreateExternalDbSystemDiscoveryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CreateExternalDbSystemDiscovery.ts.html |here} to see how to use CreateExternalDbSystemDiscovery API.
     */
    createExternalDbSystemDiscovery(createExternalDbSystemDiscoveryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createExternalDbSystemDiscovery.");
            const operationName = "createExternalDbSystemDiscovery";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemDiscovery/CreateExternalDbSystemDiscovery";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createExternalDbSystemDiscoveryRequest.opcRequestId,
                "opc-retry-token": createExternalDbSystemDiscoveryRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createExternalDbSystemDiscoveryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemDiscoveries",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createExternalDbSystemDiscoveryRequest.createExternalDbSystemDiscoveryDetails, "CreateExternalDbSystemDiscoveryDetails", model.CreateExternalDbSystemDiscoveryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystemDiscovery",
                    bodyModel: model.ExternalDbSystemDiscovery,
                    type: "model.ExternalDbSystemDiscovery",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an OCI resource for the Exadata infrastructure and enable monitoring service on the exadata infrastructure.
     * The following resource/subresources are created:
     *   Infrastructure
     *   Storage server connectors
     *   Storage servers
     *   Storage grids
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateExternalExadataInfrastructureRequest
     * @return CreateExternalExadataInfrastructureResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CreateExternalExadataInfrastructure.ts.html |here} to see how to use CreateExternalExadataInfrastructure API.
     */
    createExternalExadataInfrastructure(createExternalExadataInfrastructureRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createExternalExadataInfrastructure.");
            const operationName = "createExternalExadataInfrastructure";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataInfrastructure/CreateExternalExadataInfrastructure";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createExternalExadataInfrastructureRequest.opcRequestId,
                "opc-retry-token": createExternalExadataInfrastructureRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createExternalExadataInfrastructureRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataInfrastructures",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createExternalExadataInfrastructureRequest.createExternalExadataInfrastructureDetails, "CreateExternalExadataInfrastructureDetails", model.CreateExternalExadataInfrastructureDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataInfrastructure",
                    bodyModel: model.ExternalExadataInfrastructure,
                    type: "model.ExternalExadataInfrastructure",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create the storage server connector after validating the connection information.
     * Or only validates the connection information for creating the connection to the storage server.
     * The connector for one storage server is associated with the Exadata infrastructure discovery or existing Exadata infrastructure.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateExternalExadataStorageConnectorRequest
     * @return CreateExternalExadataStorageConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CreateExternalExadataStorageConnector.ts.html |here} to see how to use CreateExternalExadataStorageConnector API.
     */
    createExternalExadataStorageConnector(createExternalExadataStorageConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createExternalExadataStorageConnector.");
            const operationName = "createExternalExadataStorageConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageConnector/CreateExternalExadataStorageConnector";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createExternalExadataStorageConnectorRequest.opcRequestId,
                "opc-retry-token": createExternalExadataStorageConnectorRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createExternalExadataStorageConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageConnectors",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createExternalExadataStorageConnectorRequest.createExternalExadataStorageConnectorDetails, "CreateExternalExadataStorageConnectorDetails", model.CreateExternalExadataStorageConnectorDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataStorageConnector",
                    bodyModel: model.ExternalExadataStorageConnector,
                    type: "model.ExternalExadataStorageConnector",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a job to be executed on a Managed Database or Managed Database Group. Only one
     * of the parameters, managedDatabaseId or managedDatabaseGroupId should be provided as
     * input in CreateJobDetails resource in request body.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateJobRequest
     * @return CreateJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CreateJob.ts.html |here} to see how to use CreateJob API.
     */
    createJob(createJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createJob.");
            const operationName = "createJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Job/CreateJob";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createJobRequest.opcRequestId,
                "opc-retry-token": createJobRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createJobRequest.createJobDetails, "CreateJobDetails", model.CreateJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: model.Job,
                    type: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a Managed Database Group. The group does not contain any
     * Managed Databases when it is created, and they must be added later.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateManagedDatabaseGroupRequest
     * @return CreateManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CreateManagedDatabaseGroup.ts.html |here} to see how to use CreateManagedDatabaseGroup API.
     */
    createManagedDatabaseGroup(createManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createManagedDatabaseGroup.");
            const operationName = "createManagedDatabaseGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabaseGroup/CreateManagedDatabaseGroup";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createManagedDatabaseGroupRequest.opcRequestId,
                "opc-retry-token": createManagedDatabaseGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createManagedDatabaseGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createManagedDatabaseGroupRequest.createManagedDatabaseGroupDetails, "CreateManagedDatabaseGroupDetails", model.CreateManagedDatabaseGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabaseGroup",
                    bodyModel: model.ManagedDatabaseGroup,
                    type: "model.ManagedDatabaseGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a tablespace within the Managed Database specified by managedDatabaseId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateTablespaceRequest
     * @return CreateTablespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CreateTablespace.ts.html |here} to see how to use CreateTablespace API.
     */
    createTablespace(createTablespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createTablespace.");
            const operationName = "createTablespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Tablespace/CreateTablespace";
            const pathParams = {
                "{managedDatabaseId}": createTablespaceRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createTablespaceRequest.opcRequestId,
                "opc-retry-token": createTablespaceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createTablespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/tablespaces",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTablespaceRequest.createTablespaceDetails, "CreateTablespaceDetails", model.CreateTablespaceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tablespace",
                    bodyModel: model.Tablespace,
                    type: "model.Tablespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific Database Management private endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDbManagementPrivateEndpointRequest
     * @return DeleteDbManagementPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DeleteDbManagementPrivateEndpoint.ts.html |here} to see how to use DeleteDbManagementPrivateEndpoint API.
     */
    deleteDbManagementPrivateEndpoint(deleteDbManagementPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deleteDbManagementPrivateEndpoint.");
            const operationName = "deleteDbManagementPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/DbManagementPrivateEndpoint/DeleteDbManagementPrivateEndpoint";
            const pathParams = {
                "{dbManagementPrivateEndpointId}": deleteDbManagementPrivateEndpointRequest.dbManagementPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteDbManagementPrivateEndpointRequest.opcRequestId,
                "if-match": deleteDbManagementPrivateEndpointRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDbManagementPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbManagementPrivateEndpoints/{dbManagementPrivateEndpointId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the external DB system specified by `externalDbSystemId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteExternalDbSystemRequest
     * @return DeleteExternalDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DeleteExternalDbSystem.ts.html |here} to see how to use DeleteExternalDbSystem API.
     */
    deleteExternalDbSystem(deleteExternalDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deleteExternalDbSystem.");
            const operationName = "deleteExternalDbSystem";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystem/DeleteExternalDbSystem";
            const pathParams = {
                "{externalDbSystemId}": deleteExternalDbSystemRequest.externalDbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteExternalDbSystemRequest.opcRequestId,
                "if-match": deleteExternalDbSystemRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteExternalDbSystemRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystems/{externalDbSystemId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the external connector specified by `externalDbSystemConnectorId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteExternalDbSystemConnectorRequest
     * @return DeleteExternalDbSystemConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DeleteExternalDbSystemConnector.ts.html |here} to see how to use DeleteExternalDbSystemConnector API.
     */
    deleteExternalDbSystemConnector(deleteExternalDbSystemConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deleteExternalDbSystemConnector.");
            const operationName = "deleteExternalDbSystemConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemConnector/DeleteExternalDbSystemConnector";
            const pathParams = {
                "{externalDbSystemConnectorId}": deleteExternalDbSystemConnectorRequest.externalDbSystemConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteExternalDbSystemConnectorRequest.opcRequestId,
                "if-match": deleteExternalDbSystemConnectorRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteExternalDbSystemConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemConnectors/{externalDbSystemConnectorId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the external DB system discovery resource specified by `externalDbSystemDiscoveryId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteExternalDbSystemDiscoveryRequest
     * @return DeleteExternalDbSystemDiscoveryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DeleteExternalDbSystemDiscovery.ts.html |here} to see how to use DeleteExternalDbSystemDiscovery API.
     */
    deleteExternalDbSystemDiscovery(deleteExternalDbSystemDiscoveryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deleteExternalDbSystemDiscovery.");
            const operationName = "deleteExternalDbSystemDiscovery";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemDiscovery/DeleteExternalDbSystemDiscovery";
            const pathParams = {
                "{externalDbSystemDiscoveryId}": deleteExternalDbSystemDiscoveryRequest.externalDbSystemDiscoveryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteExternalDbSystemDiscoveryRequest.opcRequestId,
                "if-match": deleteExternalDbSystemDiscoveryRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteExternalDbSystemDiscoveryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemDiscoveries/{externalDbSystemDiscoveryId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the the Exadata infrastructure specified by externalExadataInfrastructureId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteExternalExadataInfrastructureRequest
     * @return DeleteExternalExadataInfrastructureResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DeleteExternalExadataInfrastructure.ts.html |here} to see how to use DeleteExternalExadataInfrastructure API.
     */
    deleteExternalExadataInfrastructure(deleteExternalExadataInfrastructureRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deleteExternalExadataInfrastructure.");
            const operationName = "deleteExternalExadataInfrastructure";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataInfrastructure/DeleteExternalExadataInfrastructure";
            const pathParams = {
                "{externalExadataInfrastructureId}": deleteExternalExadataInfrastructureRequest.externalExadataInfrastructureId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteExternalExadataInfrastructureRequest.opcRequestId,
                "if-match": deleteExternalExadataInfrastructureRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteExternalExadataInfrastructureRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataInfrastructures/{externalExadataInfrastructureId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the storage server connector specified by exadataStorageConnectorId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteExternalExadataStorageConnectorRequest
     * @return DeleteExternalExadataStorageConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DeleteExternalExadataStorageConnector.ts.html |here} to see how to use DeleteExternalExadataStorageConnector API.
     */
    deleteExternalExadataStorageConnector(deleteExternalExadataStorageConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deleteExternalExadataStorageConnector.");
            const operationName = "deleteExternalExadataStorageConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageConnector/DeleteExternalExadataStorageConnector";
            const pathParams = {
                "{externalExadataStorageConnectorId}": deleteExternalExadataStorageConnectorRequest.externalExadataStorageConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteExternalExadataStorageConnectorRequest.opcRequestId,
                "if-match": deleteExternalExadataStorageConnectorRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteExternalExadataStorageConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageConnectors/{externalExadataStorageConnectorId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the job specified by jobId.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteJobRequest
     * @return DeleteJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DeleteJob.ts.html |here} to see how to use DeleteJob API.
     */
    deleteJob(deleteJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deleteJob.");
            const operationName = "deleteJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Job/DeleteJob";
            const pathParams = {
                "{jobId}": deleteJobRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteJobRequest.ifMatch,
                "opc-request-id": deleteJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the Managed Database Group specified by managedDatabaseGroupId.
     * If the group contains Managed Databases, then it cannot be deleted.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteManagedDatabaseGroupRequest
     * @return DeleteManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DeleteManagedDatabaseGroup.ts.html |here} to see how to use DeleteManagedDatabaseGroup API.
     */
    deleteManagedDatabaseGroup(deleteManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deleteManagedDatabaseGroup.");
            const operationName = "deleteManagedDatabaseGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabaseGroup/DeleteManagedDatabaseGroup";
            const pathParams = {
                "{managedDatabaseGroupId}": deleteManagedDatabaseGroupRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteManagedDatabaseGroupRequest.ifMatch,
                "opc-request-id": deleteManagedDatabaseGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteManagedDatabaseGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the preferred credential based on the credentialName.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeletePreferredCredentialRequest
     * @return DeletePreferredCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DeletePreferredCredential.ts.html |here} to see how to use DeletePreferredCredential API.
     */
    deletePreferredCredential(deletePreferredCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deletePreferredCredential.");
            const operationName = "deletePreferredCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/PreferredCredential/DeletePreferredCredential";
            const pathParams = {
                "{managedDatabaseId}": deletePreferredCredentialRequest.managedDatabaseId,
                "{credentialName}": deletePreferredCredentialRequest.credentialName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deletePreferredCredentialRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deletePreferredCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/preferredCredentials/{credentialName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables Database Management service for all the components of the specified
     * external DB system (except databases).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisableExternalDbSystemDatabaseManagementRequest
     * @return DisableExternalDbSystemDatabaseManagementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DisableExternalDbSystemDatabaseManagement.ts.html |here} to see how to use DisableExternalDbSystemDatabaseManagement API.
     */
    disableExternalDbSystemDatabaseManagement(disableExternalDbSystemDatabaseManagementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#disableExternalDbSystemDatabaseManagement.");
            const operationName = "disableExternalDbSystemDatabaseManagement";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystem/DisableExternalDbSystemDatabaseManagement";
            const pathParams = {
                "{externalDbSystemId}": disableExternalDbSystemDatabaseManagementRequest.externalDbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": disableExternalDbSystemDatabaseManagementRequest.opcRequestId,
                "opc-retry-token": disableExternalDbSystemDatabaseManagementRequest.opcRetryToken,
                "if-match": disableExternalDbSystemDatabaseManagementRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableExternalDbSystemDatabaseManagementRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystems/{externalDbSystemId}/actions/disableDatabaseManagement",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables Database Management service for the Exadata infrastructure specified by externalExadataInfrastructureId.
     * It covers the following components
     *           Exadata infrastructure
     *           Exadata storage grid
     *           Exadata storage server
     * Database systems within the Exdata infrastructure will not be impacted and should be disabled explicitly if needed.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisableExternalExadataInfrastructureManagementRequest
     * @return DisableExternalExadataInfrastructureManagementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DisableExternalExadataInfrastructureManagement.ts.html |here} to see how to use DisableExternalExadataInfrastructureManagement API.
     */
    disableExternalExadataInfrastructureManagement(disableExternalExadataInfrastructureManagementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#disableExternalExadataInfrastructureManagement.");
            const operationName = "disableExternalExadataInfrastructureManagement";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataInfrastructure/DisableExternalExadataInfrastructureManagement";
            const pathParams = {
                "{externalExadataInfrastructureId}": disableExternalExadataInfrastructureManagementRequest.externalExadataInfrastructureId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": disableExternalExadataInfrastructureManagementRequest.opcRequestId,
                "opc-retry-token": disableExternalExadataInfrastructureManagementRequest.opcRetryToken,
                "if-match": disableExternalExadataInfrastructureManagementRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableExternalExadataInfrastructureManagementRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataInfrastructures/{externalExadataInfrastructureId}/actions/disableDatabaseManagement",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Completes the Exadata system prechecking on the following:
  * Verifies if the database systems are valid RAC database systems. Otherwise, return 400 status code with NON_RAC_DATABASE_SYSTEM error code.
  * Verifies if the ASM connectors defined for each database system.  Otherwise,  return 400 status code with CONNECTOR_NOT_DEFINED error code.
  * Verifies if the agents associated with ASM are valid and could be used for the storage servers. Otherwise, return 400 status code with INVALID_AGENT error code.
  * Verifies if it is an Exadata system. Otherwise, return 400 status code with INVALID_EXADATA_SYSTEM error code.
  * <p>
  Starts the discovery process for the Exadata system infrastructure.The following resources/components could be discovered
  *   storage servers from each database systems
  *   storage grid for all storage server
  *   exadata infrastructure
  * The same API covers both new discovery and re-discovery cases.
  *   For the new discovery case, new managed resources/sub-resources are created or override the existing one.
  *   For re-discovery case, the existing managed resources/sub-resources are checked to find out which ones should be added or which one should be
  *     removed based on the unique key defined for each resource/sub-resource.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DiscoverExternalExadataInfrastructureRequest
       * @return DiscoverExternalExadataInfrastructureResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DiscoverExternalExadataInfrastructure.ts.html |here} to see how to use DiscoverExternalExadataInfrastructure API.
       */
    discoverExternalExadataInfrastructure(discoverExternalExadataInfrastructureRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#discoverExternalExadataInfrastructure.");
            const operationName = "discoverExternalExadataInfrastructure";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataInfrastructure/DiscoverExternalExadataInfrastructure";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": discoverExternalExadataInfrastructureRequest.opcRequestId,
                "opc-retry-token": discoverExternalExadataInfrastructureRequest.opcRetryToken,
                "if-match": discoverExternalExadataInfrastructureRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, discoverExternalExadataInfrastructureRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataInfrastructures/actions/discoverExadataInfrastructure",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(discoverExternalExadataInfrastructureRequest.discoverExternalExadataInfrastructureDetails, "DiscoverExternalExadataInfrastructureDetails", model.DiscoverExternalExadataInfrastructureDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataInfrastructureDiscovery",
                    bodyModel: model.ExternalExadataInfrastructureDiscovery,
                    type: "model.ExternalExadataInfrastructureDiscovery",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Drops the tablespace specified by tablespaceName within the Managed Database specified by managedDatabaseId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DropTablespaceRequest
     * @return DropTablespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DropTablespace.ts.html |here} to see how to use DropTablespace API.
     */
    dropTablespace(dropTablespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#dropTablespace.");
            const operationName = "dropTablespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Tablespace/DropTablespace";
            const pathParams = {
                "{managedDatabaseId}": dropTablespaceRequest.managedDatabaseId,
                "{tablespaceName}": dropTablespaceRequest.tablespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": dropTablespaceRequest.opcRequestId,
                "opc-retry-token": dropTablespaceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, dropTablespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}/actions/dropTablespace",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(dropTablespaceRequest.dropTablespaceDetails, "DropTablespaceDetails", model.DropTablespaceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tablespaceAdminStatus",
                    bodyModel: model.TablespaceAdminStatus,
                    type: "model.TablespaceAdminStatus",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables Database Management service for all the components of the specified
     * external DB system (except databases).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableExternalDbSystemDatabaseManagementRequest
     * @return EnableExternalDbSystemDatabaseManagementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/EnableExternalDbSystemDatabaseManagement.ts.html |here} to see how to use EnableExternalDbSystemDatabaseManagement API.
     */
    enableExternalDbSystemDatabaseManagement(enableExternalDbSystemDatabaseManagementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#enableExternalDbSystemDatabaseManagement.");
            const operationName = "enableExternalDbSystemDatabaseManagement";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystem/EnableExternalDbSystemDatabaseManagement";
            const pathParams = {
                "{externalDbSystemId}": enableExternalDbSystemDatabaseManagementRequest.externalDbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": enableExternalDbSystemDatabaseManagementRequest.opcRequestId,
                "opc-retry-token": enableExternalDbSystemDatabaseManagementRequest.opcRetryToken,
                "if-match": enableExternalDbSystemDatabaseManagementRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableExternalDbSystemDatabaseManagementRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystems/{externalDbSystemId}/actions/enableDatabaseManagement",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableExternalDbSystemDatabaseManagementRequest.enableExternalDbSystemDatabaseManagementDetails, "EnableExternalDbSystemDatabaseManagementDetails", model.EnableExternalDbSystemDatabaseManagementDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables Database Management service for the exadata infrastructure specified by externalExadataInfrastructureId. It covers the following
     * components
     *   Exadata infrastructure
     *   Exadata storage grid
     *   Exadata storage server
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableExternalExadataInfrastructureManagementRequest
     * @return EnableExternalExadataInfrastructureManagementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/EnableExternalExadataInfrastructureManagement.ts.html |here} to see how to use EnableExternalExadataInfrastructureManagement API.
     */
    enableExternalExadataInfrastructureManagement(enableExternalExadataInfrastructureManagementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#enableExternalExadataInfrastructureManagement.");
            const operationName = "enableExternalExadataInfrastructureManagement";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataInfrastructure/EnableExternalExadataInfrastructureManagement";
            const pathParams = {
                "{externalExadataInfrastructureId}": enableExternalExadataInfrastructureManagementRequest.externalExadataInfrastructureId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": enableExternalExadataInfrastructureManagementRequest.opcRequestId,
                "opc-retry-token": enableExternalExadataInfrastructureManagementRequest.opcRetryToken,
                "if-match": enableExternalExadataInfrastructureManagementRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableExternalExadataInfrastructureManagementRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataInfrastructures/{externalExadataInfrastructureId}/actions/enableDatabaseManagement",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableExternalExadataInfrastructureManagementRequest.enableExternalExadataInfrastructureManagementDetails, "EnableExternalExadataInfrastructureManagementDetails", model.EnableExternalExadataInfrastructureManagementDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an AWR snapshot for the target database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GenerateAwrSnapshotRequest
     * @return GenerateAwrSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GenerateAwrSnapshot.ts.html |here} to see how to use GenerateAwrSnapshot API.
     */
    generateAwrSnapshot(generateAwrSnapshotRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#generateAwrSnapshot.");
            const operationName = "generateAwrSnapshot";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/SnapshotDetails/GenerateAwrSnapshot";
            const pathParams = {
                "{managedDatabaseId}": generateAwrSnapshotRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": generateAwrSnapshotRequest.opcRetryToken,
                "opc-request-id": generateAwrSnapshotRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateAwrSnapshotRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/actions/generateAwrSnapshot",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "snapshotDetails",
                    bodyModel: model.SnapshotDetails,
                    type: "model.SnapshotDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the AWR report for the specific database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAwrDbReportRequest
     * @return GetAwrDbReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetAwrDbReport.ts.html |here} to see how to use GetAwrDbReport API.
     */
    getAwrDbReport(getAwrDbReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getAwrDbReport.");
            const operationName = "getAwrDbReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/GetAwrDbReport";
            const pathParams = {
                "{managedDatabaseId}": getAwrDbReportRequest.managedDatabaseId,
                "{awrDbId}": getAwrDbReportRequest.awrDbId
            };
            const queryParams = {
                "instNums": getAwrDbReportRequest.instNums,
                "beginSnIdGreaterThanOrEqualTo": getAwrDbReportRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": getAwrDbReportRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": getAwrDbReportRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": getAwrDbReportRequest.timeLessThanOrEqualTo,
                "reportType": getAwrDbReportRequest.reportType,
                "containerId": getAwrDbReportRequest.containerId,
                "reportFormat": getAwrDbReportRequest.reportFormat
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAwrDbReportRequest.opcRequestId,
                "opc-retry-token": getAwrDbReportRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAwrDbReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbReport",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbReport",
                    bodyModel: model.AwrDbReport,
                    type: "model.AwrDbReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the SQL health check report for one SQL of the specific database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAwrDbSqlReportRequest
     * @return GetAwrDbSqlReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetAwrDbSqlReport.ts.html |here} to see how to use GetAwrDbSqlReport API.
     */
    getAwrDbSqlReport(getAwrDbSqlReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getAwrDbSqlReport.");
            const operationName = "getAwrDbSqlReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/GetAwrDbSqlReport";
            const pathParams = {
                "{managedDatabaseId}": getAwrDbSqlReportRequest.managedDatabaseId,
                "{awrDbId}": getAwrDbSqlReportRequest.awrDbId
            };
            const queryParams = {
                "instNum": getAwrDbSqlReportRequest.instNum,
                "beginSnIdGreaterThanOrEqualTo": getAwrDbSqlReportRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": getAwrDbSqlReportRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": getAwrDbSqlReportRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": getAwrDbSqlReportRequest.timeLessThanOrEqualTo,
                "sqlId": getAwrDbSqlReportRequest.sqlId,
                "reportFormat": getAwrDbSqlReportRequest.reportFormat,
                "containerId": getAwrDbSqlReportRequest.containerId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAwrDbSqlReportRequest.opcRequestId,
                "opc-retry-token": getAwrDbSqlReportRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAwrDbSqlReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbSqlReport",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbSqlReport",
                    bodyModel: model.AwrDbSqlReport,
                    type: "model.AwrDbSqlReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the metrics related to cluster cache for the Oracle
     * Real Application Clusters (Oracle RAC) database specified
     * by managedDatabaseId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetClusterCacheMetricRequest
     * @return GetClusterCacheMetricResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetClusterCacheMetric.ts.html |here} to see how to use GetClusterCacheMetric API.
     */
    getClusterCacheMetric(getClusterCacheMetricRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getClusterCacheMetric.");
            const operationName = "getClusterCacheMetric";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ClusterCacheMetric/GetClusterCacheMetric";
            const pathParams = {
                "{managedDatabaseId}": getClusterCacheMetricRequest.managedDatabaseId
            };
            const queryParams = {
                "startTime": getClusterCacheMetricRequest.startTime,
                "endTime": getClusterCacheMetricRequest.endTime
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getClusterCacheMetricRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getClusterCacheMetricRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/clusterCacheMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "clusterCacheMetric",
                    bodyModel: model.ClusterCacheMetric,
                    type: "model.ClusterCacheMetric",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the health metrics for a fleet of databases in a compartment or in a Managed Database Group.
     * Either the CompartmentId or the ManagedDatabaseGroupId query parameters must be provided to retrieve the health metrics.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDatabaseFleetHealthMetricsRequest
     * @return GetDatabaseFleetHealthMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetDatabaseFleetHealthMetrics.ts.html |here} to see how to use GetDatabaseFleetHealthMetrics API.
     */
    getDatabaseFleetHealthMetrics(getDatabaseFleetHealthMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getDatabaseFleetHealthMetrics.");
            const operationName = "getDatabaseFleetHealthMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/DatabaseFleetHealthMetrics/GetDatabaseFleetHealthMetrics";
            const pathParams = {};
            const queryParams = {
                "managedDatabaseGroupId": getDatabaseFleetHealthMetricsRequest.managedDatabaseGroupId,
                "compartmentId": getDatabaseFleetHealthMetricsRequest.compartmentId,
                "compareBaselineTime": getDatabaseFleetHealthMetricsRequest.compareBaselineTime,
                "compareTargetTime": getDatabaseFleetHealthMetricsRequest.compareTargetTime,
                "compareType": getDatabaseFleetHealthMetricsRequest.compareType,
                "filterByMetricNames": getDatabaseFleetHealthMetricsRequest.filterByMetricNames,
                "filterByDatabaseType": getDatabaseFleetHealthMetricsRequest.filterByDatabaseType,
                "filterByDatabaseSubType": getDatabaseFleetHealthMetricsRequest.filterByDatabaseSubType,
                "filterByDatabaseDeploymentType": getDatabaseFleetHealthMetricsRequest.filterByDatabaseDeploymentType,
                "filterByDatabaseVersion": getDatabaseFleetHealthMetricsRequest.filterByDatabaseVersion
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDatabaseFleetHealthMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDatabaseFleetHealthMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fleetMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseFleetHealthMetrics",
                    bodyModel: model.DatabaseFleetHealthMetrics,
                    type: "model.DatabaseFleetHealthMetrics",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a summary of the activity and resource usage metrics like DB Time, CPU, User I/O, Wait, Storage, and Memory for a Managed Database.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDatabaseHomeMetricsRequest
     * @return GetDatabaseHomeMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetDatabaseHomeMetrics.ts.html |here} to see how to use GetDatabaseHomeMetrics API.
     */
    getDatabaseHomeMetrics(getDatabaseHomeMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getDatabaseHomeMetrics.");
            const operationName = "getDatabaseHomeMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/DatabaseHomeMetrics/GetDatabaseHomeMetrics";
            const pathParams = {};
            const queryParams = {
                "managedDatabaseId": getDatabaseHomeMetricsRequest.managedDatabaseId,
                "startTime": getDatabaseHomeMetricsRequest.startTime,
                "endTime": getDatabaseHomeMetricsRequest.endTime
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDatabaseHomeMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDatabaseHomeMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseHomeMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseHomeMetrics",
                    bodyModel: model.DatabaseHomeMetrics,
                    type: "model.DatabaseHomeMetrics",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of a specific Database Management private endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDbManagementPrivateEndpointRequest
     * @return GetDbManagementPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetDbManagementPrivateEndpoint.ts.html |here} to see how to use GetDbManagementPrivateEndpoint API.
     */
    getDbManagementPrivateEndpoint(getDbManagementPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getDbManagementPrivateEndpoint.");
            const operationName = "getDbManagementPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/DbManagementPrivateEndpoint/GetDbManagementPrivateEndpoint";
            const pathParams = {
                "{dbManagementPrivateEndpointId}": getDbManagementPrivateEndpointRequest.dbManagementPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDbManagementPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDbManagementPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbManagementPrivateEndpoints/{dbManagementPrivateEndpointId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dbManagementPrivateEndpoint",
                    bodyModel: model.DbManagementPrivateEndpoint,
                    type: "model.DbManagementPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the external ASM specified by `externalAsmId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalAsmRequest
     * @return GetExternalAsmResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalAsm.ts.html |here} to see how to use GetExternalAsm API.
     */
    getExternalAsm(getExternalAsmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalAsm.");
            const operationName = "getExternalAsm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalAsm/GetExternalAsm";
            const pathParams = {
                "{externalAsmId}": getExternalAsmRequest.externalAsmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalAsmRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalAsmRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalAsms/{externalAsmId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalAsm",
                    bodyModel: model.ExternalAsm,
                    type: "model.ExternalAsm",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets configuration details including disk groups for the external ASM specified by `externalAsmId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalAsmConfigurationRequest
     * @return GetExternalAsmConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalAsmConfiguration.ts.html |here} to see how to use GetExternalAsmConfiguration API.
     */
    getExternalAsmConfiguration(getExternalAsmConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalAsmConfiguration.");
            const operationName = "getExternalAsmConfiguration";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalAsm/GetExternalAsmConfiguration";
            const pathParams = {
                "{externalAsmId}": getExternalAsmConfigurationRequest.externalAsmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalAsmConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalAsmConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalAsms/{externalAsmId}/configuration",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalAsmConfiguration",
                    bodyModel: model.ExternalAsmConfiguration,
                    type: "model.ExternalAsmConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the external ASM instance specified by `externalAsmInstanceId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalAsmInstanceRequest
     * @return GetExternalAsmInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalAsmInstance.ts.html |here} to see how to use GetExternalAsmInstance API.
     */
    getExternalAsmInstance(getExternalAsmInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalAsmInstance.");
            const operationName = "getExternalAsmInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalAsmInstance/GetExternalAsmInstance";
            const pathParams = {
                "{externalAsmInstanceId}": getExternalAsmInstanceRequest.externalAsmInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalAsmInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalAsmInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalAsmInstances/{externalAsmInstanceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalAsmInstance",
                    bodyModel: model.ExternalAsmInstance,
                    type: "model.ExternalAsmInstance",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the external cluster specified by `externalClusterId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalClusterRequest
     * @return GetExternalClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalCluster.ts.html |here} to see how to use GetExternalCluster API.
     */
    getExternalCluster(getExternalClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalCluster.");
            const operationName = "getExternalCluster";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalCluster/GetExternalCluster";
            const pathParams = {
                "{externalClusterId}": getExternalClusterRequest.externalClusterId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalClusterRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalClusterRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalClusters/{externalClusterId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalCluster",
                    bodyModel: model.ExternalCluster,
                    type: "model.ExternalCluster",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the external cluster instance specified by `externalClusterInstanceId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalClusterInstanceRequest
     * @return GetExternalClusterInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalClusterInstance.ts.html |here} to see how to use GetExternalClusterInstance API.
     */
    getExternalClusterInstance(getExternalClusterInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalClusterInstance.");
            const operationName = "getExternalClusterInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalClusterInstance/GetExternalClusterInstance";
            const pathParams = {
                "{externalClusterInstanceId}": getExternalClusterInstanceRequest.externalClusterInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalClusterInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalClusterInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalClusterInstances/{externalClusterInstanceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalClusterInstance",
                    bodyModel: model.ExternalClusterInstance,
                    type: "model.ExternalClusterInstance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the external DB home specified by `externalDbHomeId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalDbHomeRequest
     * @return GetExternalDbHomeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalDbHome.ts.html |here} to see how to use GetExternalDbHome API.
     */
    getExternalDbHome(getExternalDbHomeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalDbHome.");
            const operationName = "getExternalDbHome";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbHome/GetExternalDbHome";
            const pathParams = {
                "{externalDbHomeId}": getExternalDbHomeRequest.externalDbHomeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalDbHomeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalDbHomeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbHomes/{externalDbHomeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbHome",
                    bodyModel: model.ExternalDbHome,
                    type: "model.ExternalDbHome",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the external DB node specified by `externalDbNodeId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalDbNodeRequest
     * @return GetExternalDbNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalDbNode.ts.html |here} to see how to use GetExternalDbNode API.
     */
    getExternalDbNode(getExternalDbNodeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalDbNode.");
            const operationName = "getExternalDbNode";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbNode/GetExternalDbNode";
            const pathParams = {
                "{externalDbNodeId}": getExternalDbNodeRequest.externalDbNodeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalDbNodeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalDbNodeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbNodes/{externalDbNodeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbNode",
                    bodyModel: model.ExternalDbNode,
                    type: "model.ExternalDbNode",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the external DB system specified by `externalDbSystemId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalDbSystemRequest
     * @return GetExternalDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalDbSystem.ts.html |here} to see how to use GetExternalDbSystem API.
     */
    getExternalDbSystem(getExternalDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalDbSystem.");
            const operationName = "getExternalDbSystem";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystem/GetExternalDbSystem";
            const pathParams = {
                "{externalDbSystemId}": getExternalDbSystemRequest.externalDbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalDbSystemRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalDbSystemRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystems/{externalDbSystemId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystem",
                    bodyModel: model.ExternalDbSystem,
                    type: "model.ExternalDbSystem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the external connector specified by `externalDbSystemConnectorId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalDbSystemConnectorRequest
     * @return GetExternalDbSystemConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalDbSystemConnector.ts.html |here} to see how to use GetExternalDbSystemConnector API.
     */
    getExternalDbSystemConnector(getExternalDbSystemConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalDbSystemConnector.");
            const operationName = "getExternalDbSystemConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemConnector/GetExternalDbSystemConnector";
            const pathParams = {
                "{externalDbSystemConnectorId}": getExternalDbSystemConnectorRequest.externalDbSystemConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalDbSystemConnectorRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalDbSystemConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemConnectors/{externalDbSystemConnectorId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystemConnector",
                    bodyModel: model.ExternalDbSystemConnector,
                    type: "model.ExternalDbSystemConnector",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the external DB system discovery resource specified by `externalDbSystemDiscoveryId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalDbSystemDiscoveryRequest
     * @return GetExternalDbSystemDiscoveryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalDbSystemDiscovery.ts.html |here} to see how to use GetExternalDbSystemDiscovery API.
     */
    getExternalDbSystemDiscovery(getExternalDbSystemDiscoveryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalDbSystemDiscovery.");
            const operationName = "getExternalDbSystemDiscovery";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemDiscovery/GetExternalDbSystemDiscovery";
            const pathParams = {
                "{externalDbSystemDiscoveryId}": getExternalDbSystemDiscoveryRequest.externalDbSystemDiscoveryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalDbSystemDiscoveryRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalDbSystemDiscoveryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemDiscoveries/{externalDbSystemDiscoveryId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystemDiscovery",
                    bodyModel: model.ExternalDbSystemDiscovery,
                    type: "model.ExternalDbSystemDiscovery",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the the Exadata infrastructure specified by externalExadataInfrastructureId. It includes the database systems and storage grid within the
     * Exadata infrastructure.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalExadataInfrastructureRequest
     * @return GetExternalExadataInfrastructureResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalExadataInfrastructure.ts.html |here} to see how to use GetExternalExadataInfrastructure API.
     */
    getExternalExadataInfrastructure(getExternalExadataInfrastructureRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalExadataInfrastructure.");
            const operationName = "getExternalExadataInfrastructure";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataInfrastructure/GetExternalExadataInfrastructure";
            const pathParams = {
                "{externalExadataInfrastructureId}": getExternalExadataInfrastructureRequest.externalExadataInfrastructureId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalExadataInfrastructureRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalExadataInfrastructureRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataInfrastructures/{externalExadataInfrastructureId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataInfrastructure",
                    bodyModel: model.ExternalExadataInfrastructure,
                    type: "model.ExternalExadataInfrastructure",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the storage server connector specified by exadataStorageConnectorId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalExadataStorageConnectorRequest
     * @return GetExternalExadataStorageConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalExadataStorageConnector.ts.html |here} to see how to use GetExternalExadataStorageConnector API.
     */
    getExternalExadataStorageConnector(getExternalExadataStorageConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalExadataStorageConnector.");
            const operationName = "getExternalExadataStorageConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageConnector/GetExternalExadataStorageConnector";
            const pathParams = {
                "{externalExadataStorageConnectorId}": getExternalExadataStorageConnectorRequest.externalExadataStorageConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalExadataStorageConnectorRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalExadataStorageConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageConnectors/{externalExadataStorageConnectorId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataStorageConnector",
                    bodyModel: model.ExternalExadataStorageConnector,
                    type: "model.ExternalExadataStorageConnector",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the storage server grid specified by exadataStorageGridId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalExadataStorageGridRequest
     * @return GetExternalExadataStorageGridResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalExadataStorageGrid.ts.html |here} to see how to use GetExternalExadataStorageGrid API.
     */
    getExternalExadataStorageGrid(getExternalExadataStorageGridRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalExadataStorageGrid.");
            const operationName = "getExternalExadataStorageGrid";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageGrid/GetExternalExadataStorageGrid";
            const pathParams = {
                "{externalExadataStorageGridId}": getExternalExadataStorageGridRequest.externalExadataStorageGridId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalExadataStorageGridRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalExadataStorageGridRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageGrids/{externalExadataStorageGridId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataStorageGrid",
                    bodyModel: model.ExternalExadataStorageGrid,
                    type: "model.ExternalExadataStorageGrid",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the summary for the storage server specified by exadataStorageServerId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalExadataStorageServerRequest
     * @return GetExternalExadataStorageServerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalExadataStorageServer.ts.html |here} to see how to use GetExternalExadataStorageServer API.
     */
    getExternalExadataStorageServer(getExternalExadataStorageServerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalExadataStorageServer.");
            const operationName = "getExternalExadataStorageServer";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageServer/GetExternalExadataStorageServer";
            const pathParams = {
                "{externalExadataStorageServerId}": getExternalExadataStorageServerRequest.externalExadataStorageServerId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalExadataStorageServerRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalExadataStorageServerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageServers/{externalExadataStorageServerId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataStorageServer",
                    bodyModel: model.ExternalExadataStorageServer,
                    type: "model.ExternalExadataStorageServer",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the external listener specified by `externalListenerId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExternalListenerRequest
     * @return GetExternalListenerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExternalListener.ts.html |here} to see how to use GetExternalListener API.
     */
    getExternalListener(getExternalListenerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getExternalListener.");
            const operationName = "getExternalListener";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalListener/GetExternalListener";
            const pathParams = {
                "{externalListenerId}": getExternalListenerRequest.externalListenerId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExternalListenerRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExternalListenerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalListeners/{externalListenerId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalListener",
                    bodyModel: model.ExternalListener,
                    type: "model.ExternalListener",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the IORM plan from the specific exadata storage server.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetIormPlanRequest
     * @return GetIormPlanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetIormPlan.ts.html |here} to see how to use GetIormPlan API.
     */
    getIormPlan(getIormPlanRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getIormPlan.");
            const operationName = "getIormPlan";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageServer/GetIormPlan";
            const pathParams = {
                "{externalExadataStorageServerId}": getIormPlanRequest.externalExadataStorageServerId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getIormPlanRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getIormPlanRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageServers/{externalExadataStorageServerId}/iormPlan",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iormPlan",
                    bodyModel: model.IormPlan,
                    type: "model.IormPlan",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the job specified by jobId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetJobRequest
     * @return GetJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetJob.ts.html |here} to see how to use GetJob API.
     */
    getJob(getJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getJob.");
            const operationName = "getJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Job/GetJob";
            const pathParams = {
                "{jobId}": getJobRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: model.Job,
                    type: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the job execution specified by jobExecutionId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetJobExecutionRequest
     * @return GetJobExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetJobExecution.ts.html |here} to see how to use GetJobExecution API.
     */
    getJobExecution(getJobExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getJobExecution.");
            const operationName = "getJobExecution";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/JobExecution/GetJobExecution";
            const pathParams = {
                "{jobExecutionId}": getJobExecutionRequest.jobExecutionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobExecutionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobExecutionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobExecutions/{jobExecutionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobExecution",
                    bodyModel: model.JobExecution,
                    type: "model.JobExecution",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the job run specified by jobRunId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetJobRunRequest
     * @return GetJobRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetJobRun.ts.html |here} to see how to use GetJobRun API.
     */
    getJobRun(getJobRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getJobRun.");
            const operationName = "getJobRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/JobRun/GetJobRun";
            const pathParams = {
                "{jobRunId}": getJobRunRequest.jobRunId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobRunRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns/{jobRunId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobRun",
                    bodyModel: model.JobRun,
                    type: "model.JobRun",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the Managed Database specified by managedDatabaseId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagedDatabaseRequest
     * @return GetManagedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetManagedDatabase.ts.html |here} to see how to use GetManagedDatabase API.
     */
    getManagedDatabase(getManagedDatabaseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getManagedDatabase.");
            const operationName = "getManagedDatabase";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/GetManagedDatabase";
            const pathParams = {
                "{managedDatabaseId}": getManagedDatabaseRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedDatabaseRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagedDatabaseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabase",
                    bodyModel: model.ManagedDatabase,
                    type: "model.ManagedDatabase",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the Managed Database Group specified by managedDatabaseGroupId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagedDatabaseGroupRequest
     * @return GetManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetManagedDatabaseGroup.ts.html |here} to see how to use GetManagedDatabaseGroup API.
     */
    getManagedDatabaseGroup(getManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getManagedDatabaseGroup.");
            const operationName = "getManagedDatabaseGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabaseGroup/GetManagedDatabaseGroup";
            const pathParams = {
                "{managedDatabaseGroupId}": getManagedDatabaseGroupRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedDatabaseGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagedDatabaseGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabaseGroup",
                    bodyModel: model.ManagedDatabaseGroup,
                    type: "model.ManagedDatabaseGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get open alerts from storage server.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOpenAlertHistoryRequest
     * @return GetOpenAlertHistoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetOpenAlertHistory.ts.html |here} to see how to use GetOpenAlertHistory API.
     */
    getOpenAlertHistory(getOpenAlertHistoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getOpenAlertHistory.");
            const operationName = "getOpenAlertHistory";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageServer/GetOpenAlertHistory";
            const pathParams = {
                "{externalExadataStorageServerId}": getOpenAlertHistoryRequest.externalExadataStorageServerId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOpenAlertHistoryRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOpenAlertHistoryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageServers/{externalExadataStorageServerId}/openAlertHistory",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "openAlertHistory",
                    bodyModel: model.OpenAlertHistory,
                    type: "model.OpenAlertHistory",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a comprehensive report of the Optimizer Statistics Advisor execution, which includes details of the
     * Managed Database, findings, recommendations, rationale, and examples.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetOptimizerStatisticsAdvisorExecutionRequest
     * @return GetOptimizerStatisticsAdvisorExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetOptimizerStatisticsAdvisorExecution.ts.html |here} to see how to use GetOptimizerStatisticsAdvisorExecution API.
     */
    getOptimizerStatisticsAdvisorExecution(getOptimizerStatisticsAdvisorExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getOptimizerStatisticsAdvisorExecution.");
            const operationName = "getOptimizerStatisticsAdvisorExecution";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/GetOptimizerStatisticsAdvisorExecution";
            const pathParams = {
                "{managedDatabaseId}": getOptimizerStatisticsAdvisorExecutionRequest.managedDatabaseId,
                "{executionName}": getOptimizerStatisticsAdvisorExecutionRequest.executionName
            };
            const queryParams = {
                "taskName": getOptimizerStatisticsAdvisorExecutionRequest.taskName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOptimizerStatisticsAdvisorExecutionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOptimizerStatisticsAdvisorExecutionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/optimizerStatisticsAdvisorExecutions/{executionName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "optimizerStatisticsAdvisorExecution",
                    bodyModel: model.OptimizerStatisticsAdvisorExecution,
                    type: "model.OptimizerStatisticsAdvisorExecution",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Oracle system-generated script for the specified Optimizer Statistics Advisor execution.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetOptimizerStatisticsAdvisorExecutionScriptRequest
     * @return GetOptimizerStatisticsAdvisorExecutionScriptResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetOptimizerStatisticsAdvisorExecutionScript.ts.html |here} to see how to use GetOptimizerStatisticsAdvisorExecutionScript API.
     */
    getOptimizerStatisticsAdvisorExecutionScript(getOptimizerStatisticsAdvisorExecutionScriptRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getOptimizerStatisticsAdvisorExecutionScript.");
            const operationName = "getOptimizerStatisticsAdvisorExecutionScript";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/GetOptimizerStatisticsAdvisorExecutionScript";
            const pathParams = {
                "{managedDatabaseId}": getOptimizerStatisticsAdvisorExecutionScriptRequest.managedDatabaseId,
                "{executionName}": getOptimizerStatisticsAdvisorExecutionScriptRequest.executionName
            };
            const queryParams = {
                "taskName": getOptimizerStatisticsAdvisorExecutionScriptRequest.taskName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOptimizerStatisticsAdvisorExecutionScriptRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOptimizerStatisticsAdvisorExecutionScriptRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/optimizerStatisticsAdvisorExecutions/{executionName}/script",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "optimizerStatisticsAdvisorExecutionScript",
                    bodyModel: model.OptimizerStatisticsAdvisorExecutionScript,
                    type: "model.OptimizerStatisticsAdvisorExecutionScript",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a detailed report of the Optimizer Statistics Collection operation for the specified Managed Database.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetOptimizerStatisticsCollectionOperationRequest
     * @return GetOptimizerStatisticsCollectionOperationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetOptimizerStatisticsCollectionOperation.ts.html |here} to see how to use GetOptimizerStatisticsCollectionOperation API.
     */
    getOptimizerStatisticsCollectionOperation(getOptimizerStatisticsCollectionOperationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getOptimizerStatisticsCollectionOperation.");
            const operationName = "getOptimizerStatisticsCollectionOperation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/GetOptimizerStatisticsCollectionOperation";
            const pathParams = {
                "{managedDatabaseId}": getOptimizerStatisticsCollectionOperationRequest.managedDatabaseId,
                "{optimizerStatisticsCollectionOperationId}": getOptimizerStatisticsCollectionOperationRequest.optimizerStatisticsCollectionOperationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOptimizerStatisticsCollectionOperationRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOptimizerStatisticsCollectionOperationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/optimizerStatisticsCollectionOperations/{optimizerStatisticsCollectionOperationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "optimizerStatisticsCollectionOperation",
                    bodyModel: model.OptimizerStatisticsCollectionOperation,
                    type: "model.OptimizerStatisticsCollectionOperation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a summary of the resource usage metrics such as CPU, User I/O, and Storage for each
     * PDB within a specific CDB. If comparmentId is specified, then the metrics for
     * each PDB (within the CDB) in the specified compartment are retrieved.
     * If compartmentId is not specified, then the metrics for all the PDBs within the CDB are retrieved.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetPdbMetricsRequest
     * @return GetPdbMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetPdbMetrics.ts.html |here} to see how to use GetPdbMetrics API.
     */
    getPdbMetrics(getPdbMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getPdbMetrics.");
            const operationName = "getPdbMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/PdbMetrics/GetPdbMetrics";
            const pathParams = {
                "{managedDatabaseId}": getPdbMetricsRequest.managedDatabaseId
            };
            const queryParams = {
                "startTime": getPdbMetricsRequest.startTime,
                "endTime": getPdbMetricsRequest.endTime,
                "compartmentId": getPdbMetricsRequest.compartmentId,
                "compareType": getPdbMetricsRequest.compareType,
                "filterByMetricNames": getPdbMetricsRequest.filterByMetricNames
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getPdbMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getPdbMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/pdbMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pdbMetrics",
                    bodyModel: model.PdbMetrics,
                    type: "model.PdbMetrics",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the preferred credential details for a Managed Database based on credentialName.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetPreferredCredentialRequest
     * @return GetPreferredCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetPreferredCredential.ts.html |here} to see how to use GetPreferredCredential API.
     */
    getPreferredCredential(getPreferredCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getPreferredCredential.");
            const operationName = "getPreferredCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/PreferredCredential/GetPreferredCredential";
            const pathParams = {
                "{managedDatabaseId}": getPreferredCredentialRequest.managedDatabaseId,
                "{credentialName}": getPreferredCredentialRequest.credentialName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getPreferredCredentialRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getPreferredCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/preferredCredentials/{credentialName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "preferredCredential",
                    bodyModel: model.PreferredCredential,
                    type: "model.PreferredCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the tablespace specified by tablespaceName within the Managed Database specified by managedDatabaseId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTablespaceRequest
     * @return GetTablespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetTablespace.ts.html |here} to see how to use GetTablespace API.
     */
    getTablespace(getTablespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getTablespace.");
            const operationName = "getTablespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Tablespace/GetTablespace";
            const pathParams = {
                "{managedDatabaseId}": getTablespaceRequest.managedDatabaseId,
                "{tablespaceName}": getTablespaceRequest.tablespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTablespaceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTablespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tablespace",
                    bodyModel: model.Tablespace,
                    type: "model.Tablespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get SQL ID with top cpu activity from storage server.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTopSqlCpuActivityRequest
     * @return GetTopSqlCpuActivityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetTopSqlCpuActivity.ts.html |here} to see how to use GetTopSqlCpuActivity API.
     */
    getTopSqlCpuActivity(getTopSqlCpuActivityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getTopSqlCpuActivity.");
            const operationName = "getTopSqlCpuActivity";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageServer/GetTopSqlCpuActivity";
            const pathParams = {
                "{externalExadataStorageServerId}": getTopSqlCpuActivityRequest.externalExadataStorageServerId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTopSqlCpuActivityRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTopSqlCpuActivityRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageServers/{externalExadataStorageServerId}/topSqlCpuActivity",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "topSqlCpuActivity",
                    bodyModel: model.TopSqlCpuActivity,
                    type: "model.TopSqlCpuActivity",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the user specified by managedDatabaseId and userName.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetUserRequest
     * @return GetUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetUser.ts.html |here} to see how to use GetUser API.
     */
    getUser(getUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getUser.");
            const operationName = "getUser";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/GetUser";
            const pathParams = {
                "{managedDatabaseId}": getUserRequest.managedDatabaseId,
                "{userName}": getUserRequest.userName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getUserRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/users/{userName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "user",
                    bodyModel: model.User,
                    type: "model.User",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request with the given Work Request ID
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Asynchronously implements the findings and recommendations of the Optimizer Statistics Advisor execution.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ImplementOptimizerStatisticsAdvisorRecommendationsRequest
     * @return ImplementOptimizerStatisticsAdvisorRecommendationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ImplementOptimizerStatisticsAdvisorRecommendations.ts.html |here} to see how to use ImplementOptimizerStatisticsAdvisorRecommendations API.
     */
    implementOptimizerStatisticsAdvisorRecommendations(implementOptimizerStatisticsAdvisorRecommendationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#implementOptimizerStatisticsAdvisorRecommendations.");
            const operationName = "implementOptimizerStatisticsAdvisorRecommendations";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ImplementOptimizerStatisticsAdvisorRecommendations";
            const pathParams = {
                "{managedDatabaseId}": implementOptimizerStatisticsAdvisorRecommendationsRequest.managedDatabaseId,
                "{executionName}": implementOptimizerStatisticsAdvisorRecommendationsRequest.executionName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": implementOptimizerStatisticsAdvisorRecommendationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, implementOptimizerStatisticsAdvisorRecommendationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/optimizerStatisticsAdvisorExecutions/{executionName}/actions/implementRecommendations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(implementOptimizerStatisticsAdvisorRecommendationsRequest.implementOptimizerStatisticsAdvisorRecommendationsDetails, "ImplementOptimizerStatisticsAdvisorRecommendationsDetails", model.ImplementOptimizerStatisticsAdvisorRecommendationsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: model.Job,
                    type: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of ASM properties for the specified managedDatabaseId.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAsmPropertiesRequest
     * @return ListAsmPropertiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListAsmProperties.ts.html |here} to see how to use ListAsmProperties API.
     */
    listAsmProperties(listAsmPropertiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listAsmProperties.");
            const operationName = "listAsmProperties";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListAsmProperties";
            const pathParams = {
                "{managedDatabaseId}": listAsmPropertiesRequest.managedDatabaseId
            };
            const queryParams = {
                "name": listAsmPropertiesRequest.name,
                "sortBy": listAsmPropertiesRequest.sortBy,
                "sortOrder": listAsmPropertiesRequest.sortOrder,
                "page": listAsmPropertiesRequest.page,
                "limit": listAsmPropertiesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAsmPropertiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAsmPropertiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/asmProperties",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "asmPropertyCollection",
                    bodyModel: model.AsmPropertyCollection,
                    type: "model.AsmPropertyCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of databases using a specific Database Management private endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAssociatedDatabasesRequest
     * @return ListAssociatedDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListAssociatedDatabases.ts.html |here} to see how to use ListAssociatedDatabases API.
     */
    listAssociatedDatabases(listAssociatedDatabasesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listAssociatedDatabases.");
            const operationName = "listAssociatedDatabases";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/AssociatedDatabaseSummary/ListAssociatedDatabases";
            const pathParams = {
                "{dbManagementPrivateEndpointId}": listAssociatedDatabasesRequest.dbManagementPrivateEndpointId
            };
            const queryParams = {
                "compartmentId": listAssociatedDatabasesRequest.compartmentId,
                "limit": listAssociatedDatabasesRequest.limit,
                "page": listAssociatedDatabasesRequest.page,
                "sortOrder": listAssociatedDatabasesRequest.sortOrder,
                "sortBy": listAssociatedDatabasesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAssociatedDatabasesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAssociatedDatabasesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbManagementPrivateEndpoints/{dbManagementPrivateEndpointId}/associatedDatabases",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "associatedDatabaseCollection",
                    bodyModel: model.AssociatedDatabaseCollection,
                    type: "model.AssociatedDatabaseCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists AWR snapshots for the specified database in the AWR.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAwrDbSnapshotsRequest
     * @return ListAwrDbSnapshotsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListAwrDbSnapshots.ts.html |here} to see how to use ListAwrDbSnapshots API.
     */
    listAwrDbSnapshots(listAwrDbSnapshotsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listAwrDbSnapshots.");
            const operationName = "listAwrDbSnapshots";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListAwrDbSnapshots";
            const pathParams = {
                "{managedDatabaseId}": listAwrDbSnapshotsRequest.managedDatabaseId,
                "{awrDbId}": listAwrDbSnapshotsRequest.awrDbId
            };
            const queryParams = {
                "instNum": listAwrDbSnapshotsRequest.instNum,
                "beginSnIdGreaterThanOrEqualTo": listAwrDbSnapshotsRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": listAwrDbSnapshotsRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": listAwrDbSnapshotsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": listAwrDbSnapshotsRequest.timeLessThanOrEqualTo,
                "containerId": listAwrDbSnapshotsRequest.containerId,
                "page": listAwrDbSnapshotsRequest.page,
                "limit": listAwrDbSnapshotsRequest.limit,
                "sortBy": listAwrDbSnapshotsRequest.sortBy,
                "sortOrder": listAwrDbSnapshotsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAwrDbSnapshotsRequest.opcRequestId,
                "opc-retry-token": listAwrDbSnapshotsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAwrDbSnapshotsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbSnapshots",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbSnapshotCollection",
                    bodyModel: model.AwrDbSnapshotCollection,
                    type: "model.AwrDbSnapshotCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of databases and their snapshot summary details available in the AWR of the specified Managed Database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAwrDbsRequest
     * @return ListAwrDbsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListAwrDbs.ts.html |here} to see how to use ListAwrDbs API.
     */
    listAwrDbs(listAwrDbsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listAwrDbs.");
            const operationName = "listAwrDbs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListAwrDbs";
            const pathParams = {
                "{managedDatabaseId}": listAwrDbsRequest.managedDatabaseId
            };
            const queryParams = {
                "name": listAwrDbsRequest.name,
                "timeGreaterThanOrEqualTo": listAwrDbsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": listAwrDbsRequest.timeLessThanOrEqualTo,
                "page": listAwrDbsRequest.page,
                "limit": listAwrDbsRequest.limit,
                "sortBy": listAwrDbsRequest.sortBy,
                "sortOrder": listAwrDbsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAwrDbsRequest.opcRequestId,
                "opc-retry-token": listAwrDbsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAwrDbsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbCollection",
                    bodyModel: model.AwrDbCollection,
                    type: "model.AwrDbCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of consumer group privileges granted to a specific user.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListConsumerGroupPrivilegesRequest
     * @return ListConsumerGroupPrivilegesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListConsumerGroupPrivileges.ts.html |here} to see how to use ListConsumerGroupPrivileges API.
     */
    listConsumerGroupPrivileges(listConsumerGroupPrivilegesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listConsumerGroupPrivileges.");
            const operationName = "listConsumerGroupPrivileges";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListConsumerGroupPrivileges";
            const pathParams = {
                "{managedDatabaseId}": listConsumerGroupPrivilegesRequest.managedDatabaseId,
                "{userName}": listConsumerGroupPrivilegesRequest.userName
            };
            const queryParams = {
                "name": listConsumerGroupPrivilegesRequest.name,
                "sortBy": listConsumerGroupPrivilegesRequest.sortBy,
                "sortOrder": listConsumerGroupPrivilegesRequest.sortOrder,
                "limit": listConsumerGroupPrivilegesRequest.limit,
                "page": listConsumerGroupPrivilegesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listConsumerGroupPrivilegesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listConsumerGroupPrivilegesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/users/{userName}/consumerGroupPrivileges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "consumerGroupPrivilegeCollection",
                    bodyModel: model.ConsumerGroupPrivilegeCollection,
                    type: "model.ConsumerGroupPrivilegeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of containers for a specific user. This is only applicable if ALL_CONTAINERS !='Y'.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDataAccessContainersRequest
     * @return ListDataAccessContainersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListDataAccessContainers.ts.html |here} to see how to use ListDataAccessContainers API.
     */
    listDataAccessContainers(listDataAccessContainersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listDataAccessContainers.");
            const operationName = "listDataAccessContainers";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListDataAccessContainers";
            const pathParams = {
                "{managedDatabaseId}": listDataAccessContainersRequest.managedDatabaseId,
                "{userName}": listDataAccessContainersRequest.userName
            };
            const queryParams = {
                "name": listDataAccessContainersRequest.name,
                "sortBy": listDataAccessContainersRequest.sortBy,
                "sortOrder": listDataAccessContainersRequest.sortOrder,
                "limit": listDataAccessContainersRequest.limit,
                "page": listDataAccessContainersRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDataAccessContainersRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDataAccessContainersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/users/{userName}/dataAccessContainers",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataAccessContainerCollection",
                    bodyModel: model.DataAccessContainerCollection,
                    type: "model.DataAccessContainerCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of database parameters for the specified Managed Database. The parameters are listed in alphabetical order, along with their current values.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDatabaseParametersRequest
     * @return ListDatabaseParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListDatabaseParameters.ts.html |here} to see how to use ListDatabaseParameters API.
     */
    listDatabaseParameters(listDatabaseParametersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listDatabaseParameters.");
            const operationName = "listDatabaseParameters";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListDatabaseParameters";
            const pathParams = {
                "{managedDatabaseId}": listDatabaseParametersRequest.managedDatabaseId
            };
            const queryParams = {
                "source": listDatabaseParametersRequest.source,
                "name": listDatabaseParametersRequest.name,
                "isAllowedValuesIncluded": listDatabaseParametersRequest.isAllowedValuesIncluded,
                "sortBy": listDatabaseParametersRequest.sortBy,
                "sortOrder": listDatabaseParametersRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDatabaseParametersRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDatabaseParametersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/databaseParameters",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseParametersCollection",
                    bodyModel: model.DatabaseParametersCollection,
                    type: "model.DatabaseParametersCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of Database Management private endpoints.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDbManagementPrivateEndpointsRequest
     * @return ListDbManagementPrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListDbManagementPrivateEndpoints.ts.html |here} to see how to use ListDbManagementPrivateEndpoints API.
     */
    listDbManagementPrivateEndpoints(listDbManagementPrivateEndpointsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listDbManagementPrivateEndpoints.");
            const operationName = "listDbManagementPrivateEndpoints";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/DbManagementPrivateEndpoint/ListDbManagementPrivateEndpoints";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDbManagementPrivateEndpointsRequest.compartmentId,
                "name": listDbManagementPrivateEndpointsRequest.name,
                "vcnId": listDbManagementPrivateEndpointsRequest.vcnId,
                "isCluster": listDbManagementPrivateEndpointsRequest.isCluster,
                "lifecycleState": listDbManagementPrivateEndpointsRequest.lifecycleState,
                "limit": listDbManagementPrivateEndpointsRequest.limit,
                "page": listDbManagementPrivateEndpointsRequest.page,
                "sortOrder": listDbManagementPrivateEndpointsRequest.sortOrder,
                "sortBy": listDbManagementPrivateEndpointsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDbManagementPrivateEndpointsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDbManagementPrivateEndpointsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbManagementPrivateEndpoints",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dbManagementPrivateEndpointCollection",
                    bodyModel: model.DbManagementPrivateEndpointCollection,
                    type: "model.DbManagementPrivateEndpointCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists ASM disk groups for the external ASM specified by `externalAsmId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalAsmDiskGroupsRequest
     * @return ListExternalAsmDiskGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalAsmDiskGroups.ts.html |here} to see how to use ListExternalAsmDiskGroups API.
     */
    listExternalAsmDiskGroups(listExternalAsmDiskGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalAsmDiskGroups.");
            const operationName = "listExternalAsmDiskGroups";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalAsm/ListExternalAsmDiskGroups";
            const pathParams = {
                "{externalAsmId}": listExternalAsmDiskGroupsRequest.externalAsmId
            };
            const queryParams = {
                "page": listExternalAsmDiskGroupsRequest.page,
                "limit": listExternalAsmDiskGroupsRequest.limit,
                "sortBy": listExternalAsmDiskGroupsRequest.sortBy,
                "sortOrder": listExternalAsmDiskGroupsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalAsmDiskGroupsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalAsmDiskGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalAsms/{externalAsmId}/diskGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalAsmDiskGroupCollection",
                    bodyModel: model.ExternalAsmDiskGroupCollection,
                    type: "model.ExternalAsmDiskGroupCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the ASM instances in the specified external ASM.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalAsmInstancesRequest
     * @return ListExternalAsmInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalAsmInstances.ts.html |here} to see how to use ListExternalAsmInstances API.
     */
    listExternalAsmInstances(listExternalAsmInstancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalAsmInstances.");
            const operationName = "listExternalAsmInstances";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalAsmInstance/ListExternalAsmInstances";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalAsmInstancesRequest.compartmentId,
                "externalAsmId": listExternalAsmInstancesRequest.externalAsmId,
                "displayName": listExternalAsmInstancesRequest.displayName,
                "page": listExternalAsmInstancesRequest.page,
                "limit": listExternalAsmInstancesRequest.limit,
                "sortBy": listExternalAsmInstancesRequest.sortBy,
                "sortOrder": listExternalAsmInstancesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalAsmInstancesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalAsmInstancesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalAsmInstances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalAsmInstanceCollection",
                    bodyModel: model.ExternalAsmInstanceCollection,
                    type: "model.ExternalAsmInstanceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists ASM users for the external ASM specified by `externalAsmId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalAsmUsersRequest
     * @return ListExternalAsmUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalAsmUsers.ts.html |here} to see how to use ListExternalAsmUsers API.
     */
    listExternalAsmUsers(listExternalAsmUsersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalAsmUsers.");
            const operationName = "listExternalAsmUsers";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalAsm/ListExternalAsmUsers";
            const pathParams = {
                "{externalAsmId}": listExternalAsmUsersRequest.externalAsmId
            };
            const queryParams = {
                "page": listExternalAsmUsersRequest.page,
                "limit": listExternalAsmUsersRequest.limit,
                "sortBy": listExternalAsmUsersRequest.sortBy,
                "sortOrder": listExternalAsmUsersRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalAsmUsersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalAsmUsersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalAsms/{externalAsmId}/users",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalAsmUserCollection",
                    bodyModel: model.ExternalAsmUserCollection,
                    type: "model.ExternalAsmUserCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the ASMs in the specified external DB system.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalAsmsRequest
     * @return ListExternalAsmsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalAsms.ts.html |here} to see how to use ListExternalAsms API.
     */
    listExternalAsms(listExternalAsmsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalAsms.");
            const operationName = "listExternalAsms";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalAsm/ListExternalAsms";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalAsmsRequest.compartmentId,
                "externalDbSystemId": listExternalAsmsRequest.externalDbSystemId,
                "displayName": listExternalAsmsRequest.displayName,
                "page": listExternalAsmsRequest.page,
                "limit": listExternalAsmsRequest.limit,
                "sortBy": listExternalAsmsRequest.sortBy,
                "sortOrder": listExternalAsmsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalAsmsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalAsmsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalAsms",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalAsmCollection",
                    bodyModel: model.ExternalAsmCollection,
                    type: "model.ExternalAsmCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the cluster instances in the specified external cluster.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalClusterInstancesRequest
     * @return ListExternalClusterInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalClusterInstances.ts.html |here} to see how to use ListExternalClusterInstances API.
     */
    listExternalClusterInstances(listExternalClusterInstancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalClusterInstances.");
            const operationName = "listExternalClusterInstances";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalClusterInstance/ListExternalClusterInstances";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalClusterInstancesRequest.compartmentId,
                "externalClusterId": listExternalClusterInstancesRequest.externalClusterId,
                "displayName": listExternalClusterInstancesRequest.displayName,
                "page": listExternalClusterInstancesRequest.page,
                "limit": listExternalClusterInstancesRequest.limit,
                "sortBy": listExternalClusterInstancesRequest.sortBy,
                "sortOrder": listExternalClusterInstancesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalClusterInstancesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalClusterInstancesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalClusterInstances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalClusterInstanceCollection",
                    bodyModel: model.ExternalClusterInstanceCollection,
                    type: "model.ExternalClusterInstanceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the clusters in the specified external DB system.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalClustersRequest
     * @return ListExternalClustersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalClusters.ts.html |here} to see how to use ListExternalClusters API.
     */
    listExternalClusters(listExternalClustersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalClusters.");
            const operationName = "listExternalClusters";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalCluster/ListExternalClusters";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalClustersRequest.compartmentId,
                "externalDbSystemId": listExternalClustersRequest.externalDbSystemId,
                "displayName": listExternalClustersRequest.displayName,
                "page": listExternalClustersRequest.page,
                "limit": listExternalClustersRequest.limit,
                "sortBy": listExternalClustersRequest.sortBy,
                "sortOrder": listExternalClustersRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalClustersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalClustersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalClusters",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalClusterCollection",
                    bodyModel: model.ExternalClusterCollection,
                    type: "model.ExternalClusterCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the external databases in the specified compartment or in the specified DB system.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalDatabasesRequest
     * @return ListExternalDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalDatabases.ts.html |here} to see how to use ListExternalDatabases API.
     */
    listExternalDatabases(listExternalDatabasesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalDatabases.");
            const operationName = "listExternalDatabases";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDatabaseCollection/ListExternalDatabases";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalDatabasesRequest.compartmentId,
                "externalDbSystemId": listExternalDatabasesRequest.externalDbSystemId,
                "displayName": listExternalDatabasesRequest.displayName,
                "page": listExternalDatabasesRequest.page,
                "limit": listExternalDatabasesRequest.limit,
                "sortBy": listExternalDatabasesRequest.sortBy,
                "sortOrder": listExternalDatabasesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalDatabasesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalDatabasesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDatabases",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDatabaseCollection",
                    bodyModel: model.ExternalDatabaseCollection,
                    type: "model.ExternalDatabaseCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the DB homes in the specified external DB system.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalDbHomesRequest
     * @return ListExternalDbHomesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalDbHomes.ts.html |here} to see how to use ListExternalDbHomes API.
     */
    listExternalDbHomes(listExternalDbHomesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalDbHomes.");
            const operationName = "listExternalDbHomes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbHome/ListExternalDbHomes";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalDbHomesRequest.compartmentId,
                "externalDbSystemId": listExternalDbHomesRequest.externalDbSystemId,
                "displayName": listExternalDbHomesRequest.displayName,
                "page": listExternalDbHomesRequest.page,
                "limit": listExternalDbHomesRequest.limit,
                "sortBy": listExternalDbHomesRequest.sortBy,
                "sortOrder": listExternalDbHomesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalDbHomesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalDbHomesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbHomes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbHomeCollection",
                    bodyModel: model.ExternalDbHomeCollection,
                    type: "model.ExternalDbHomeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the external DB nodes in the specified external DB system.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalDbNodesRequest
     * @return ListExternalDbNodesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalDbNodes.ts.html |here} to see how to use ListExternalDbNodes API.
     */
    listExternalDbNodes(listExternalDbNodesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalDbNodes.");
            const operationName = "listExternalDbNodes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbNode/ListExternalDbNodes";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalDbNodesRequest.compartmentId,
                "externalDbSystemId": listExternalDbNodesRequest.externalDbSystemId,
                "displayName": listExternalDbNodesRequest.displayName,
                "page": listExternalDbNodesRequest.page,
                "limit": listExternalDbNodesRequest.limit,
                "sortBy": listExternalDbNodesRequest.sortBy,
                "sortOrder": listExternalDbNodesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalDbNodesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalDbNodesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbNodes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbNodeCollection",
                    bodyModel: model.ExternalDbNodeCollection,
                    type: "model.ExternalDbNodeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the external connectors in the specified external DB system.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalDbSystemConnectorsRequest
     * @return ListExternalDbSystemConnectorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalDbSystemConnectors.ts.html |here} to see how to use ListExternalDbSystemConnectors API.
     */
    listExternalDbSystemConnectors(listExternalDbSystemConnectorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalDbSystemConnectors.");
            const operationName = "listExternalDbSystemConnectors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemConnector/ListExternalDbSystemConnectors";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalDbSystemConnectorsRequest.compartmentId,
                "externalDbSystemId": listExternalDbSystemConnectorsRequest.externalDbSystemId,
                "displayName": listExternalDbSystemConnectorsRequest.displayName,
                "page": listExternalDbSystemConnectorsRequest.page,
                "limit": listExternalDbSystemConnectorsRequest.limit,
                "sortBy": listExternalDbSystemConnectorsRequest.sortBy,
                "sortOrder": listExternalDbSystemConnectorsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalDbSystemConnectorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalDbSystemConnectorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemConnectors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystemConnectorCollection",
                    bodyModel: model.ExternalDbSystemConnectorCollection,
                    type: "model.ExternalDbSystemConnectorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the external DB system discovery resources in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalDbSystemDiscoveriesRequest
     * @return ListExternalDbSystemDiscoveriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalDbSystemDiscoveries.ts.html |here} to see how to use ListExternalDbSystemDiscoveries API.
     */
    listExternalDbSystemDiscoveries(listExternalDbSystemDiscoveriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalDbSystemDiscoveries.");
            const operationName = "listExternalDbSystemDiscoveries";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemDiscovery/ListExternalDbSystemDiscoveries";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalDbSystemDiscoveriesRequest.compartmentId,
                "displayName": listExternalDbSystemDiscoveriesRequest.displayName,
                "page": listExternalDbSystemDiscoveriesRequest.page,
                "limit": listExternalDbSystemDiscoveriesRequest.limit,
                "sortBy": listExternalDbSystemDiscoveriesRequest.sortBy,
                "sortOrder": listExternalDbSystemDiscoveriesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalDbSystemDiscoveriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalDbSystemDiscoveriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemDiscoveries",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystemDiscoveryCollection",
                    bodyModel: model.ExternalDbSystemDiscoveryCollection,
                    type: "model.ExternalDbSystemDiscoveryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the external DB systems in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalDbSystemsRequest
     * @return ListExternalDbSystemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalDbSystems.ts.html |here} to see how to use ListExternalDbSystems API.
     */
    listExternalDbSystems(listExternalDbSystemsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalDbSystems.");
            const operationName = "listExternalDbSystems";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystem/ListExternalDbSystems";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalDbSystemsRequest.compartmentId,
                "displayName": listExternalDbSystemsRequest.displayName,
                "page": listExternalDbSystemsRequest.page,
                "limit": listExternalDbSystemsRequest.limit,
                "sortBy": listExternalDbSystemsRequest.sortBy,
                "sortOrder": listExternalDbSystemsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalDbSystemsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalDbSystemsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystems",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystemCollection",
                    bodyModel: model.ExternalDbSystemCollection,
                    type: "model.ExternalDbSystemCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the Exadata infrastructures for a specific compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalExadataInfrastructuresRequest
     * @return ListExternalExadataInfrastructuresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalExadataInfrastructures.ts.html |here} to see how to use ListExternalExadataInfrastructures API.
     */
    listExternalExadataInfrastructures(listExternalExadataInfrastructuresRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalExadataInfrastructures.");
            const operationName = "listExternalExadataInfrastructures";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataInfrastructure/ListExternalExadataInfrastructures";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalExadataInfrastructuresRequest.compartmentId,
                "displayName": listExternalExadataInfrastructuresRequest.displayName,
                "page": listExternalExadataInfrastructuresRequest.page,
                "limit": listExternalExadataInfrastructuresRequest.limit,
                "sortBy": listExternalExadataInfrastructuresRequest.sortBy,
                "sortOrder": listExternalExadataInfrastructuresRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalExadataInfrastructuresRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalExadataInfrastructuresRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataInfrastructures",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataInfrastructureCollection",
                    bodyModel: model.ExternalExadataInfrastructureCollection,
                    type: "model.ExternalExadataInfrastructureCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the connectors for the specific Exadata infrastructures.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalExadataStorageConnectorsRequest
     * @return ListExternalExadataStorageConnectorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalExadataStorageConnectors.ts.html |here} to see how to use ListExternalExadataStorageConnectors API.
     */
    listExternalExadataStorageConnectors(listExternalExadataStorageConnectorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalExadataStorageConnectors.");
            const operationName = "listExternalExadataStorageConnectors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageConnector/ListExternalExadataStorageConnectors";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalExadataStorageConnectorsRequest.compartmentId,
                "externalExadataInfrastructureId": listExternalExadataStorageConnectorsRequest.externalExadataInfrastructureId,
                "displayName": listExternalExadataStorageConnectorsRequest.displayName,
                "page": listExternalExadataStorageConnectorsRequest.page,
                "limit": listExternalExadataStorageConnectorsRequest.limit,
                "sortBy": listExternalExadataStorageConnectorsRequest.sortBy,
                "sortOrder": listExternalExadataStorageConnectorsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalExadataStorageConnectorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalExadataStorageConnectorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageConnectors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataStorageConnectorCollection",
                    bodyModel: model.ExternalExadataStorageConnectorCollection,
                    type: "model.ExternalExadataStorageConnectorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all the storage servers for the exadata infrastructure or storage grid.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalExadataStorageServersRequest
     * @return ListExternalExadataStorageServersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalExadataStorageServers.ts.html |here} to see how to use ListExternalExadataStorageServers API.
     */
    listExternalExadataStorageServers(listExternalExadataStorageServersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalExadataStorageServers.");
            const operationName = "listExternalExadataStorageServers";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageServer/ListExternalExadataStorageServers";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalExadataStorageServersRequest.compartmentId,
                "externalExadataInfrastructureId": listExternalExadataStorageServersRequest.externalExadataInfrastructureId,
                "displayName": listExternalExadataStorageServersRequest.displayName,
                "page": listExternalExadataStorageServersRequest.page,
                "limit": listExternalExadataStorageServersRequest.limit,
                "sortBy": listExternalExadataStorageServersRequest.sortBy,
                "sortOrder": listExternalExadataStorageServersRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalExadataStorageServersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalExadataStorageServersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageServers",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataStorageServerCollection",
                    bodyModel: model.ExternalExadataStorageServerCollection,
                    type: "model.ExternalExadataStorageServerCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the database services registered with the specified external listener
     * for the specified Managed Database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalListenerServicesRequest
     * @return ListExternalListenerServicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalListenerServices.ts.html |here} to see how to use ListExternalListenerServices API.
     */
    listExternalListenerServices(listExternalListenerServicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalListenerServices.");
            const operationName = "listExternalListenerServices";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalListener/ListExternalListenerServices";
            const pathParams = {
                "{externalListenerId}": listExternalListenerServicesRequest.externalListenerId
            };
            const queryParams = {
                "managedDatabaseId": listExternalListenerServicesRequest.managedDatabaseId,
                "page": listExternalListenerServicesRequest.page,
                "limit": listExternalListenerServicesRequest.limit,
                "sortBy": listExternalListenerServicesRequest.sortBy,
                "sortOrder": listExternalListenerServicesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalListenerServicesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalListenerServicesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalListeners/{externalListenerId}/services",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalListenerServiceCollection",
                    bodyModel: model.ExternalListenerServiceCollection,
                    type: "model.ExternalListenerServiceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the listeners in the specified external DB system.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExternalListenersRequest
     * @return ListExternalListenersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListExternalListeners.ts.html |here} to see how to use ListExternalListeners API.
     */
    listExternalListeners(listExternalListenersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listExternalListeners.");
            const operationName = "listExternalListeners";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalListener/ListExternalListeners";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExternalListenersRequest.compartmentId,
                "externalDbSystemId": listExternalListenersRequest.externalDbSystemId,
                "displayName": listExternalListenersRequest.displayName,
                "page": listExternalListenersRequest.page,
                "limit": listExternalListenersRequest.limit,
                "sortBy": listExternalListenersRequest.sortBy,
                "sortOrder": listExternalListenersRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExternalListenersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExternalListenersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalListeners",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalListenerCollection",
                    bodyModel: model.ExternalListenerCollection,
                    type: "model.ExternalListenerCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the job execution for a specific ID or the list of job executions for a job, job run, Managed Database or Managed Database Group
     * in a specific compartment. Only one of the parameters, ID, jobId, jobRunId, managedDatabaseId or managedDatabaseGroupId should be provided.
     * If none of these parameters is provided, all the job executions in the compartment are listed. Job executions can also be filtered
     * based on the name and status parameters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListJobExecutionsRequest
     * @return ListJobExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListJobExecutions.ts.html |here} to see how to use ListJobExecutions API.
     */
    listJobExecutions(listJobExecutionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listJobExecutions.");
            const operationName = "listJobExecutions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/JobExecution/ListJobExecutions";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listJobExecutionsRequest.compartmentId,
                "id": listJobExecutionsRequest.id,
                "jobId": listJobExecutionsRequest.jobId,
                "managedDatabaseId": listJobExecutionsRequest.managedDatabaseId,
                "managedDatabaseGroupId": listJobExecutionsRequest.managedDatabaseGroupId,
                "status": listJobExecutionsRequest.status,
                "name": listJobExecutionsRequest.name,
                "limit": listJobExecutionsRequest.limit,
                "page": listJobExecutionsRequest.page,
                "sortBy": listJobExecutionsRequest.sortBy,
                "sortOrder": listJobExecutionsRequest.sortOrder,
                "jobRunId": listJobExecutionsRequest.jobRunId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobExecutionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobExecutionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobExecutions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobExecutionCollection",
                    bodyModel: model.JobExecutionCollection,
                    type: "model.JobExecutionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the job run for a specific ID or the list of job runs for a job, Managed Database or Managed Database Group
     * in a specific compartment. Only one of the parameters, ID, jobId, managedDatabaseId, or managedDatabaseGroupId
     * should be provided. If none of these parameters is provided, all the job runs in the compartment are listed.
     * Job runs can also be filtered based on name and runStatus parameters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListJobRunsRequest
     * @return ListJobRunsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListJobRuns.ts.html |here} to see how to use ListJobRuns API.
     */
    listJobRuns(listJobRunsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listJobRuns.");
            const operationName = "listJobRuns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/JobRun/ListJobRuns";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listJobRunsRequest.compartmentId,
                "id": listJobRunsRequest.id,
                "jobId": listJobRunsRequest.jobId,
                "managedDatabaseId": listJobRunsRequest.managedDatabaseId,
                "managedDatabaseGroupId": listJobRunsRequest.managedDatabaseGroupId,
                "runStatus": listJobRunsRequest.runStatus,
                "name": listJobRunsRequest.name,
                "limit": listJobRunsRequest.limit,
                "page": listJobRunsRequest.page,
                "sortBy": listJobRunsRequest.sortBy,
                "sortOrder": listJobRunsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobRunsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobRunsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobRunCollection",
                    bodyModel: model.JobRunCollection,
                    type: "model.JobRunCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the job for a specific ID or the list of jobs for a Managed Database or Managed Database Group
     * in a specific compartment. Only one of the parameters, ID, managedDatabaseId or managedDatabaseGroupId,
     * should be provided. If none of these parameters is provided, all the jobs in the compartment are listed.
     * Jobs can also be filtered based on the name and lifecycleState parameters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListJobsRequest
     * @return ListJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListJobs.ts.html |here} to see how to use ListJobs API.
     */
    listJobs(listJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listJobs.");
            const operationName = "listJobs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Job/ListJobs";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listJobsRequest.compartmentId,
                "id": listJobsRequest.id,
                "managedDatabaseGroupId": listJobsRequest.managedDatabaseGroupId,
                "managedDatabaseId": listJobsRequest.managedDatabaseId,
                "name": listJobsRequest.name,
                "lifecycleState": listJobsRequest.lifecycleState,
                "limit": listJobsRequest.limit,
                "page": listJobsRequest.page,
                "sortBy": listJobsRequest.sortBy,
                "sortOrder": listJobsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobCollection",
                    bodyModel: model.JobCollection,
                    type: "model.JobCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Managed Database Group for a specific ID or the list of Managed Database Groups in
     * a specific compartment. Managed Database Groups can also be filtered based on the name parameter.
     * Only one of the parameters, ID or name should be provided. If none of these parameters is provided,
     * all the Managed Database Groups in the compartment are listed.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagedDatabaseGroupsRequest
     * @return ListManagedDatabaseGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListManagedDatabaseGroups.ts.html |here} to see how to use ListManagedDatabaseGroups API.
     */
    listManagedDatabaseGroups(listManagedDatabaseGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listManagedDatabaseGroups.");
            const operationName = "listManagedDatabaseGroups";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabaseGroup/ListManagedDatabaseGroups";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagedDatabaseGroupsRequest.compartmentId,
                "id": listManagedDatabaseGroupsRequest.id,
                "name": listManagedDatabaseGroupsRequest.name,
                "lifecycleState": listManagedDatabaseGroupsRequest.lifecycleState,
                "page": listManagedDatabaseGroupsRequest.page,
                "limit": listManagedDatabaseGroupsRequest.limit,
                "sortBy": listManagedDatabaseGroupsRequest.sortBy,
                "sortOrder": listManagedDatabaseGroupsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedDatabaseGroupsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedDatabaseGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabaseGroupCollection",
                    bodyModel: model.ManagedDatabaseGroupCollection,
                    type: "model.ManagedDatabaseGroupCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Managed Database for a specific ID or the list of Managed Databases in a specific compartment.
     * Managed Databases can be filtered based on the name parameter. Only one of the parameters, ID or name
     * should be provided. If neither of these parameters is provided, all the Managed Databases in the compartment
     * are listed. Managed Databases can also be filtered based on the deployment type and management option.
     * If the deployment type is not specified or if it is `ONPREMISE`, then the management option is not
     * considered and Managed Databases with `ADVANCED` management option are listed.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagedDatabasesRequest
     * @return ListManagedDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListManagedDatabases.ts.html |here} to see how to use ListManagedDatabases API.
     */
    listManagedDatabases(listManagedDatabasesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listManagedDatabases.");
            const operationName = "listManagedDatabases";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListManagedDatabases";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagedDatabasesRequest.compartmentId,
                "id": listManagedDatabasesRequest.id,
                "name": listManagedDatabasesRequest.name,
                "managementOption": listManagedDatabasesRequest.managementOption,
                "deploymentType": listManagedDatabasesRequest.deploymentType,
                "externalExadataInfrastructureId": listManagedDatabasesRequest.externalExadataInfrastructureId,
                "page": listManagedDatabasesRequest.page,
                "limit": listManagedDatabasesRequest.limit,
                "sortBy": listManagedDatabasesRequest.sortBy,
                "sortOrder": listManagedDatabasesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedDatabasesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedDatabasesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabaseCollection",
                    bodyModel: model.ManagedDatabaseCollection,
                    type: "model.ManagedDatabaseCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of object privileges granted to a specific user.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListObjectPrivilegesRequest
     * @return ListObjectPrivilegesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListObjectPrivileges.ts.html |here} to see how to use ListObjectPrivileges API.
     */
    listObjectPrivileges(listObjectPrivilegesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listObjectPrivileges.");
            const operationName = "listObjectPrivileges";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListObjectPrivileges";
            const pathParams = {
                "{managedDatabaseId}": listObjectPrivilegesRequest.managedDatabaseId,
                "{userName}": listObjectPrivilegesRequest.userName
            };
            const queryParams = {
                "name": listObjectPrivilegesRequest.name,
                "sortBy": listObjectPrivilegesRequest.sortBy,
                "sortOrder": listObjectPrivilegesRequest.sortOrder,
                "limit": listObjectPrivilegesRequest.limit,
                "page": listObjectPrivilegesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listObjectPrivilegesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listObjectPrivilegesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/users/{userName}/objectPrivileges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "objectPrivilegeCollection",
                    bodyModel: model.ObjectPrivilegeCollection,
                    type: "model.ObjectPrivilegeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the details of the Optimizer Statistics Advisor task executions, such as their duration, and the number of findings, if any.
     * Optionally, you can specify a date-time range (of seven days) to obtain the list of executions that fall within the specified time range.
     * If the date-time range is not specified, then the executions in the last seven days are listed.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOptimizerStatisticsAdvisorExecutionsRequest
     * @return ListOptimizerStatisticsAdvisorExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListOptimizerStatisticsAdvisorExecutions.ts.html |here} to see how to use ListOptimizerStatisticsAdvisorExecutions API.
     */
    listOptimizerStatisticsAdvisorExecutions(listOptimizerStatisticsAdvisorExecutionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listOptimizerStatisticsAdvisorExecutions.");
            const operationName = "listOptimizerStatisticsAdvisorExecutions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListOptimizerStatisticsAdvisorExecutions";
            const pathParams = {
                "{managedDatabaseId}": listOptimizerStatisticsAdvisorExecutionsRequest.managedDatabaseId
            };
            const queryParams = {
                "startTimeGreaterThanOrEqualTo": listOptimizerStatisticsAdvisorExecutionsRequest.startTimeGreaterThanOrEqualTo,
                "endTimeLessThanOrEqualTo": listOptimizerStatisticsAdvisorExecutionsRequest.endTimeLessThanOrEqualTo
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOptimizerStatisticsAdvisorExecutionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOptimizerStatisticsAdvisorExecutionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/optimizerStatisticsAdvisorExecutions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "optimizerStatisticsAdvisorExecutionsCollection",
                    bodyModel: model.OptimizerStatisticsAdvisorExecutionsCollection,
                    type: "model.OptimizerStatisticsAdvisorExecutionsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of the optimizer statistics collection operations per hour, grouped by task or object status for the specified Managed Database.
     * You must specify a value for GroupByQueryParam to determine whether the data should be grouped by task status or task object status.
     * Optionally, you can specify a date-time range (of seven days) to obtain collection aggregations within the specified time range.
     * If the date-time range is not specified, then the operations in the last seven days are listed.
     * You can further filter the results by providing the optional type of TaskTypeQueryParam.
     * If the task type not provided, then both Auto and Manual tasks are considered for aggregation.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOptimizerStatisticsCollectionAggregationsRequest
     * @return ListOptimizerStatisticsCollectionAggregationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListOptimizerStatisticsCollectionAggregations.ts.html |here} to see how to use ListOptimizerStatisticsCollectionAggregations API.
     */
    listOptimizerStatisticsCollectionAggregations(listOptimizerStatisticsCollectionAggregationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listOptimizerStatisticsCollectionAggregations.");
            const operationName = "listOptimizerStatisticsCollectionAggregations";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListOptimizerStatisticsCollectionAggregations";
            const pathParams = {
                "{managedDatabaseId}": listOptimizerStatisticsCollectionAggregationsRequest.managedDatabaseId
            };
            const queryParams = {
                "startTimeGreaterThanOrEqualTo": listOptimizerStatisticsCollectionAggregationsRequest.startTimeGreaterThanOrEqualTo,
                "endTimeLessThanOrEqualTo": listOptimizerStatisticsCollectionAggregationsRequest.endTimeLessThanOrEqualTo,
                "taskType": listOptimizerStatisticsCollectionAggregationsRequest.taskType,
                "groupType": listOptimizerStatisticsCollectionAggregationsRequest.groupType,
                "limit": listOptimizerStatisticsCollectionAggregationsRequest.limit,
                "page": listOptimizerStatisticsCollectionAggregationsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOptimizerStatisticsCollectionAggregationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOptimizerStatisticsCollectionAggregationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/optimizerStatisticsCollectionAggregations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "optimizerStatisticsCollectionAggregationsCollection",
                    bodyModel: model.OptimizerStatisticsCollectionAggregationsCollection,
                    type: "model.OptimizerStatisticsCollectionAggregationsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the Optimizer Statistics Collection (Auto and Manual) task operation summary for the specified Managed Database.
     * The summary includes the details of each operation and the number of tasks grouped by status: Completed, In Progress, Failed, and so on.
     * Optionally, you can specify a date-time range (of seven days) to obtain the list of operations that fall within the specified time range.
     * If the date-time range is not specified, then the operations in the last seven days are listed.
     * This API also enables the pagination of results and the opc-next-page response header indicates whether there is a next page.
     * If you use the same header value in a consecutive request, the next page records are returned.
     * To obtain the required results, you can apply the different types of filters supported by this API.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOptimizerStatisticsCollectionOperationsRequest
     * @return ListOptimizerStatisticsCollectionOperationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListOptimizerStatisticsCollectionOperations.ts.html |here} to see how to use ListOptimizerStatisticsCollectionOperations API.
     */
    listOptimizerStatisticsCollectionOperations(listOptimizerStatisticsCollectionOperationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listOptimizerStatisticsCollectionOperations.");
            const operationName = "listOptimizerStatisticsCollectionOperations";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListOptimizerStatisticsCollectionOperations";
            const pathParams = {
                "{managedDatabaseId}": listOptimizerStatisticsCollectionOperationsRequest.managedDatabaseId
            };
            const queryParams = {
                "startTimeGreaterThanOrEqualTo": listOptimizerStatisticsCollectionOperationsRequest.startTimeGreaterThanOrEqualTo,
                "endTimeLessThanOrEqualTo": listOptimizerStatisticsCollectionOperationsRequest.endTimeLessThanOrEqualTo,
                "taskType": listOptimizerStatisticsCollectionOperationsRequest.taskType,
                "limit": listOptimizerStatisticsCollectionOperationsRequest.limit,
                "page": listOptimizerStatisticsCollectionOperationsRequest.page,
                "filterBy": listOptimizerStatisticsCollectionOperationsRequest.filterBy,
                "sortBy": listOptimizerStatisticsCollectionOperationsRequest.sortBy,
                "sortOrder": listOptimizerStatisticsCollectionOperationsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOptimizerStatisticsCollectionOperationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOptimizerStatisticsCollectionOperationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/optimizerStatisticsCollectionOperations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "optimizerStatisticsCollectionOperationsCollection",
                    bodyModel: model.OptimizerStatisticsCollectionOperationsCollection,
                    type: "model.OptimizerStatisticsCollectionOperationsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of preferred credentials for a given Managed Database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListPreferredCredentialsRequest
     * @return ListPreferredCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListPreferredCredentials.ts.html |here} to see how to use ListPreferredCredentials API.
     */
    listPreferredCredentials(listPreferredCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listPreferredCredentials.");
            const operationName = "listPreferredCredentials";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/PreferredCredential/ListPreferredCredentials";
            const pathParams = {
                "{managedDatabaseId}": listPreferredCredentialsRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listPreferredCredentialsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listPreferredCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/preferredCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "preferredCredentialCollection",
                    bodyModel: model.PreferredCredentialCollection,
                    type: "model.PreferredCredentialCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of users on whose behalf the current user acts as proxy.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListProxiedForUsersRequest
     * @return ListProxiedForUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListProxiedForUsers.ts.html |here} to see how to use ListProxiedForUsers API.
     */
    listProxiedForUsers(listProxiedForUsersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listProxiedForUsers.");
            const operationName = "listProxiedForUsers";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListProxiedForUsers";
            const pathParams = {
                "{managedDatabaseId}": listProxiedForUsersRequest.managedDatabaseId,
                "{userName}": listProxiedForUsersRequest.userName
            };
            const queryParams = {
                "name": listProxiedForUsersRequest.name,
                "sortBy": listProxiedForUsersRequest.sortBy,
                "sortOrder": listProxiedForUsersRequest.sortOrder,
                "limit": listProxiedForUsersRequest.limit,
                "page": listProxiedForUsersRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listProxiedForUsersRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listProxiedForUsersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/users/{userName}/proxiedForUsers",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "proxiedForUserCollection",
                    bodyModel: model.ProxiedForUserCollection,
                    type: "model.ProxiedForUserCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of proxy users for the current user.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListProxyUsersRequest
     * @return ListProxyUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListProxyUsers.ts.html |here} to see how to use ListProxyUsers API.
     */
    listProxyUsers(listProxyUsersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listProxyUsers.");
            const operationName = "listProxyUsers";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListProxyUsers";
            const pathParams = {
                "{managedDatabaseId}": listProxyUsersRequest.managedDatabaseId,
                "{userName}": listProxyUsersRequest.userName
            };
            const queryParams = {
                "name": listProxyUsersRequest.name,
                "sortBy": listProxyUsersRequest.sortBy,
                "sortOrder": listProxyUsersRequest.sortOrder,
                "limit": listProxyUsersRequest.limit,
                "page": listProxyUsersRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listProxyUsersRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listProxyUsersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/users/{userName}/proxyUsers",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "proxyUserCollection",
                    bodyModel: model.ProxyUserCollection,
                    type: "model.ProxyUserCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of roles granted to a specific user.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListRolesRequest
     * @return ListRolesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListRoles.ts.html |here} to see how to use ListRoles API.
     */
    listRoles(listRolesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listRoles.");
            const operationName = "listRoles";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListRoles";
            const pathParams = {
                "{managedDatabaseId}": listRolesRequest.managedDatabaseId,
                "{userName}": listRolesRequest.userName
            };
            const queryParams = {
                "name": listRolesRequest.name,
                "sortBy": listRolesRequest.sortBy,
                "sortOrder": listRolesRequest.sortOrder,
                "limit": listRolesRequest.limit,
                "page": listRolesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRolesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listRolesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/users/{userName}/roles",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roleCollection",
                    bodyModel: model.RoleCollection,
                    type: "model.RoleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of system privileges granted to a specific user.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSystemPrivilegesRequest
     * @return ListSystemPrivilegesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListSystemPrivileges.ts.html |here} to see how to use ListSystemPrivileges API.
     */
    listSystemPrivileges(listSystemPrivilegesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listSystemPrivileges.");
            const operationName = "listSystemPrivileges";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListSystemPrivileges";
            const pathParams = {
                "{managedDatabaseId}": listSystemPrivilegesRequest.managedDatabaseId,
                "{userName}": listSystemPrivilegesRequest.userName
            };
            const queryParams = {
                "name": listSystemPrivilegesRequest.name,
                "sortBy": listSystemPrivilegesRequest.sortBy,
                "sortOrder": listSystemPrivilegesRequest.sortOrder,
                "limit": listSystemPrivilegesRequest.limit,
                "page": listSystemPrivilegesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSystemPrivilegesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSystemPrivilegesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/users/{userName}/systemPrivileges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "systemPrivilegeCollection",
                    bodyModel: model.SystemPrivilegeCollection,
                    type: "model.SystemPrivilegeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the database table statistics grouped by different statuses such as Not Stale Stats, Stale Stats, and No Stats.
     * This also includes the percentage of each status.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTableStatisticsRequest
     * @return ListTableStatisticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListTableStatistics.ts.html |here} to see how to use ListTableStatistics API.
     */
    listTableStatistics(listTableStatisticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listTableStatistics.");
            const operationName = "listTableStatistics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListTableStatistics";
            const pathParams = {
                "{managedDatabaseId}": listTableStatisticsRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTableStatisticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTableStatisticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/tableStatistics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tableStatisticsCollection",
                    bodyModel: model.TableStatisticsCollection,
                    type: "model.TableStatisticsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of tablespaces for the specified managedDatabaseId.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTablespacesRequest
     * @return ListTablespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListTablespaces.ts.html |here} to see how to use ListTablespaces API.
     */
    listTablespaces(listTablespacesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listTablespaces.");
            const operationName = "listTablespaces";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Tablespace/ListTablespaces";
            const pathParams = {
                "{managedDatabaseId}": listTablespacesRequest.managedDatabaseId
            };
            const queryParams = {
                "name": listTablespacesRequest.name,
                "sortBy": listTablespacesRequest.sortBy,
                "sortOrder": listTablespacesRequest.sortOrder,
                "page": listTablespacesRequest.page,
                "limit": listTablespacesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTablespacesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTablespacesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/tablespaces",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tablespaceCollection",
                    bodyModel: model.TablespaceCollection,
                    type: "model.TablespaceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of users for the specified managedDatabaseId.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListUsersRequest
     * @return ListUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListUsers.ts.html |here} to see how to use ListUsers API.
     */
    listUsers(listUsersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listUsers.");
            const operationName = "listUsers";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListUsers";
            const pathParams = {
                "{managedDatabaseId}": listUsersRequest.managedDatabaseId
            };
            const queryParams = {
                "name": listUsersRequest.name,
                "sortBy": listUsersRequest.sortBy,
                "sortOrder": listUsersRequest.sortOrder,
                "limit": listUsersRequest.limit,
                "page": listUsersRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listUsersRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listUsersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/users",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userCollection",
                    bodyModel: model.UserCollection,
                    type: "model.UserCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a paginated list of errors for a given work request.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/WorkRequestError/ListWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit,
                "sortBy": listWorkRequestErrorsRequest.sortBy,
                "sortOrder": listWorkRequestErrorsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: model.WorkRequestErrorCollection,
                    type: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a paginated list of logs for a given work request.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/WorkRequestLogEntry/ListWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit,
                "sortBy": listWorkRequestLogsRequest.sortBy,
                "sortOrder": listWorkRequestLogsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogEntryCollection",
                    bodyModel: model.WorkRequestLogEntryCollection,
                    type: "model.WorkRequestLogEntryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The list of work requests in a specific compartment was retrieved successfully.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/WorkRequest/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "resourceId": listWorkRequestsRequest.resourceId,
                "workRequestId": listWorkRequestsRequest.workRequestId,
                "status": listWorkRequestsRequest.status,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "sortBy": listWorkRequestsRequest.sortBy,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestCollection",
                    bodyModel: model.WorkRequestCollection,
                    type: "model.WorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Patches the external DB system discovery specified by `externalDbSystemDiscoveryId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchExternalDbSystemDiscoveryRequest
     * @return PatchExternalDbSystemDiscoveryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/PatchExternalDbSystemDiscovery.ts.html |here} to see how to use PatchExternalDbSystemDiscovery API.
     */
    patchExternalDbSystemDiscovery(patchExternalDbSystemDiscoveryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#patchExternalDbSystemDiscovery.");
            const operationName = "patchExternalDbSystemDiscovery";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemDiscovery/PatchExternalDbSystemDiscovery";
            const pathParams = {
                "{externalDbSystemDiscoveryId}": patchExternalDbSystemDiscoveryRequest.externalDbSystemDiscoveryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": patchExternalDbSystemDiscoveryRequest.opcRequestId,
                "if-match": patchExternalDbSystemDiscoveryRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchExternalDbSystemDiscoveryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemDiscoveries/{externalDbSystemDiscoveryId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchExternalDbSystemDiscoveryRequest.patchExternalDbSystemDiscoveryDetails, "PatchExternalDbSystemDiscoveryDetails", model.PatchExternalDbSystemDiscoveryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystemDiscovery",
                    bodyModel: model.ExternalDbSystemDiscovery,
                    type: "model.ExternalDbSystemDiscovery",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a data file or temp file from the tablespace.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveDataFileRequest
     * @return RemoveDataFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/RemoveDataFile.ts.html |here} to see how to use RemoveDataFile API.
     */
    removeDataFile(removeDataFileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#removeDataFile.");
            const operationName = "removeDataFile";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Tablespace/RemoveDataFile";
            const pathParams = {
                "{managedDatabaseId}": removeDataFileRequest.managedDatabaseId,
                "{tablespaceName}": removeDataFileRequest.tablespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeDataFileRequest.opcRequestId,
                "opc-retry-token": removeDataFileRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeDataFileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}/actions/removeDataFile",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeDataFileRequest.removeDataFileDetails, "RemoveDataFileDetails", model.RemoveDataFileDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tablespaceAdminStatus",
                    bodyModel: model.TablespaceAdminStatus,
                    type: "model.TablespaceAdminStatus",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a Managed Database from a Managed Database Group. Any management
     * activities that are currently running on this database will continue to
     * run to completion. However, any activities scheduled to run in the future
     * will not be performed on this database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveManagedDatabaseFromManagedDatabaseGroupRequest
     * @return RemoveManagedDatabaseFromManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/RemoveManagedDatabaseFromManagedDatabaseGroup.ts.html |here} to see how to use RemoveManagedDatabaseFromManagedDatabaseGroup API.
     */
    removeManagedDatabaseFromManagedDatabaseGroup(removeManagedDatabaseFromManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#removeManagedDatabaseFromManagedDatabaseGroup.");
            const operationName = "removeManagedDatabaseFromManagedDatabaseGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabaseGroup/RemoveManagedDatabaseFromManagedDatabaseGroup";
            const pathParams = {
                "{managedDatabaseGroupId}": removeManagedDatabaseFromManagedDatabaseGroupRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeManagedDatabaseFromManagedDatabaseGroupRequest.opcRequestId,
                "opc-retry-token": removeManagedDatabaseFromManagedDatabaseGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeManagedDatabaseFromManagedDatabaseGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/removeManagedDatabase",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeManagedDatabaseFromManagedDatabaseGroupRequest.removeManagedDatabaseFromManagedDatabaseGroupDetails, "RemoveManagedDatabaseFromManagedDatabaseGroupDetails", model.RemoveManagedDatabaseFromManagedDatabaseGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Resets database parameter values to their default or startup values.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ResetDatabaseParametersRequest
     * @return ResetDatabaseParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ResetDatabaseParameters.ts.html |here} to see how to use ResetDatabaseParameters API.
     */
    resetDatabaseParameters(resetDatabaseParametersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#resetDatabaseParameters.");
            const operationName = "resetDatabaseParameters";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ResetDatabaseParameters";
            const pathParams = {
                "{managedDatabaseId}": resetDatabaseParametersRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": resetDatabaseParametersRequest.opcRequestId,
                "opc-retry-token": resetDatabaseParametersRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, resetDatabaseParametersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/actions/resetDatabaseParameters",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(resetDatabaseParametersRequest.resetDatabaseParametersDetails, "ResetDatabaseParametersDetails", model.ResetDatabaseParametersDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "updateDatabaseParametersResult",
                    bodyModel: model.UpdateDatabaseParametersResult,
                    type: "model.UpdateDatabaseParametersResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Resizes a data file or temp file within the tablespace.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ResizeDataFileRequest
     * @return ResizeDataFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ResizeDataFile.ts.html |here} to see how to use ResizeDataFile API.
     */
    resizeDataFile(resizeDataFileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#resizeDataFile.");
            const operationName = "resizeDataFile";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Tablespace/ResizeDataFile";
            const pathParams = {
                "{managedDatabaseId}": resizeDataFileRequest.managedDatabaseId,
                "{tablespaceName}": resizeDataFileRequest.tablespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": resizeDataFileRequest.opcRequestId,
                "opc-retry-token": resizeDataFileRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, resizeDataFileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}/actions/resizeDataFile",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(resizeDataFileRequest.resizeDataFileDetails, "ResizeDataFileDetails", model.ResizeDataFileDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tablespaceAdminStatus",
                    bodyModel: model.TablespaceAdminStatus,
                    type: "model.TablespaceAdminStatus",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates and executes a historic ADDM task using the specified AWR snapshot IDs. If an existing ADDM task
     * uses the provided awr snapshot IDs, the existing task will be returned.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RunHistoricAddmRequest
     * @return RunHistoricAddmResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/RunHistoricAddm.ts.html |here} to see how to use RunHistoricAddm API.
     */
    runHistoricAddm(runHistoricAddmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#runHistoricAddm.");
            const operationName = "runHistoricAddm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/HistoricAddmResult/RunHistoricAddm";
            const pathParams = {
                "{managedDatabaseId}": runHistoricAddmRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": runHistoricAddmRequest.opcRetryToken,
                "opc-request-id": runHistoricAddmRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, runHistoricAddmRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/actions/runHistoricAddm",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(runHistoricAddmRequest.runHistoricAddmDetails, "RunHistoricAddmDetails", model.RunHistoricAddmDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "historicAddmResult",
                    bodyModel: model.HistoricAddmResult,
                    type: "model.HistoricAddmResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR CPU resource limits and metrics for the specified database in AWR.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAwrDbCpuUsagesRequest
     * @return SummarizeAwrDbCpuUsagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAwrDbCpuUsages.ts.html |here} to see how to use SummarizeAwrDbCpuUsages API.
     */
    summarizeAwrDbCpuUsages(summarizeAwrDbCpuUsagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbCpuUsages.");
            const operationName = "summarizeAwrDbCpuUsages";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAwrDbCpuUsages";
            const pathParams = {
                "{managedDatabaseId}": summarizeAwrDbCpuUsagesRequest.managedDatabaseId,
                "{awrDbId}": summarizeAwrDbCpuUsagesRequest.awrDbId
            };
            const queryParams = {
                "instNum": summarizeAwrDbCpuUsagesRequest.instNum,
                "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.timeLessThanOrEqualTo,
                "sessionType": summarizeAwrDbCpuUsagesRequest.sessionType,
                "containerId": summarizeAwrDbCpuUsagesRequest.containerId,
                "page": summarizeAwrDbCpuUsagesRequest.page,
                "limit": summarizeAwrDbCpuUsagesRequest.limit,
                "sortBy": summarizeAwrDbCpuUsagesRequest.sortBy,
                "sortOrder": summarizeAwrDbCpuUsagesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDbCpuUsagesRequest.opcRequestId,
                "opc-retry-token": summarizeAwrDbCpuUsagesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDbCpuUsagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbCpuUsages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbCpuUsageCollection",
                    bodyModel: model.AwrDbCpuUsageCollection,
                    type: "model.AwrDbCpuUsageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the metric samples for the specified database in the AWR. The metric samples are summarized based on the Time dimension for each metric.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAwrDbMetricsRequest
     * @return SummarizeAwrDbMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAwrDbMetrics.ts.html |here} to see how to use SummarizeAwrDbMetrics API.
     */
    summarizeAwrDbMetrics(summarizeAwrDbMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbMetrics.");
            const operationName = "summarizeAwrDbMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAwrDbMetrics";
            const pathParams = {
                "{managedDatabaseId}": summarizeAwrDbMetricsRequest.managedDatabaseId,
                "{awrDbId}": summarizeAwrDbMetricsRequest.awrDbId
            };
            const queryParams = {
                "instNum": summarizeAwrDbMetricsRequest.instNum,
                "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbMetricsRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": summarizeAwrDbMetricsRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDbMetricsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDbMetricsRequest.timeLessThanOrEqualTo,
                "name": summarizeAwrDbMetricsRequest.name,
                "containerId": summarizeAwrDbMetricsRequest.containerId,
                "page": summarizeAwrDbMetricsRequest.page,
                "limit": summarizeAwrDbMetricsRequest.limit,
                "sortBy": summarizeAwrDbMetricsRequest.sortBy,
                "sortOrder": summarizeAwrDbMetricsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDbMetricsRequest.opcRequestId,
                "opc-retry-token": summarizeAwrDbMetricsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDbMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbMetricCollection",
                    bodyModel: model.AwrDbMetricCollection,
                    type: "model.AwrDbMetricCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the database parameter change history for one database parameter of the specified database in AWR. One change history record contains
     * the previous value, the changed value, and the corresponding time range. If the database parameter value was changed multiple times within the time range, then multiple change history records are created for the same parameter.
     * Note that this API only returns information on change history details for one database parameter.
     * To get a list of all the database parameters whose values were changed during a specified time range, use the following API endpoint:
     * /managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameters
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAwrDbParameterChangesRequest
     * @return SummarizeAwrDbParameterChangesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAwrDbParameterChanges.ts.html |here} to see how to use SummarizeAwrDbParameterChanges API.
     */
    summarizeAwrDbParameterChanges(summarizeAwrDbParameterChangesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbParameterChanges.");
            const operationName = "summarizeAwrDbParameterChanges";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAwrDbParameterChanges";
            const pathParams = {
                "{managedDatabaseId}": summarizeAwrDbParameterChangesRequest.managedDatabaseId,
                "{awrDbId}": summarizeAwrDbParameterChangesRequest.awrDbId
            };
            const queryParams = {
                "instNum": summarizeAwrDbParameterChangesRequest.instNum,
                "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbParameterChangesRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": summarizeAwrDbParameterChangesRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDbParameterChangesRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDbParameterChangesRequest.timeLessThanOrEqualTo,
                "containerId": summarizeAwrDbParameterChangesRequest.containerId,
                "name": summarizeAwrDbParameterChangesRequest.name,
                "page": summarizeAwrDbParameterChangesRequest.page,
                "limit": summarizeAwrDbParameterChangesRequest.limit,
                "sortBy": summarizeAwrDbParameterChangesRequest.sortBy,
                "sortOrder": summarizeAwrDbParameterChangesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDbParameterChangesRequest.opcRequestId,
                "opc-retry-token": summarizeAwrDbParameterChangesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDbParameterChangesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameterChanges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbParameterChangeCollection",
                    bodyModel: model.AwrDbParameterChangeCollection,
                    type: "model.AwrDbParameterChangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Summarizes the database parameter history for the specified database in AWR. This includes the list of database
  * parameters, with information on whether the parameter values were modified within the query time range. Note that
  * each database parameter is only listed once. Depending on the optional query parameters, the returned summary gets all the database parameters, which include:
  * <p>
  - Each parameter whose value was changed during the time range:  (valueChanged =\"Y\")
  * - Each parameter whose value was unchanged during the time range:  (valueChanged =\"N\")
  * - Each parameter whose value was changed at the system level during the time range: (valueChanged =\"Y\"  and valueModified = \"SYSTEM_MOD\")
  * - Each parameter whose value was unchanged during the time range, however, the value is not the default value: (valueChanged =\"N\" and  valueDefault = \"FALSE\")
  * <p>
  Note that this API does not return information on the number of times each database parameter has been changed within the time range. To get the database parameter value change history for a specific parameter, use the following API endpoint:
  * /managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameterChanges
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param SummarizeAwrDbParametersRequest
       * @return SummarizeAwrDbParametersResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAwrDbParameters.ts.html |here} to see how to use SummarizeAwrDbParameters API.
       */
    summarizeAwrDbParameters(summarizeAwrDbParametersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbParameters.");
            const operationName = "summarizeAwrDbParameters";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAwrDbParameters";
            const pathParams = {
                "{managedDatabaseId}": summarizeAwrDbParametersRequest.managedDatabaseId,
                "{awrDbId}": summarizeAwrDbParametersRequest.awrDbId
            };
            const queryParams = {
                "instNum": summarizeAwrDbParametersRequest.instNum,
                "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbParametersRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": summarizeAwrDbParametersRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDbParametersRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDbParametersRequest.timeLessThanOrEqualTo,
                "containerId": summarizeAwrDbParametersRequest.containerId,
                "name": summarizeAwrDbParametersRequest.name,
                "nameContains": summarizeAwrDbParametersRequest.nameContains,
                "valueChanged": summarizeAwrDbParametersRequest.valueChanged,
                "valueDefault": summarizeAwrDbParametersRequest.valueDefault,
                "valueModified": summarizeAwrDbParametersRequest.valueModified,
                "page": summarizeAwrDbParametersRequest.page,
                "limit": summarizeAwrDbParametersRequest.limit,
                "sortBy": summarizeAwrDbParametersRequest.sortBy,
                "sortOrder": summarizeAwrDbParametersRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDbParametersRequest.opcRequestId,
                "opc-retry-token": summarizeAwrDbParametersRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDbParametersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameters",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbParameterCollection",
                    bodyModel: model.AwrDbParameterCollection,
                    type: "model.AwrDbParameterCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR snapshot ranges that contain continuous snapshots, for the specified Managed Database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAwrDbSnapshotRangesRequest
     * @return SummarizeAwrDbSnapshotRangesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAwrDbSnapshotRanges.ts.html |here} to see how to use SummarizeAwrDbSnapshotRanges API.
     */
    summarizeAwrDbSnapshotRanges(summarizeAwrDbSnapshotRangesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbSnapshotRanges.");
            const operationName = "summarizeAwrDbSnapshotRanges";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAwrDbSnapshotRanges";
            const pathParams = {
                "{managedDatabaseId}": summarizeAwrDbSnapshotRangesRequest.managedDatabaseId
            };
            const queryParams = {
                "name": summarizeAwrDbSnapshotRangesRequest.name,
                "timeGreaterThanOrEqualTo": summarizeAwrDbSnapshotRangesRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDbSnapshotRangesRequest.timeLessThanOrEqualTo,
                "page": summarizeAwrDbSnapshotRangesRequest.page,
                "limit": summarizeAwrDbSnapshotRangesRequest.limit,
                "sortBy": summarizeAwrDbSnapshotRangesRequest.sortBy,
                "sortOrder": summarizeAwrDbSnapshotRangesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDbSnapshotRangesRequest.opcRequestId,
                "opc-retry-token": summarizeAwrDbSnapshotRangesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDbSnapshotRangesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbSnapshotRanges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbSnapshotRangeCollection",
                    bodyModel: model.AwrDbSnapshotRangeCollection,
                    type: "model.AwrDbSnapshotRangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR SYSSTAT sample data for the specified database in AWR. The statistical data is summarized based on the Time dimension for each statistic.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAwrDbSysstatsRequest
     * @return SummarizeAwrDbSysstatsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAwrDbSysstats.ts.html |here} to see how to use SummarizeAwrDbSysstats API.
     */
    summarizeAwrDbSysstats(summarizeAwrDbSysstatsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbSysstats.");
            const operationName = "summarizeAwrDbSysstats";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAwrDbSysstats";
            const pathParams = {
                "{managedDatabaseId}": summarizeAwrDbSysstatsRequest.managedDatabaseId,
                "{awrDbId}": summarizeAwrDbSysstatsRequest.awrDbId
            };
            const queryParams = {
                "instNum": summarizeAwrDbSysstatsRequest.instNum,
                "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbSysstatsRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": summarizeAwrDbSysstatsRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDbSysstatsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDbSysstatsRequest.timeLessThanOrEqualTo,
                "name": summarizeAwrDbSysstatsRequest.name,
                "containerId": summarizeAwrDbSysstatsRequest.containerId,
                "page": summarizeAwrDbSysstatsRequest.page,
                "limit": summarizeAwrDbSysstatsRequest.limit,
                "sortBy": summarizeAwrDbSysstatsRequest.sortBy,
                "sortOrder": summarizeAwrDbSysstatsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDbSysstatsRequest.opcRequestId,
                "opc-retry-token": summarizeAwrDbSysstatsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDbSysstatsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbSysstats",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbSysstatCollection",
                    bodyModel: model.AwrDbSysstatCollection,
                    type: "model.AwrDbSysstatCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR top wait events.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAwrDbTopWaitEventsRequest
     * @return SummarizeAwrDbTopWaitEventsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAwrDbTopWaitEvents.ts.html |here} to see how to use SummarizeAwrDbTopWaitEvents API.
     */
    summarizeAwrDbTopWaitEvents(summarizeAwrDbTopWaitEventsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbTopWaitEvents.");
            const operationName = "summarizeAwrDbTopWaitEvents";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAwrDbTopWaitEvents";
            const pathParams = {
                "{managedDatabaseId}": summarizeAwrDbTopWaitEventsRequest.managedDatabaseId,
                "{awrDbId}": summarizeAwrDbTopWaitEventsRequest.awrDbId
            };
            const queryParams = {
                "instNum": summarizeAwrDbTopWaitEventsRequest.instNum,
                "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbTopWaitEventsRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": summarizeAwrDbTopWaitEventsRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDbTopWaitEventsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDbTopWaitEventsRequest.timeLessThanOrEqualTo,
                "sessionType": summarizeAwrDbTopWaitEventsRequest.sessionType,
                "containerId": summarizeAwrDbTopWaitEventsRequest.containerId,
                "topN": summarizeAwrDbTopWaitEventsRequest.topN,
                "sortBy": summarizeAwrDbTopWaitEventsRequest.sortBy,
                "sortOrder": summarizeAwrDbTopWaitEventsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDbTopWaitEventsRequest.opcRequestId,
                "opc-retry-token": summarizeAwrDbTopWaitEventsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDbTopWaitEventsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbTopWaitEvents",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbTopWaitEventCollection",
                    bodyModel: model.AwrDbTopWaitEventCollection,
                    type: "model.AwrDbTopWaitEventCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes AWR wait event data into value buckets and frequency, for the specified database in the AWR.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAwrDbWaitEventBucketsRequest
     * @return SummarizeAwrDbWaitEventBucketsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAwrDbWaitEventBuckets.ts.html |here} to see how to use SummarizeAwrDbWaitEventBuckets API.
     */
    summarizeAwrDbWaitEventBuckets(summarizeAwrDbWaitEventBucketsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbWaitEventBuckets.");
            const operationName = "summarizeAwrDbWaitEventBuckets";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAwrDbWaitEventBuckets";
            const pathParams = {
                "{managedDatabaseId}": summarizeAwrDbWaitEventBucketsRequest.managedDatabaseId,
                "{awrDbId}": summarizeAwrDbWaitEventBucketsRequest.awrDbId
            };
            const queryParams = {
                "instNum": summarizeAwrDbWaitEventBucketsRequest.instNum,
                "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbWaitEventBucketsRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": summarizeAwrDbWaitEventBucketsRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDbWaitEventBucketsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDbWaitEventBucketsRequest.timeLessThanOrEqualTo,
                "name": summarizeAwrDbWaitEventBucketsRequest.name,
                "numBucket": summarizeAwrDbWaitEventBucketsRequest.numBucket,
                "minValue": summarizeAwrDbWaitEventBucketsRequest.minValue,
                "maxValue": summarizeAwrDbWaitEventBucketsRequest.maxValue,
                "containerId": summarizeAwrDbWaitEventBucketsRequest.containerId,
                "page": summarizeAwrDbWaitEventBucketsRequest.page,
                "limit": summarizeAwrDbWaitEventBucketsRequest.limit,
                "sortBy": summarizeAwrDbWaitEventBucketsRequest.sortBy,
                "sortOrder": summarizeAwrDbWaitEventBucketsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDbWaitEventBucketsRequest.opcRequestId,
                "opc-retry-token": summarizeAwrDbWaitEventBucketsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDbWaitEventBucketsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbWaitEventBuckets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbWaitEventBucketCollection",
                    bodyModel: model.AwrDbWaitEventBucketCollection,
                    type: "model.AwrDbWaitEventBucketCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR wait event sample data for the specified database in the AWR. The event data is summarized based on the Time dimension for each event.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAwrDbWaitEventsRequest
     * @return SummarizeAwrDbWaitEventsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAwrDbWaitEvents.ts.html |here} to see how to use SummarizeAwrDbWaitEvents API.
     */
    summarizeAwrDbWaitEvents(summarizeAwrDbWaitEventsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbWaitEvents.");
            const operationName = "summarizeAwrDbWaitEvents";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAwrDbWaitEvents";
            const pathParams = {
                "{managedDatabaseId}": summarizeAwrDbWaitEventsRequest.managedDatabaseId,
                "{awrDbId}": summarizeAwrDbWaitEventsRequest.awrDbId
            };
            const queryParams = {
                "instNum": summarizeAwrDbWaitEventsRequest.instNum,
                "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbWaitEventsRequest.beginSnIdGreaterThanOrEqualTo,
                "endSnIdLessThanOrEqualTo": summarizeAwrDbWaitEventsRequest.endSnIdLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDbWaitEventsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDbWaitEventsRequest.timeLessThanOrEqualTo,
                "name": summarizeAwrDbWaitEventsRequest.name,
                "sessionType": summarizeAwrDbWaitEventsRequest.sessionType,
                "containerId": summarizeAwrDbWaitEventsRequest.containerId,
                "page": summarizeAwrDbWaitEventsRequest.page,
                "limit": summarizeAwrDbWaitEventsRequest.limit,
                "sortBy": summarizeAwrDbWaitEventsRequest.sortBy,
                "sortOrder": summarizeAwrDbWaitEventsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDbWaitEventsRequest.opcRequestId,
                "opc-retry-token": summarizeAwrDbWaitEventsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDbWaitEventsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbWaitEvents",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDbWaitEventCollection",
                    bodyModel: model.AwrDbWaitEventCollection,
                    type: "model.AwrDbWaitEventCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets metrics for the external ASM specified by `externalAsmId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExternalAsmMetricsRequest
     * @return SummarizeExternalAsmMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeExternalAsmMetrics.ts.html |here} to see how to use SummarizeExternalAsmMetrics API.
     */
    summarizeExternalAsmMetrics(summarizeExternalAsmMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeExternalAsmMetrics.");
            const operationName = "summarizeExternalAsmMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalAsm/SummarizeExternalAsmMetrics";
            const pathParams = {
                "{externalAsmId}": summarizeExternalAsmMetricsRequest.externalAsmId
            };
            const queryParams = {
                "page": summarizeExternalAsmMetricsRequest.page,
                "limit": summarizeExternalAsmMetricsRequest.limit,
                "startTime": summarizeExternalAsmMetricsRequest.startTime,
                "endTime": summarizeExternalAsmMetricsRequest.endTime,
                "filterByMetricNames": summarizeExternalAsmMetricsRequest.filterByMetricNames
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExternalAsmMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExternalAsmMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalAsms/{externalAsmId}/metrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "metricsAggregationRangeCollection",
                    bodyModel: model.MetricsAggregationRangeCollection,
                    type: "model.MetricsAggregationRangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets metrics for the external cluster specified by `externalClusterId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExternalClusterMetricsRequest
     * @return SummarizeExternalClusterMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeExternalClusterMetrics.ts.html |here} to see how to use SummarizeExternalClusterMetrics API.
     */
    summarizeExternalClusterMetrics(summarizeExternalClusterMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeExternalClusterMetrics.");
            const operationName = "summarizeExternalClusterMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalCluster/SummarizeExternalClusterMetrics";
            const pathParams = {
                "{externalClusterId}": summarizeExternalClusterMetricsRequest.externalClusterId
            };
            const queryParams = {
                "page": summarizeExternalClusterMetricsRequest.page,
                "limit": summarizeExternalClusterMetricsRequest.limit,
                "startTime": summarizeExternalClusterMetricsRequest.startTime,
                "endTime": summarizeExternalClusterMetricsRequest.endTime,
                "filterByMetricNames": summarizeExternalClusterMetricsRequest.filterByMetricNames
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExternalClusterMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExternalClusterMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalClusters/{externalClusterId}/metrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "metricsAggregationRangeCollection",
                    bodyModel: model.MetricsAggregationRangeCollection,
                    type: "model.MetricsAggregationRangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets metrics for the external DB node specified by `externalDbNodeId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExternalDbNodeMetricsRequest
     * @return SummarizeExternalDbNodeMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeExternalDbNodeMetrics.ts.html |here} to see how to use SummarizeExternalDbNodeMetrics API.
     */
    summarizeExternalDbNodeMetrics(summarizeExternalDbNodeMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeExternalDbNodeMetrics.");
            const operationName = "summarizeExternalDbNodeMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbNode/SummarizeExternalDbNodeMetrics";
            const pathParams = {
                "{externalDbNodeId}": summarizeExternalDbNodeMetricsRequest.externalDbNodeId
            };
            const queryParams = {
                "page": summarizeExternalDbNodeMetricsRequest.page,
                "limit": summarizeExternalDbNodeMetricsRequest.limit,
                "startTime": summarizeExternalDbNodeMetricsRequest.startTime,
                "endTime": summarizeExternalDbNodeMetricsRequest.endTime,
                "filterByMetricNames": summarizeExternalDbNodeMetricsRequest.filterByMetricNames
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExternalDbNodeMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExternalDbNodeMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbNodes/{externalDbNodeId}/metrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "metricsAggregationRangeCollection",
                    bodyModel: model.MetricsAggregationRangeCollection,
                    type: "model.MetricsAggregationRangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets availability metrics for the components present in the external DB system specified by `externalDbSystemId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExternalDbSystemAvailabilityMetricsRequest
     * @return SummarizeExternalDbSystemAvailabilityMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeExternalDbSystemAvailabilityMetrics.ts.html |here} to see how to use SummarizeExternalDbSystemAvailabilityMetrics API.
     */
    summarizeExternalDbSystemAvailabilityMetrics(summarizeExternalDbSystemAvailabilityMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeExternalDbSystemAvailabilityMetrics.");
            const operationName = "summarizeExternalDbSystemAvailabilityMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystem/SummarizeExternalDbSystemAvailabilityMetrics";
            const pathParams = {
                "{externalDbSystemId}": summarizeExternalDbSystemAvailabilityMetricsRequest.externalDbSystemId
            };
            const queryParams = {
                "page": summarizeExternalDbSystemAvailabilityMetricsRequest.page,
                "limit": summarizeExternalDbSystemAvailabilityMetricsRequest.limit,
                "filterByComponentTypes": summarizeExternalDbSystemAvailabilityMetricsRequest.filterByComponentTypes,
                "startTime": summarizeExternalDbSystemAvailabilityMetricsRequest.startTime,
                "endTime": summarizeExternalDbSystemAvailabilityMetricsRequest.endTime
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExternalDbSystemAvailabilityMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExternalDbSystemAvailabilityMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystems/{externalDbSystemId}/availabilityMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "metricsAggregationRangeCollection",
                    bodyModel: model.MetricsAggregationRangeCollection,
                    type: "model.MetricsAggregationRangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets metrics for the external listener specified by `externalListenerId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExternalListenerMetricsRequest
     * @return SummarizeExternalListenerMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeExternalListenerMetrics.ts.html |here} to see how to use SummarizeExternalListenerMetrics API.
     */
    summarizeExternalListenerMetrics(summarizeExternalListenerMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeExternalListenerMetrics.");
            const operationName = "summarizeExternalListenerMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalListener/SummarizeExternalListenerMetrics";
            const pathParams = {
                "{externalListenerId}": summarizeExternalListenerMetricsRequest.externalListenerId
            };
            const queryParams = {
                "page": summarizeExternalListenerMetricsRequest.page,
                "limit": summarizeExternalListenerMetricsRequest.limit,
                "startTime": summarizeExternalListenerMetricsRequest.startTime,
                "endTime": summarizeExternalListenerMetricsRequest.endTime,
                "filterByMetricNames": summarizeExternalListenerMetricsRequest.filterByMetricNames
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExternalListenerMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExternalListenerMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalListeners/{externalListenerId}/metrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "metricsAggregationRangeCollection",
                    bodyModel: model.MetricsAggregationRangeCollection,
                    type: "model.MetricsAggregationRangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the number of job executions grouped by status for a job, Managed Database, or Database Group in a specific compartment. Only one of the parameters, jobId, managedDatabaseId, or managedDatabaseGroupId should be provided.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeJobExecutionsStatusesRequest
     * @return SummarizeJobExecutionsStatusesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeJobExecutionsStatuses.ts.html |here} to see how to use SummarizeJobExecutionsStatuses API.
     */
    summarizeJobExecutionsStatuses(summarizeJobExecutionsStatusesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeJobExecutionsStatuses.");
            const operationName = "summarizeJobExecutionsStatuses";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/JobExecutionsStatusSummaryCollection/SummarizeJobExecutionsStatuses";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeJobExecutionsStatusesRequest.compartmentId,
                "id": summarizeJobExecutionsStatusesRequest.id,
                "managedDatabaseGroupId": summarizeJobExecutionsStatusesRequest.managedDatabaseGroupId,
                "managedDatabaseId": summarizeJobExecutionsStatusesRequest.managedDatabaseId,
                "startTime": summarizeJobExecutionsStatusesRequest.startTime,
                "endTime": summarizeJobExecutionsStatusesRequest.endTime,
                "name": summarizeJobExecutionsStatusesRequest.name,
                "sortBy": summarizeJobExecutionsStatusesRequest.sortBy,
                "sortOrder": summarizeJobExecutionsStatusesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeJobExecutionsStatusesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeJobExecutionsStatusesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobExecutionsStatus",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobExecutionsStatusSummaryCollection",
                    bodyModel: model.JobExecutionsStatusSummaryCollection,
                    type: "model.JobExecutionsStatusSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the availability metrics related to managed database for the Oracle
     * database specified by managedDatabaseId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeManagedDatabaseAvailabilityMetricsRequest
     * @return SummarizeManagedDatabaseAvailabilityMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeManagedDatabaseAvailabilityMetrics.ts.html |here} to see how to use SummarizeManagedDatabaseAvailabilityMetrics API.
     */
    summarizeManagedDatabaseAvailabilityMetrics(summarizeManagedDatabaseAvailabilityMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#summarizeManagedDatabaseAvailabilityMetrics.");
            const operationName = "summarizeManagedDatabaseAvailabilityMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeManagedDatabaseAvailabilityMetrics";
            const pathParams = {
                "{managedDatabaseId}": summarizeManagedDatabaseAvailabilityMetricsRequest.managedDatabaseId
            };
            const queryParams = {
                "page": summarizeManagedDatabaseAvailabilityMetricsRequest.page,
                "limit": summarizeManagedDatabaseAvailabilityMetricsRequest.limit,
                "startTime": summarizeManagedDatabaseAvailabilityMetricsRequest.startTime,
                "endTime": summarizeManagedDatabaseAvailabilityMetricsRequest.endTime
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeManagedDatabaseAvailabilityMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeManagedDatabaseAvailabilityMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/availabilityMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "metricsAggregationRangeCollection",
                    bodyModel: model.MetricsAggregationRangeCollection,
                    type: "model.MetricsAggregationRangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Tests the preferred credential.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param TestPreferredCredentialRequest
     * @return TestPreferredCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/TestPreferredCredential.ts.html |here} to see how to use TestPreferredCredential API.
     */
    testPreferredCredential(testPreferredCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#testPreferredCredential.");
            const operationName = "testPreferredCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/PreferredCredential/TestPreferredCredential";
            const pathParams = {
                "{managedDatabaseId}": testPreferredCredentialRequest.managedDatabaseId,
                "{credentialName}": testPreferredCredentialRequest.credentialName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": testPreferredCredentialRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, testPreferredCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/preferredCredentials/{credentialName}/actions/test",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(testPreferredCredentialRequest.testPreferredCredentialDetails, "TestPreferredCredentialDetails", model.TestPreferredCredentialDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "testPreferredCredentialStatus",
                    bodyModel: model.TestPreferredCredentialStatus,
                    type: "model.TestPreferredCredentialStatus",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of a specific Database Management private endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDbManagementPrivateEndpointRequest
     * @return UpdateDbManagementPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateDbManagementPrivateEndpoint.ts.html |here} to see how to use UpdateDbManagementPrivateEndpoint API.
     */
    updateDbManagementPrivateEndpoint(updateDbManagementPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateDbManagementPrivateEndpoint.");
            const operationName = "updateDbManagementPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/DbManagementPrivateEndpoint/UpdateDbManagementPrivateEndpoint";
            const pathParams = {
                "{dbManagementPrivateEndpointId}": updateDbManagementPrivateEndpointRequest.dbManagementPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateDbManagementPrivateEndpointRequest.opcRequestId,
                "if-match": updateDbManagementPrivateEndpointRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDbManagementPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbManagementPrivateEndpoints/{dbManagementPrivateEndpointId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDbManagementPrivateEndpointRequest.updateDbManagementPrivateEndpointDetails, "UpdateDbManagementPrivateEndpointDetails", model.UpdateDbManagementPrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dbManagementPrivateEndpoint",
                    bodyModel: model.DbManagementPrivateEndpoint,
                    type: "model.DbManagementPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the external ASM specified by `externalAsmId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExternalAsmRequest
     * @return UpdateExternalAsmResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateExternalAsm.ts.html |here} to see how to use UpdateExternalAsm API.
     */
    updateExternalAsm(updateExternalAsmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateExternalAsm.");
            const operationName = "updateExternalAsm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalAsm/UpdateExternalAsm";
            const pathParams = {
                "{externalAsmId}": updateExternalAsmRequest.externalAsmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateExternalAsmRequest.opcRequestId,
                "if-match": updateExternalAsmRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExternalAsmRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalAsms/{externalAsmId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExternalAsmRequest.updateExternalAsmDetails, "UpdateExternalAsmDetails", model.UpdateExternalAsmDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the external cluster specified by `externalClusterId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExternalClusterRequest
     * @return UpdateExternalClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateExternalCluster.ts.html |here} to see how to use UpdateExternalCluster API.
     */
    updateExternalCluster(updateExternalClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateExternalCluster.");
            const operationName = "updateExternalCluster";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalCluster/UpdateExternalCluster";
            const pathParams = {
                "{externalClusterId}": updateExternalClusterRequest.externalClusterId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateExternalClusterRequest.opcRequestId,
                "if-match": updateExternalClusterRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExternalClusterRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalClusters/{externalClusterId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExternalClusterRequest.updateExternalClusterDetails, "UpdateExternalClusterDetails", model.UpdateExternalClusterDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the external cluster instance specified by `externalClusterInstanceId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExternalClusterInstanceRequest
     * @return UpdateExternalClusterInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateExternalClusterInstance.ts.html |here} to see how to use UpdateExternalClusterInstance API.
     */
    updateExternalClusterInstance(updateExternalClusterInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateExternalClusterInstance.");
            const operationName = "updateExternalClusterInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalClusterInstance/UpdateExternalClusterInstance";
            const pathParams = {
                "{externalClusterInstanceId}": updateExternalClusterInstanceRequest.externalClusterInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateExternalClusterInstanceRequest.opcRequestId,
                "if-match": updateExternalClusterInstanceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExternalClusterInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalClusterInstances/{externalClusterInstanceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExternalClusterInstanceRequest.updateExternalClusterInstanceDetails, "UpdateExternalClusterInstanceDetails", model.UpdateExternalClusterInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the external DB node specified by `externalDbNodeId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExternalDbNodeRequest
     * @return UpdateExternalDbNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateExternalDbNode.ts.html |here} to see how to use UpdateExternalDbNode API.
     */
    updateExternalDbNode(updateExternalDbNodeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateExternalDbNode.");
            const operationName = "updateExternalDbNode";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbNode/UpdateExternalDbNode";
            const pathParams = {
                "{externalDbNodeId}": updateExternalDbNodeRequest.externalDbNodeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateExternalDbNodeRequest.opcRequestId,
                "if-match": updateExternalDbNodeRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExternalDbNodeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbNodes/{externalDbNodeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExternalDbNodeRequest.updateExternalDbNodeDetails, "UpdateExternalDbNodeDetails", model.UpdateExternalDbNodeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the external DB system specified by `externalDbSystemId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExternalDbSystemRequest
     * @return UpdateExternalDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateExternalDbSystem.ts.html |here} to see how to use UpdateExternalDbSystem API.
     */
    updateExternalDbSystem(updateExternalDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateExternalDbSystem.");
            const operationName = "updateExternalDbSystem";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystem/UpdateExternalDbSystem";
            const pathParams = {
                "{externalDbSystemId}": updateExternalDbSystemRequest.externalDbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateExternalDbSystemRequest.opcRequestId,
                "if-match": updateExternalDbSystemRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExternalDbSystemRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystems/{externalDbSystemId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExternalDbSystemRequest.updateExternalDbSystemDetails, "UpdateExternalDbSystemDetails", model.UpdateExternalDbSystemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystem",
                    bodyModel: model.ExternalDbSystem,
                    type: "model.ExternalDbSystem",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the external connector specified by `externalDbSystemConnectorId`.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExternalDbSystemConnectorRequest
     * @return UpdateExternalDbSystemConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateExternalDbSystemConnector.ts.html |here} to see how to use UpdateExternalDbSystemConnector API.
     */
    updateExternalDbSystemConnector(updateExternalDbSystemConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateExternalDbSystemConnector.");
            const operationName = "updateExternalDbSystemConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemConnector/UpdateExternalDbSystemConnector";
            const pathParams = {
                "{externalDbSystemConnectorId}": updateExternalDbSystemConnectorRequest.externalDbSystemConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateExternalDbSystemConnectorRequest.ifMatch,
                "opc-request-id": updateExternalDbSystemConnectorRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExternalDbSystemConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemConnectors/{externalDbSystemConnectorId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExternalDbSystemConnectorRequest.updateExternalDbSystemConnectorDetails, "UpdateExternalDbSystemConnectorDetails", model.UpdateExternalDbSystemConnectorDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the external DB system discovery specified by `externalDbSystemDiscoveryId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExternalDbSystemDiscoveryRequest
     * @return UpdateExternalDbSystemDiscoveryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateExternalDbSystemDiscovery.ts.html |here} to see how to use UpdateExternalDbSystemDiscovery API.
     */
    updateExternalDbSystemDiscovery(updateExternalDbSystemDiscoveryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateExternalDbSystemDiscovery.");
            const operationName = "updateExternalDbSystemDiscovery";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalDbSystemDiscovery/UpdateExternalDbSystemDiscovery";
            const pathParams = {
                "{externalDbSystemDiscoveryId}": updateExternalDbSystemDiscoveryRequest.externalDbSystemDiscoveryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateExternalDbSystemDiscoveryRequest.opcRequestId,
                "if-match": updateExternalDbSystemDiscoveryRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExternalDbSystemDiscoveryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalDbSystemDiscoveries/{externalDbSystemDiscoveryId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExternalDbSystemDiscoveryRequest.updateExternalDbSystemDiscoveryDetails, "UpdateExternalDbSystemDiscoveryDetails", model.UpdateExternalDbSystemDiscoveryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalDbSystemDiscovery",
                    bodyModel: model.ExternalDbSystemDiscovery,
                    type: "model.ExternalDbSystemDiscovery",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the details for the the Exadata infrastructure specified by externalExadataInfrastructureId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateExternalExadataInfrastructureRequest
     * @return UpdateExternalExadataInfrastructureResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateExternalExadataInfrastructure.ts.html |here} to see how to use UpdateExternalExadataInfrastructure API.
     */
    updateExternalExadataInfrastructure(updateExternalExadataInfrastructureRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateExternalExadataInfrastructure.");
            const operationName = "updateExternalExadataInfrastructure";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataInfrastructure/UpdateExternalExadataInfrastructure";
            const pathParams = {
                "{externalExadataInfrastructureId}": updateExternalExadataInfrastructureRequest.externalExadataInfrastructureId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateExternalExadataInfrastructureRequest.opcRequestId,
                "if-match": updateExternalExadataInfrastructureRequest.ifMatch,
                "opc-retry-token": updateExternalExadataInfrastructureRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExternalExadataInfrastructureRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataInfrastructures/{externalExadataInfrastructureId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExternalExadataInfrastructureRequest.updateExternalExadataInfrastructureDetails, "UpdateExternalExadataInfrastructureDetails", model.UpdateExternalExadataInfrastructureDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataInfrastructure",
                    bodyModel: model.ExternalExadataInfrastructure,
                    type: "model.ExternalExadataInfrastructure",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the details for the storage server connector specified by exadataStorageConnectorId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExternalExadataStorageConnectorRequest
     * @return UpdateExternalExadataStorageConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateExternalExadataStorageConnector.ts.html |here} to see how to use UpdateExternalExadataStorageConnector API.
     */
    updateExternalExadataStorageConnector(updateExternalExadataStorageConnectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateExternalExadataStorageConnector.");
            const operationName = "updateExternalExadataStorageConnector";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalExadataStorageConnector/UpdateExternalExadataStorageConnector";
            const pathParams = {
                "{externalExadataStorageConnectorId}": updateExternalExadataStorageConnectorRequest.externalExadataStorageConnectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateExternalExadataStorageConnectorRequest.ifMatch,
                "opc-request-id": updateExternalExadataStorageConnectorRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExternalExadataStorageConnectorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalExadataStorageConnectors/{externalExadataStorageConnectorId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExternalExadataStorageConnectorRequest.updateExternalExadataStorageConnectorDetails, "UpdateExternalExadataStorageConnectorDetails", model.UpdateExternalExadataStorageConnectorDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "externalExadataStorageConnector",
                    bodyModel: model.ExternalExadataStorageConnector,
                    type: "model.ExternalExadataStorageConnector",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the external listener specified by `externalListenerId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExternalListenerRequest
     * @return UpdateExternalListenerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateExternalListener.ts.html |here} to see how to use UpdateExternalListener API.
     */
    updateExternalListener(updateExternalListenerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateExternalListener.");
            const operationName = "updateExternalListener";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ExternalListener/UpdateExternalListener";
            const pathParams = {
                "{externalListenerId}": updateExternalListenerRequest.externalListenerId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateExternalListenerRequest.opcRequestId,
                "if-match": updateExternalListenerRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExternalListenerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/externalListeners/{externalListenerId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExternalListenerRequest.updateExternalListenerDetails, "UpdateExternalListenerDetails", model.UpdateExternalListenerDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the details for the recurring scheduled job specified by jobId. Note that non-recurring (one time) jobs cannot be updated.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateJobRequest
     * @return UpdateJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateJob.ts.html |here} to see how to use UpdateJob API.
     */
    updateJob(updateJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateJob.");
            const operationName = "updateJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Job/UpdateJob";
            const pathParams = {
                "{jobId}": updateJobRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateJobRequest.opcRequestId,
                "if-match": updateJobRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateJobRequest.updateJobDetails, "UpdateJobDetails", model.UpdateJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: model.Job,
                    type: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the Managed Database Group specified by managedDatabaseGroupId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateManagedDatabaseGroupRequest
     * @return UpdateManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateManagedDatabaseGroup.ts.html |here} to see how to use UpdateManagedDatabaseGroup API.
     */
    updateManagedDatabaseGroup(updateManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateManagedDatabaseGroup.");
            const operationName = "updateManagedDatabaseGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabaseGroup/UpdateManagedDatabaseGroup";
            const pathParams = {
                "{managedDatabaseGroupId}": updateManagedDatabaseGroupRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateManagedDatabaseGroupRequest.ifMatch,
                "opc-request-id": updateManagedDatabaseGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateManagedDatabaseGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateManagedDatabaseGroupRequest.updateManagedDatabaseGroupDetails, "UpdateManagedDatabaseGroupDetails", model.UpdateManagedDatabaseGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabaseGroup",
                    bodyModel: model.ManagedDatabaseGroup,
                    type: "model.ManagedDatabaseGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the preferred credential based on the credentialName.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdatePreferredCredentialRequest
     * @return UpdatePreferredCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdatePreferredCredential.ts.html |here} to see how to use UpdatePreferredCredential API.
     */
    updatePreferredCredential(updatePreferredCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updatePreferredCredential.");
            const operationName = "updatePreferredCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/PreferredCredential/UpdatePreferredCredential";
            const pathParams = {
                "{managedDatabaseId}": updatePreferredCredentialRequest.managedDatabaseId,
                "{credentialName}": updatePreferredCredentialRequest.credentialName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updatePreferredCredentialRequest.opcRequestId,
                "if-match": updatePreferredCredentialRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updatePreferredCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/preferredCredentials/{credentialName}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updatePreferredCredentialRequest.updatePreferredCredentialDetails, "UpdatePreferredCredentialDetails", model.UpdatePreferredCredentialDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "preferredCredential",
                    bodyModel: model.PreferredCredential,
                    type: "model.PreferredCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the attributes of the tablespace specified by tablespaceName within the Managed Database specified by managedDatabaseId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateTablespaceRequest
     * @return UpdateTablespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/UpdateTablespace.ts.html |here} to see how to use UpdateTablespace API.
     */
    updateTablespace(updateTablespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateTablespace.");
            const operationName = "updateTablespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/Tablespace/UpdateTablespace";
            const pathParams = {
                "{managedDatabaseId}": updateTablespaceRequest.managedDatabaseId,
                "{tablespaceName}": updateTablespaceRequest.tablespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateTablespaceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateTablespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTablespaceRequest.updateTablespaceDetails, "UpdateTablespaceDetails", model.UpdateTablespaceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tablespace",
                    bodyModel: model.Tablespace,
                    type: "model.Tablespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DbManagementClient = DbManagementClient;
DbManagementClient.serviceEndpointTemplate = "https://dbmgmt.{region}.oci.{secondLevelDomain}";
DbManagementClient.endpointServiceName = "";
var DiagnosabilityApiKeys;
(function (DiagnosabilityApiKeys) {
})(DiagnosabilityApiKeys = exports.DiagnosabilityApiKeys || (exports.DiagnosabilityApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class DiagnosabilityClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = false;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this.targetService = "Diagnosability";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20201101";
        if (this.logger)
            this.logger.info(`DiagnosabilityClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DiagnosabilityClient.serviceEndpointTemplate, this._region, DiagnosabilityClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DiagnosabilityClient.serviceEndpointTemplate, this._regionId, DiagnosabilityClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DiagnosabilityClient.serviceEndpointTemplate, region, DiagnosabilityClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DiagnosabilityClient.serviceEndpointTemplate, regionId, DiagnosabilityClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Lists the alert logs for the specified Managed Database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAlertLogsRequest
     * @return ListAlertLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListAlertLogs.ts.html |here} to see how to use ListAlertLogs API.
     */
    listAlertLogs(listAlertLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiagnosabilityClient#listAlertLogs.");
            const operationName = "listAlertLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListAlertLogs";
            const pathParams = {
                "{managedDatabaseId}": listAlertLogsRequest.managedDatabaseId
            };
            const queryParams = {
                "timeGreaterThanOrEqualTo": listAlertLogsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": listAlertLogsRequest.timeLessThanOrEqualTo,
                "levelFilter": listAlertLogsRequest.levelFilter,
                "typeFilter": listAlertLogsRequest.typeFilter,
                "logSearchText": listAlertLogsRequest.logSearchText,
                "isRegularExpression": listAlertLogsRequest.isRegularExpression,
                "sortBy": listAlertLogsRequest.sortBy,
                "sortOrder": listAlertLogsRequest.sortOrder,
                "page": listAlertLogsRequest.page,
                "limit": listAlertLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAlertLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAlertLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/alertLogs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alertLogCollection",
                    bodyModel: model.AlertLogCollection,
                    type: "model.AlertLogCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the attention logs for the specified Managed Database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAttentionLogsRequest
     * @return ListAttentionLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListAttentionLogs.ts.html |here} to see how to use ListAttentionLogs API.
     */
    listAttentionLogs(listAttentionLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiagnosabilityClient#listAttentionLogs.");
            const operationName = "listAttentionLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListAttentionLogs";
            const pathParams = {
                "{managedDatabaseId}": listAttentionLogsRequest.managedDatabaseId
            };
            const queryParams = {
                "timeGreaterThanOrEqualTo": listAttentionLogsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": listAttentionLogsRequest.timeLessThanOrEqualTo,
                "urgencyFilter": listAttentionLogsRequest.urgencyFilter,
                "typeFilter": listAttentionLogsRequest.typeFilter,
                "logSearchText": listAttentionLogsRequest.logSearchText,
                "isRegularExpression": listAttentionLogsRequest.isRegularExpression,
                "sortBy": listAttentionLogsRequest.sortBy,
                "sortOrder": listAttentionLogsRequest.sortOrder,
                "page": listAttentionLogsRequest.page,
                "limit": listAttentionLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAttentionLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAttentionLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/attentionLogs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "attentionLogCollection",
                    bodyModel: model.AttentionLogCollection,
                    type: "model.AttentionLogCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the counts of alert logs for the specified Managed Database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAlertLogCountsRequest
     * @return SummarizeAlertLogCountsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAlertLogCounts.ts.html |here} to see how to use SummarizeAlertLogCounts API.
     */
    summarizeAlertLogCounts(summarizeAlertLogCountsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiagnosabilityClient#summarizeAlertLogCounts.");
            const operationName = "summarizeAlertLogCounts";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAlertLogCounts";
            const pathParams = {
                "{managedDatabaseId}": summarizeAlertLogCountsRequest.managedDatabaseId
            };
            const queryParams = {
                "timeGreaterThanOrEqualTo": summarizeAlertLogCountsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAlertLogCountsRequest.timeLessThanOrEqualTo,
                "levelFilter": summarizeAlertLogCountsRequest.levelFilter,
                "groupBy": summarizeAlertLogCountsRequest.groupBy,
                "typeFilter": summarizeAlertLogCountsRequest.typeFilter,
                "logSearchText": summarizeAlertLogCountsRequest.logSearchText,
                "isRegularExpression": summarizeAlertLogCountsRequest.isRegularExpression,
                "page": summarizeAlertLogCountsRequest.page,
                "limit": summarizeAlertLogCountsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAlertLogCountsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAlertLogCountsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/alertLogCounts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alertLogCountsCollection",
                    bodyModel: model.AlertLogCountsCollection,
                    type: "model.AlertLogCountsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the counts of attention logs for the specified Managed Database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAttentionLogCountsRequest
     * @return SummarizeAttentionLogCountsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/SummarizeAttentionLogCounts.ts.html |here} to see how to use SummarizeAttentionLogCounts API.
     */
    summarizeAttentionLogCounts(summarizeAttentionLogCountsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiagnosabilityClient#summarizeAttentionLogCounts.");
            const operationName = "summarizeAttentionLogCounts";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/SummarizeAttentionLogCounts";
            const pathParams = {
                "{managedDatabaseId}": summarizeAttentionLogCountsRequest.managedDatabaseId
            };
            const queryParams = {
                "timeGreaterThanOrEqualTo": summarizeAttentionLogCountsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAttentionLogCountsRequest.timeLessThanOrEqualTo,
                "urgencyFilter": summarizeAttentionLogCountsRequest.urgencyFilter,
                "groupBy": summarizeAttentionLogCountsRequest.groupBy,
                "typeFilter": summarizeAttentionLogCountsRequest.typeFilter,
                "logSearchText": summarizeAttentionLogCountsRequest.logSearchText,
                "isRegularExpression": summarizeAttentionLogCountsRequest.isRegularExpression,
                "page": summarizeAttentionLogCountsRequest.page,
                "limit": summarizeAttentionLogCountsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAttentionLogCountsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAttentionLogCountsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/attentionLogCounts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "attentionLogCountsCollection",
                    bodyModel: model.AttentionLogCountsCollection,
                    type: "model.AttentionLogCountsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DiagnosabilityClient = DiagnosabilityClient;
DiagnosabilityClient.serviceEndpointTemplate = "https://dbmgmt.{region}.oci.{secondLevelDomain}";
DiagnosabilityClient.endpointServiceName = "";
var SqlTuningApiKeys;
(function (SqlTuningApiKeys) {
})(SqlTuningApiKeys = exports.SqlTuningApiKeys || (exports.SqlTuningApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class SqlTuningClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = false;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this.targetService = "SqlTuning";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20201101";
        if (this.logger)
            this.logger.info(`SqlTuningClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(SqlTuningClient.serviceEndpointTemplate, this._region, SqlTuningClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(SqlTuningClient.serviceEndpointTemplate, this._regionId, SqlTuningClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(SqlTuningClient.serviceEndpointTemplate, region, SqlTuningClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(SqlTuningClient.serviceEndpointTemplate, regionId, SqlTuningClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Clones and runs a SQL tuning task in the database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CloneSqlTuningTaskRequest
     * @return CloneSqlTuningTaskResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/CloneSqlTuningTask.ts.html |here} to see how to use CloneSqlTuningTask API.
     */
    cloneSqlTuningTask(cloneSqlTuningTaskRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SqlTuningClient#cloneSqlTuningTask.");
            const operationName = "cloneSqlTuningTask";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/CloneSqlTuningTask";
            const pathParams = {
                "{managedDatabaseId}": cloneSqlTuningTaskRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": cloneSqlTuningTaskRequest.opcRequestId,
                "opc-retry-token": cloneSqlTuningTaskRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cloneSqlTuningTaskRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/actions/cloneSqlTuningTask",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(cloneSqlTuningTaskRequest.cloneSqlTuningTaskDetails, "CloneSqlTuningTaskDetails", model.CloneSqlTuningTaskDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlTuningTaskReturn",
                    bodyModel: model.SqlTuningTaskReturn,
                    type: "model.SqlTuningTaskReturn",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Drops a SQL tuning task and its related results from the database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DropSqlTuningTaskRequest
     * @return DropSqlTuningTaskResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/DropSqlTuningTask.ts.html |here} to see how to use DropSqlTuningTask API.
     */
    dropSqlTuningTask(dropSqlTuningTaskRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SqlTuningClient#dropSqlTuningTask.");
            const operationName = "dropSqlTuningTask";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/DropSqlTuningTask";
            const pathParams = {
                "{managedDatabaseId}": dropSqlTuningTaskRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": dropSqlTuningTaskRequest.opcRequestId,
                "opc-retry-token": dropSqlTuningTaskRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, dropSqlTuningTaskRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/actions/dropSqlTuningTask",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(dropSqlTuningTaskRequest.dropSqlTuningTaskDetails, "DropSqlTuningTaskDetails", model.DropSqlTuningTaskDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a comparison of the existing SQL execution plan and a new plan.
     * A SQL tuning task may suggest a new execution plan for a SQL,
     * and this API retrieves the comparison report of the statistics of the two plans.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetExecutionPlanStatsComparisionRequest
     * @return GetExecutionPlanStatsComparisionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetExecutionPlanStatsComparision.ts.html |here} to see how to use GetExecutionPlanStatsComparision API.
     */
    getExecutionPlanStatsComparision(getExecutionPlanStatsComparisionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SqlTuningClient#getExecutionPlanStatsComparision.");
            const operationName = "getExecutionPlanStatsComparision";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/GetExecutionPlanStatsComparision";
            const pathParams = {
                "{managedDatabaseId}": getExecutionPlanStatsComparisionRequest.managedDatabaseId,
                "{sqlTuningAdvisorTaskId}": getExecutionPlanStatsComparisionRequest.sqlTuningAdvisorTaskId
            };
            const queryParams = {
                "sqlObjectId": getExecutionPlanStatsComparisionRequest.sqlObjectId,
                "executionId": getExecutionPlanStatsComparisionRequest.executionId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExecutionPlanStatsComparisionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExecutionPlanStatsComparisionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks/{sqlTuningAdvisorTaskId}/executionPlanStatsComparision",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "executionPlanStatsComparision",
                    bodyModel: model.ExecutionPlanStatsComparision,
                    type: "model.ExecutionPlanStatsComparision",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a SQL execution plan for the SQL being tuned.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSqlExecutionPlanRequest
     * @return GetSqlExecutionPlanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetSqlExecutionPlan.ts.html |here} to see how to use GetSqlExecutionPlan API.
     */
    getSqlExecutionPlan(getSqlExecutionPlanRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SqlTuningClient#getSqlExecutionPlan.");
            const operationName = "getSqlExecutionPlan";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/GetSqlExecutionPlan";
            const pathParams = {
                "{managedDatabaseId}": getSqlExecutionPlanRequest.managedDatabaseId,
                "{sqlTuningAdvisorTaskId}": getSqlExecutionPlanRequest.sqlTuningAdvisorTaskId
            };
            const queryParams = {
                "sqlObjectId": getSqlExecutionPlanRequest.sqlObjectId,
                "attribute": getSqlExecutionPlanRequest.attribute
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSqlExecutionPlanRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSqlExecutionPlanRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks/{sqlTuningAdvisorTaskId}/sqlExecutionPlan",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlTuningAdvisorTaskSqlExecutionPlan",
                    bodyModel: model.SqlTuningAdvisorTaskSqlExecutionPlan,
                    type: "model.SqlTuningAdvisorTaskSqlExecutionPlan",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the summary report for the specified SQL Tuning Advisor task.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSqlTuningAdvisorTaskSummaryReportRequest
     * @return GetSqlTuningAdvisorTaskSummaryReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/GetSqlTuningAdvisorTaskSummaryReport.ts.html |here} to see how to use GetSqlTuningAdvisorTaskSummaryReport API.
     */
    getSqlTuningAdvisorTaskSummaryReport(getSqlTuningAdvisorTaskSummaryReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SqlTuningClient#getSqlTuningAdvisorTaskSummaryReport.");
            const operationName = "getSqlTuningAdvisorTaskSummaryReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/GetSqlTuningAdvisorTaskSummaryReport";
            const pathParams = {
                "{managedDatabaseId}": getSqlTuningAdvisorTaskSummaryReportRequest.managedDatabaseId,
                "{sqlTuningAdvisorTaskId}": getSqlTuningAdvisorTaskSummaryReportRequest.sqlTuningAdvisorTaskId
            };
            const queryParams = {
                "searchPeriod": getSqlTuningAdvisorTaskSummaryReportRequest.searchPeriod,
                "timeGreaterThanOrEqualTo": getSqlTuningAdvisorTaskSummaryReportRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": getSqlTuningAdvisorTaskSummaryReportRequest.timeLessThanOrEqualTo,
                "beginExecIdGreaterThanOrEqualTo": getSqlTuningAdvisorTaskSummaryReportRequest.beginExecIdGreaterThanOrEqualTo,
                "endExecIdLessThanOrEqualTo": getSqlTuningAdvisorTaskSummaryReportRequest.endExecIdLessThanOrEqualTo
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSqlTuningAdvisorTaskSummaryReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSqlTuningAdvisorTaskSummaryReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks/{sqlTuningAdvisorTaskId}/summaryReport",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlTuningAdvisorTaskSummaryReport",
                    bodyModel: model.SqlTuningAdvisorTaskSummaryReport,
                    type: "model.SqlTuningAdvisorTaskSummaryReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets an array of the details of the findings that match specific filters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSqlTuningAdvisorTaskFindingsRequest
     * @return ListSqlTuningAdvisorTaskFindingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListSqlTuningAdvisorTaskFindings.ts.html |here} to see how to use ListSqlTuningAdvisorTaskFindings API.
     */
    listSqlTuningAdvisorTaskFindings(listSqlTuningAdvisorTaskFindingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SqlTuningClient#listSqlTuningAdvisorTaskFindings.");
            const operationName = "listSqlTuningAdvisorTaskFindings";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListSqlTuningAdvisorTaskFindings";
            const pathParams = {
                "{managedDatabaseId}": listSqlTuningAdvisorTaskFindingsRequest.managedDatabaseId,
                "{sqlTuningAdvisorTaskId}": listSqlTuningAdvisorTaskFindingsRequest.sqlTuningAdvisorTaskId
            };
            const queryParams = {
                "beginExecId": listSqlTuningAdvisorTaskFindingsRequest.beginExecId,
                "endExecId": listSqlTuningAdvisorTaskFindingsRequest.endExecId,
                "searchPeriod": listSqlTuningAdvisorTaskFindingsRequest.searchPeriod,
                "findingFilter": listSqlTuningAdvisorTaskFindingsRequest.findingFilter,
                "statsHashFilter": listSqlTuningAdvisorTaskFindingsRequest.statsHashFilter,
                "indexHashFilter": listSqlTuningAdvisorTaskFindingsRequest.indexHashFilter,
                "sortBy": listSqlTuningAdvisorTaskFindingsRequest.sortBy,
                "sortOrder": listSqlTuningAdvisorTaskFindingsRequest.sortOrder,
                "page": listSqlTuningAdvisorTaskFindingsRequest.page,
                "limit": listSqlTuningAdvisorTaskFindingsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSqlTuningAdvisorTaskFindingsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSqlTuningAdvisorTaskFindingsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks/{sqlTuningAdvisorTaskId}/findings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlTuningAdvisorTaskFindingCollection",
                    bodyModel: model.SqlTuningAdvisorTaskFindingCollection,
                    type: "model.SqlTuningAdvisorTaskFindingCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the findings and possible actions for a given object in a SQL tuning task.
     * The task ID and object ID are used to retrieve the findings and recommendations.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSqlTuningAdvisorTaskRecommendationsRequest
     * @return ListSqlTuningAdvisorTaskRecommendationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListSqlTuningAdvisorTaskRecommendations.ts.html |here} to see how to use ListSqlTuningAdvisorTaskRecommendations API.
     */
    listSqlTuningAdvisorTaskRecommendations(listSqlTuningAdvisorTaskRecommendationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SqlTuningClient#listSqlTuningAdvisorTaskRecommendations.");
            const operationName = "listSqlTuningAdvisorTaskRecommendations";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListSqlTuningAdvisorTaskRecommendations";
            const pathParams = {
                "{managedDatabaseId}": listSqlTuningAdvisorTaskRecommendationsRequest.managedDatabaseId,
                "{sqlTuningAdvisorTaskId}": listSqlTuningAdvisorTaskRecommendationsRequest.sqlTuningAdvisorTaskId
            };
            const queryParams = {
                "sqlObjectId": listSqlTuningAdvisorTaskRecommendationsRequest.sqlObjectId,
                "executionId": listSqlTuningAdvisorTaskRecommendationsRequest.executionId,
                "sortBy": listSqlTuningAdvisorTaskRecommendationsRequest.sortBy,
                "sortOrder": listSqlTuningAdvisorTaskRecommendationsRequest.sortOrder,
                "page": listSqlTuningAdvisorTaskRecommendationsRequest.page,
                "limit": listSqlTuningAdvisorTaskRecommendationsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSqlTuningAdvisorTaskRecommendationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSqlTuningAdvisorTaskRecommendationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks/{sqlTuningAdvisorTaskId}/recommendations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlTuningAdvisorTaskRecommendationCollection",
                    bodyModel: model.SqlTuningAdvisorTaskRecommendationCollection,
                    type: "model.SqlTuningAdvisorTaskRecommendationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the SQL Tuning Advisor tasks for the specified Managed Database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSqlTuningAdvisorTasksRequest
     * @return ListSqlTuningAdvisorTasksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListSqlTuningAdvisorTasks.ts.html |here} to see how to use ListSqlTuningAdvisorTasks API.
     */
    listSqlTuningAdvisorTasks(listSqlTuningAdvisorTasksRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SqlTuningClient#listSqlTuningAdvisorTasks.");
            const operationName = "listSqlTuningAdvisorTasks";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListSqlTuningAdvisorTasks";
            const pathParams = {
                "{managedDatabaseId}": listSqlTuningAdvisorTasksRequest.managedDatabaseId
            };
            const queryParams = {
                "name": listSqlTuningAdvisorTasksRequest.name,
                "status": listSqlTuningAdvisorTasksRequest.status,
                "timeGreaterThanOrEqualTo": listSqlTuningAdvisorTasksRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": listSqlTuningAdvisorTasksRequest.timeLessThanOrEqualTo,
                "page": listSqlTuningAdvisorTasksRequest.page,
                "limit": listSqlTuningAdvisorTasksRequest.limit,
                "sortBy": listSqlTuningAdvisorTasksRequest.sortBy,
                "sortOrder": listSqlTuningAdvisorTasksRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSqlTuningAdvisorTasksRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSqlTuningAdvisorTasksRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlTuningAdvisorTaskCollection",
                    bodyModel: model.SqlTuningAdvisorTaskCollection,
                    type: "model.SqlTuningAdvisorTaskCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the SQL tuning sets for the specified Managed Database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSqlTuningSetsRequest
     * @return ListSqlTuningSetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/ListSqlTuningSets.ts.html |here} to see how to use ListSqlTuningSets API.
     */
    listSqlTuningSets(listSqlTuningSetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SqlTuningClient#listSqlTuningSets.");
            const operationName = "listSqlTuningSets";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/ListSqlTuningSets";
            const pathParams = {
                "{managedDatabaseId}": listSqlTuningSetsRequest.managedDatabaseId
            };
            const queryParams = {
                "owner": listSqlTuningSetsRequest.owner,
                "nameContains": listSqlTuningSetsRequest.nameContains,
                "sortBy": listSqlTuningSetsRequest.sortBy,
                "sortOrder": listSqlTuningSetsRequest.sortOrder,
                "page": listSqlTuningSetsRequest.page,
                "limit": listSqlTuningSetsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSqlTuningSetsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSqlTuningSetsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/sqlTuningSets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlTuningSetCollection",
                    bodyModel: model.SqlTuningSetCollection,
                    type: "model.SqlTuningSetCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Starts a SQL tuning task for a given set of SQL statements from the active session history top SQL statements.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param StartSqlTuningTaskRequest
     * @return StartSqlTuningTaskResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/databasemanagement/StartSqlTuningTask.ts.html |here} to see how to use StartSqlTuningTask API.
     */
    startSqlTuningTask(startSqlTuningTaskRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SqlTuningClient#startSqlTuningTask.");
            const operationName = "startSqlTuningTask";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-management/20201101/ManagedDatabase/StartSqlTuningTask";
            const pathParams = {
                "{managedDatabaseId}": startSqlTuningTaskRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": startSqlTuningTaskRequest.opcRequestId,
                "opc-retry-token": startSqlTuningTaskRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, startSqlTuningTaskRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/actions/startSqlTuningTask",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(startSqlTuningTaskRequest.startSqlTuningTaskDetails, "StartSqlTuningTaskDetails", model.StartSqlTuningTaskDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlTuningTaskReturn",
                    bodyModel: model.SqlTuningTaskReturn,
                    type: "model.SqlTuningTaskReturn",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.SqlTuningClient = SqlTuningClient;
SqlTuningClient.serviceEndpointTemplate = "https://dbmgmt.{region}.oci.{secondLevelDomain}";
SqlTuningClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map