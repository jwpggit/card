"use strict";
/**
 * Vault Service Key Management API
 * API for managing and performing operations with keys and vaults. (For the API for managing secrets, see the Vault Service
Secret Management API. For the API for retrieving secrets, see the Vault Service Secret Retrieval API.)

 * OpenAPI spec version: release
 * Contact: sparta_kms_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KmsVaultClient = exports.KmsVaultApiKeys = exports.KmsManagementClient = exports.KmsManagementApiKeys = exports.KmsCryptoClient = exports.KmsCryptoApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const kmsmanagement_waiter_1 = require("./kmsmanagement-waiter");
const kmsvault_waiter_1 = require("./kmsvault-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var KmsCryptoApiKeys;
(function (KmsCryptoApiKeys) {
})(KmsCryptoApiKeys = exports.KmsCryptoApiKeys || (exports.KmsCryptoApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class KmsCryptoClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = false;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this.targetService = "KmsCrypto";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        if (this.logger)
            this.logger.info(`KmsCryptoClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
    }
    /**
     * Decrypts data using the given [DecryptDataDetails](https://docs.cloud.oracle.com/api/#/en/key/latest/datatypes/DecryptDataDetails) resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DecryptRequest
     * @return DecryptResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/Decrypt.ts.html |here} to see how to use Decrypt API.
     */
    decrypt(decryptRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsCryptoClient#decrypt.");
            const operationName = "decrypt";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": decryptRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, decryptRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/decrypt",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(decryptRequest.decryptDataDetails, "DecryptDataDetails", model.DecryptDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "decryptedData",
                    bodyModel: model.DecryptedData,
                    type: "model.DecryptedData",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Encrypts data using the given [EncryptDataDetails](https://docs.cloud.oracle.com/api/#/en/key/latest/datatypes/EncryptDataDetails) resource.
     * Plaintext included in the example request is a base64-encoded value of a UTF-8 string.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param EncryptRequest
     * @return EncryptResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/Encrypt.ts.html |here} to see how to use Encrypt API.
     */
    encrypt(encryptRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsCryptoClient#encrypt.");
            const operationName = "encrypt";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": encryptRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, encryptRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/encrypt",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(encryptRequest.encryptDataDetails, "EncryptDataDetails", model.EncryptDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "encryptedData",
                    bodyModel: model.EncryptedData,
                    type: "model.EncryptedData",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Exports a specific version of a master encryption key according to the details of the request. For their protection,
     * keys that you create and store on a hardware security module (HSM) can never leave the HSM. You can only export keys
     * stored on the server. For export, the key version is encrypted by an RSA public key that you provide.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ExportKeyRequest
     * @return ExportKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ExportKey.ts.html |here} to see how to use ExportKey API.
     */
    exportKey(exportKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsCryptoClient#exportKey.");
            const operationName = "exportKey";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, exportKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/exportKey",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(exportKeyRequest.exportKeyDetails, "ExportKeyDetails", model.ExportKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "exportedKeyData",
                    bodyModel: model.ExportedKeyData,
                    type: "model.ExportedKeyData",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Generates a key that you can use to encrypt or decrypt data.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GenerateDataEncryptionKeyRequest
     * @return GenerateDataEncryptionKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/GenerateDataEncryptionKey.ts.html |here} to see how to use GenerateDataEncryptionKey API.
     */
    generateDataEncryptionKey(generateDataEncryptionKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsCryptoClient#generateDataEncryptionKey.");
            const operationName = "generateDataEncryptionKey";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": generateDataEncryptionKeyRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateDataEncryptionKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/generateDataEncryptionKey",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(generateDataEncryptionKeyRequest.generateKeyDetails, "GenerateKeyDetails", model.GenerateKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "generatedKey",
                    bodyModel: model.GeneratedKey,
                    type: "model.GeneratedKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a digital signature for a message or message digest by using the private key of a public-private key pair,
     * also known as an asymmetric key. To verify the generated signature, you can use the [Verify](https://docs.cloud.oracle.com/api/#/en/key/latest/VerifiedData/Verify)
     * operation. Or, if you want to validate the signature outside of the service, you can do so by using the public key of the same asymmetric key.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SignRequest
     * @return SignResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/Sign.ts.html |here} to see how to use Sign API.
     */
    sign(signRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsCryptoClient#sign.");
            const operationName = "sign";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": signRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, signRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/sign",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(signRequest.signDataDetails, "SignDataDetails", model.SignDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "signedData",
                    bodyModel: model.SignedData,
                    type: "model.SignedData",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Verifies a digital signature that was generated by the [Sign](https://docs.cloud.oracle.com/api/#/en/key/latest/SignedData/Sign) operation
     * by using the public key of the same asymmetric key that was used to sign the data. If you want to validate the
     * digital signature outside of the service, you can do so by using the public key of the asymmetric key.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param VerifyRequest
     * @return VerifyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/Verify.ts.html |here} to see how to use Verify API.
     */
    verify(verifyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsCryptoClient#verify.");
            const operationName = "verify";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": verifyRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, verifyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/verify",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(verifyRequest.verifyDataDetails, "VerifyDataDetails", model.VerifyDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "verifiedData",
                    bodyModel: model.VerifiedData,
                    type: "model.VerifiedData",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.KmsCryptoClient = KmsCryptoClient;
KmsCryptoClient.serviceEndpointTemplate = "https://kms.{region}.{secondLevelDomain}";
KmsCryptoClient.endpointServiceName = "";
var KmsManagementApiKeys;
(function (KmsManagementApiKeys) {
})(KmsManagementApiKeys = exports.KmsManagementApiKeys || (exports.KmsManagementApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class KmsManagementClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = false;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this.targetService = "KmsManagement";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        if (this.logger)
            this.logger.info(`KmsManagementClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
    }
    /**
     * Creates a new KmsManagementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new kmsmanagement_waiter_1.KmsManagementWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Backs up an encrypted file that contains all key versions and metadata of the specified key so that you can restore
     * the key later. The file also contains the metadata of the vault that the key belonged to.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param BackupKeyRequest
     * @return BackupKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/BackupKey.ts.html |here} to see how to use BackupKey API.
     */
    backupKey(backupKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#backupKey.");
            const operationName = "backupKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": backupKeyRequest.keyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": backupKeyRequest.ifMatch,
                "opc-request-id": backupKeyRequest.opcRequestId,
                "opc-retry-token": backupKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, backupKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/actions/backup",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(backupKeyRequest.backupKeyDetails, "BackupKeyDetails", model.BackupKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Cancels the scheduled deletion of the specified key. Canceling
  * a scheduled deletion restores the key's lifecycle state to what
  * it was before its scheduled deletion.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CancelKeyDeletionRequest
       * @return CancelKeyDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/CancelKeyDeletion.ts.html |here} to see how to use CancelKeyDeletion API.
       */
    cancelKeyDeletion(cancelKeyDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#cancelKeyDeletion.");
            const operationName = "cancelKeyDeletion";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": cancelKeyDeletionRequest.keyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": cancelKeyDeletionRequest.ifMatch,
                "opc-request-id": cancelKeyDeletionRequest.opcRequestId,
                "opc-retry-token": cancelKeyDeletionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelKeyDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/actions/cancelDeletion",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Cancels the scheduled deletion of the specified key version. Canceling
  * a scheduled deletion restores the key version to its lifecycle state from
  * before its scheduled deletion.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CancelKeyVersionDeletionRequest
       * @return CancelKeyVersionDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/CancelKeyVersionDeletion.ts.html |here} to see how to use CancelKeyVersionDeletion API.
       */
    cancelKeyVersionDeletion(cancelKeyVersionDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#cancelKeyVersionDeletion.");
            const operationName = "cancelKeyVersionDeletion";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": cancelKeyVersionDeletionRequest.keyId,
                "{keyVersionId}": cancelKeyVersionDeletionRequest.keyVersionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": cancelKeyVersionDeletionRequest.ifMatch,
                "opc-request-id": cancelKeyVersionDeletionRequest.opcRequestId,
                "opc-retry-token": cancelKeyVersionDeletionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelKeyVersionDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/keyVersions/{keyVersionId}/actions/cancelDeletion",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "keyVersion",
                    bodyModel: model.KeyVersion,
                    type: "model.KeyVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves a key into a different compartment within the same tenancy. For information about
  * moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When provided, if-match is checked against the ETag values of the key.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ChangeKeyCompartmentRequest
       * @return ChangeKeyCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ChangeKeyCompartment.ts.html |here} to see how to use ChangeKeyCompartment API.
       */
    changeKeyCompartment(changeKeyCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#changeKeyCompartment.");
            const operationName = "changeKeyCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": changeKeyCompartmentRequest.keyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeKeyCompartmentRequest.ifMatch,
                "opc-request-id": changeKeyCompartmentRequest.opcRequestId,
                "opc-retry-token": changeKeyCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeKeyCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeKeyCompartmentRequest.changeKeyCompartmentDetails, "ChangeKeyCompartmentDetails", model.ChangeKeyCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new master encryption key.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total
  * number of requests across all management write operations. Key Management might throttle this call
  * to reject an otherwise valid request when the total rate of management write operations exceeds 10
  * requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateKeyRequest
       * @return CreateKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/CreateKey.ts.html |here} to see how to use CreateKey API.
       */
    createKey(createKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#createKey.");
            const operationName = "createKey";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createKeyRequest.opcRequestId,
                "opc-retry-token": createKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createKeyRequest.createKeyDetails, "CreateKeyDetails", model.CreateKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Generates a new [KeyVersion](https://docs.cloud.oracle.com/api/#/en/key/latest/KeyVersion/) resource that provides new cryptographic
  * material for a master encryption key. The key must be in an `ENABLED` state to be rotated.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all  management write operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management write operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateKeyVersionRequest
       * @return CreateKeyVersionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/CreateKeyVersion.ts.html |here} to see how to use CreateKeyVersion API.
       */
    createKeyVersion(createKeyVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#createKeyVersion.");
            const operationName = "createKeyVersion";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": createKeyVersionRequest.keyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createKeyVersionRequest.opcRequestId,
                "opc-retry-token": createKeyVersionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createKeyVersionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/keyVersions",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "keyVersion",
                    bodyModel: model.KeyVersion,
                    type: "model.KeyVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Disables a master encryption key so it can no longer be used for encryption, decryption, or
  * generating new data encryption keys.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management write operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management write operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DisableKeyRequest
       * @return DisableKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/DisableKey.ts.html |here} to see how to use DisableKey API.
       */
    disableKey(disableKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#disableKey.");
            const operationName = "disableKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": disableKeyRequest.keyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": disableKeyRequest.ifMatch,
                "opc-request-id": disableKeyRequest.opcRequestId,
                "opc-retry-token": disableKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/actions/disable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Enables a master encryption key so it can be used for encryption, decryption, or
  * generating new data encryption keys.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management write operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management write operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param EnableKeyRequest
       * @return EnableKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/EnableKey.ts.html |here} to see how to use EnableKey API.
       */
    enableKey(enableKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#enableKey.");
            const operationName = "enableKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": enableKeyRequest.keyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableKeyRequest.ifMatch,
                "opc-request-id": enableKeyRequest.opcRequestId,
                "opc-retry-token": enableKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/actions/enable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets information about the specified master encryption key.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management read operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management read operations exceeds 10 requests per second for
  * a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetKeyRequest
       * @return GetKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/GetKey.ts.html |here} to see how to use GetKey API.
       */
    getKey(getKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#getKey.");
            const operationName = "getKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": getKeyRequest.keyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getKeyRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets information about the specified key version.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management read operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management read operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetKeyVersionRequest
       * @return GetKeyVersionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/GetKeyVersion.ts.html |here} to see how to use GetKeyVersion API.
       */
    getKeyVersion(getKeyVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#getKeyVersion.");
            const operationName = "getKeyVersion";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": getKeyVersionRequest.keyId,
                "{keyVersionId}": getKeyVersionRequest.keyVersionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getKeyVersionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getKeyVersionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/keyVersions/{keyVersionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "keyVersion",
                    bodyModel: model.KeyVersion,
                    type: "model.KeyVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * When a vault has a replica, each operation on the vault or its resources, such as
     * keys, is replicated and has an associated replicationId. Replication status provides
     * details about whether the operation associated with the given replicationId has been
     * successfully applied across replicas.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetReplicationStatusRequest
     * @return GetReplicationStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/GetReplicationStatus.ts.html |here} to see how to use GetReplicationStatus API.
     */
    getReplicationStatus(getReplicationStatusRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#getReplicationStatus.");
            const operationName = "getReplicationStatus";
            const apiReferenceLink = "";
            const pathParams = {
                "{replicationId}": getReplicationStatusRequest.replicationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getReplicationStatusRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getReplicationStatusRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/replicaOperations/{replicationId}/status",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "replicationStatusDetails",
                    bodyModel: model.ReplicationStatusDetails,
                    type: "model.ReplicationStatusDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details about the public RSA wrapping key associated with the vault in the endpoint. Each vault has an RSA key-pair that wraps and
     * unwraps AES key material for import into Key Management.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWrappingKeyRequest
     * @return GetWrappingKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/GetWrappingKey.ts.html |here} to see how to use GetWrappingKey API.
     */
    getWrappingKey(getWrappingKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#getWrappingKey.");
            const operationName = "getWrappingKey";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWrappingKeyRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWrappingKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/wrappingKeys",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "wrappingKey",
                    bodyModel: model.WrappingKey,
                    type: "model.WrappingKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Imports AES key material to create a new key with. The key material must be base64-encoded and
     * wrapped by the vault's public RSA wrapping key before you can import it. Key Management supports AES symmetric keys
     * that are exactly 16, 24, or 32 bytes. Furthermore, the key length must match what you specify at the time of import.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ImportKeyRequest
     * @return ImportKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ImportKey.ts.html |here} to see how to use ImportKey API.
     */
    importKey(importKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#importKey.");
            const operationName = "importKey";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": importKeyRequest.opcRequestId,
                "opc-retry-token": importKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, importKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/import",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(importKeyRequest.importKeyDetails, "ImportKeyDetails", model.ImportKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Imports AES key material to create a new key version with, and then rotates the key to begin using the new
     * key version. The key material must be base64-encoded and wrapped by the vault's public RSA wrapping key
     * before you can import it. Key Management supports AES symmetric keys that are exactly 16, 24, or 32 bytes.
     * Furthermore, the key length must match the length of the specified key and what you specify as the length
     * at the time of import.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ImportKeyVersionRequest
     * @return ImportKeyVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ImportKeyVersion.ts.html |here} to see how to use ImportKeyVersion API.
     */
    importKeyVersion(importKeyVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#importKeyVersion.");
            const operationName = "importKeyVersion";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": importKeyVersionRequest.keyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": importKeyVersionRequest.opcRequestId,
                "opc-retry-token": importKeyVersionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, importKeyVersionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/keyVersions/import",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(importKeyVersionRequest.importKeyVersionDetails, "ImportKeyVersionDetails", model.ImportKeyVersionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "keyVersion",
                    bodyModel: model.KeyVersion,
                    type: "model.KeyVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists all [KeyVersion](https://docs.cloud.oracle.com/api/#/en/key/latest/KeyVersion/) resources for the specified
  * master encryption key.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management read operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management read operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListKeyVersionsRequest
       * @return ListKeyVersionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ListKeyVersions.ts.html |here} to see how to use ListKeyVersions API.
       */
    listKeyVersions(listKeyVersionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#listKeyVersions.");
            const operationName = "listKeyVersions";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": listKeyVersionsRequest.keyId
            };
            const queryParams = {
                "limit": listKeyVersionsRequest.limit,
                "page": listKeyVersionsRequest.page,
                "sortBy": listKeyVersionsRequest.sortBy,
                "sortOrder": listKeyVersionsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listKeyVersionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listKeyVersionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/keyVersions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.KeyVersionSummary,
                    type: "Array<model.KeyVersionSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listKeyVersionsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.KeyVersionSummary objects
     * contained in responses from the listKeyVersions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllKeyVersions(request) {
        return oci_common_1.paginateRecords(request, req => this.listKeyVersions(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listKeyVersionsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listKeyVersions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllKeyVersionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listKeyVersions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.KeyVersionSummary objects
     * contained in responses from the listKeyVersions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listKeyVersionsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listKeyVersions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listKeyVersions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listKeyVersionsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listKeyVersions(req));
    }
    /**
       * Lists the master encryption keys in the specified vault and compartment.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management read operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management read operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListKeysRequest
       * @return ListKeysResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ListKeys.ts.html |here} to see how to use ListKeys API.
       */
    listKeys(listKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#listKeys.");
            const operationName = "listKeys";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listKeysRequest.compartmentId,
                "limit": listKeysRequest.limit,
                "page": listKeysRequest.page,
                "sortBy": listKeysRequest.sortBy,
                "sortOrder": listKeysRequest.sortOrder,
                "protectionMode": listKeysRequest.protectionMode,
                "algorithm": listKeysRequest.algorithm,
                "length": listKeysRequest.length,
                "curveId": listKeysRequest.curveId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listKeysRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listKeysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.KeySummary,
                    type: "Array<model.KeySummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listKeysRecordIterator function.
     * Creates a new async iterator which will iterate over the models.KeySummary objects
     * contained in responses from the listKeys operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllKeys(request) {
        return oci_common_1.paginateRecords(request, req => this.listKeys(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listKeysResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listKeys operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllKeysResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listKeys(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.KeySummary objects
     * contained in responses from the listKeys operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listKeysRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listKeys(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listKeys operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listKeysResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listKeys(req));
    }
    /**
     * Restores the specified key to the specified vault, based on information in the backup file provided.
     * If the vault doesn't exist, the operation returns a response with a 404 HTTP status error code. You
     * need to first restore the vault associated with the key.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RestoreKeyFromFileRequest
     * @return RestoreKeyFromFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/RestoreKeyFromFile.ts.html |here} to see how to use RestoreKeyFromFile API.
     */
    restoreKeyFromFile(restoreKeyFromFileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#restoreKeyFromFile.");
            const operationName = "restoreKeyFromFile";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "content-length": restoreKeyFromFileRequest.contentLength,
                "if-match": restoreKeyFromFileRequest.ifMatch,
                "content-md5": restoreKeyFromFileRequest.contentMd5,
                "opc-request-id": restoreKeyFromFileRequest.opcRequestId,
                "opc-retry-token": restoreKeyFromFileRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, restoreKeyFromFileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/actions/restoreFromFile",
                method: "POST",
                bodyContent: restoreKeyFromFileRequest.restoreKeyFromFileDetails,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-content-md5"),
                            key: "opcContentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Restores the specified key to the specified vault from an Oracle Cloud Infrastructure
     * Object Storage location. If the vault doesn't exist, the operation returns a response with a
     * 404 HTTP status error code. You need to first restore the vault associated with the key.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RestoreKeyFromObjectStoreRequest
     * @return RestoreKeyFromObjectStoreResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/RestoreKeyFromObjectStore.ts.html |here} to see how to use RestoreKeyFromObjectStore API.
     */
    restoreKeyFromObjectStore(restoreKeyFromObjectStoreRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#restoreKeyFromObjectStore.");
            const operationName = "restoreKeyFromObjectStore";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": restoreKeyFromObjectStoreRequest.ifMatch,
                "opc-request-id": restoreKeyFromObjectStoreRequest.opcRequestId,
                "opc-retry-token": restoreKeyFromObjectStoreRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, restoreKeyFromObjectStoreRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/actions/restoreFromObjectStore",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(restoreKeyFromObjectStoreRequest.restoreKeyFromObjectStoreDetails, "RestoreKeyFromObjectStoreDetails", model.RestoreKeyFromObjectStoreDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Schedules the deletion of the specified key. This sets the lifecycle state of the key
  * to `PENDING_DELETION` and then deletes it after the specified retention period ends.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ScheduleKeyDeletionRequest
       * @return ScheduleKeyDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ScheduleKeyDeletion.ts.html |here} to see how to use ScheduleKeyDeletion API.
       */
    scheduleKeyDeletion(scheduleKeyDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#scheduleKeyDeletion.");
            const operationName = "scheduleKeyDeletion";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": scheduleKeyDeletionRequest.keyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": scheduleKeyDeletionRequest.ifMatch,
                "opc-request-id": scheduleKeyDeletionRequest.opcRequestId,
                "opc-retry-token": scheduleKeyDeletionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, scheduleKeyDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/actions/scheduleDeletion",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(scheduleKeyDeletionRequest.scheduleKeyDeletionDetails, "ScheduleKeyDeletionDetails", model.ScheduleKeyDeletionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Schedules the deletion of the specified key version. This sets the lifecycle state of the key version
  * to `PENDING_DELETION` and then deletes it after the specified retention period ends.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ScheduleKeyVersionDeletionRequest
       * @return ScheduleKeyVersionDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ScheduleKeyVersionDeletion.ts.html |here} to see how to use ScheduleKeyVersionDeletion API.
       */
    scheduleKeyVersionDeletion(scheduleKeyVersionDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#scheduleKeyVersionDeletion.");
            const operationName = "scheduleKeyVersionDeletion";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": scheduleKeyVersionDeletionRequest.keyId,
                "{keyVersionId}": scheduleKeyVersionDeletionRequest.keyVersionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": scheduleKeyVersionDeletionRequest.ifMatch,
                "opc-request-id": scheduleKeyVersionDeletionRequest.opcRequestId,
                "opc-retry-token": scheduleKeyVersionDeletionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, scheduleKeyVersionDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}/keyVersions/{keyVersionId}/actions/scheduleDeletion",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(scheduleKeyVersionDeletionRequest.scheduleKeyVersionDeletionDetails, "ScheduleKeyVersionDeletionDetails", model.ScheduleKeyVersionDeletionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "keyVersion",
                    bodyModel: model.KeyVersion,
                    type: "model.KeyVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the properties of a master encryption key. Specifically, you can update the
  * `displayName`, `freeformTags`, and `definedTags` properties. Furthermore,
  * the key must be in an `ENABLED` or `CREATING` state to be updated.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management write operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management write operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param UpdateKeyRequest
       * @return UpdateKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/UpdateKey.ts.html |here} to see how to use UpdateKey API.
       */
    updateKey(updateKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsManagementClient#updateKey.");
            const operationName = "updateKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{keyId}": updateKeyRequest.keyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateKeyRequest.ifMatch,
                "opc-request-id": updateKeyRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/keys/{keyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateKeyRequest.updateKeyDetails, "UpdateKeyDetails", model.UpdateKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "key",
                    bodyModel: model.Key,
                    type: "model.Key",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.KmsManagementClient = KmsManagementClient;
KmsManagementClient.serviceEndpointTemplate = "https://kms.{region}.{secondLevelDomain}";
KmsManagementClient.endpointServiceName = "";
var KmsVaultApiKeys;
(function (KmsVaultApiKeys) {
})(KmsVaultApiKeys = exports.KmsVaultApiKeys || (exports.KmsVaultApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class KmsVaultClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = false;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this.targetService = "KmsVault";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        if (this.logger)
            this.logger.info(`KmsVaultClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(KmsVaultClient.serviceEndpointTemplate, this._region, KmsVaultClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(KmsVaultClient.serviceEndpointTemplate, this._regionId, KmsVaultClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(KmsVaultClient.serviceEndpointTemplate, region, KmsVaultClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(KmsVaultClient.serviceEndpointTemplate, regionId, KmsVaultClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new KmsVaultWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new kmsvault_waiter_1.KmsVaultWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Backs up an encrypted file that contains all the metadata of a vault so that you can restore the vault later.
     * You can backup a vault whether or not it contains keys. This operation only backs up the
     * metadata of the vault, and does not include key metadata.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param BackupVaultRequest
     * @return BackupVaultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/BackupVault.ts.html |here} to see how to use BackupVault API.
     */
    backupVault(backupVaultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#backupVault.");
            const operationName = "backupVault";
            const apiReferenceLink = "";
            const pathParams = {
                "{vaultId}": backupVaultRequest.vaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": backupVaultRequest.ifMatch,
                "opc-request-id": backupVaultRequest.opcRequestId,
                "opc-retry-token": backupVaultRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, backupVaultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/{vaultId}/actions/backup",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(backupVaultRequest.backupVaultDetails, "BackupVaultDetails", model.BackupVaultDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vault",
                    bodyModel: model.Vault,
                    type: "model.Vault",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Cancels the scheduled deletion of the specified vault. Canceling a scheduled deletion
  * restores the vault and all keys in it to their respective states from before their
  * scheduled deletion. All keys that were scheduled for deletion prior to vault
  * deletion retain their lifecycle state and time of deletion.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CancelVaultDeletionRequest
       * @return CancelVaultDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/CancelVaultDeletion.ts.html |here} to see how to use CancelVaultDeletion API.
       */
    cancelVaultDeletion(cancelVaultDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#cancelVaultDeletion.");
            const operationName = "cancelVaultDeletion";
            const apiReferenceLink = "";
            const pathParams = {
                "{vaultId}": cancelVaultDeletionRequest.vaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": cancelVaultDeletionRequest.ifMatch,
                "opc-request-id": cancelVaultDeletionRequest.opcRequestId,
                "opc-retry-token": cancelVaultDeletionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelVaultDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/{vaultId}/actions/cancelDeletion",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vault",
                    bodyModel: model.Vault,
                    type: "model.Vault",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves a vault into a different compartment within the same tenancy. For information about
  * moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When provided, if-match is checked against the ETag values of the resource.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ChangeVaultCompartmentRequest
       * @return ChangeVaultCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ChangeVaultCompartment.ts.html |here} to see how to use ChangeVaultCompartment API.
       */
    changeVaultCompartment(changeVaultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#changeVaultCompartment.");
            const operationName = "changeVaultCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{vaultId}": changeVaultCompartmentRequest.vaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeVaultCompartmentRequest.ifMatch,
                "opc-request-id": changeVaultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeVaultCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeVaultCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/{vaultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVaultCompartmentRequest.changeVaultCompartmentDetails, "ChangeVaultCompartmentDetails", model.ChangeVaultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new vault. The type of vault you create determines key placement, pricing, and
  * available options. Options include storage isolation, a dedicated service endpoint instead
  * of a shared service endpoint for API calls, and either a dedicated hardware security module
  * (HSM) or a multitenant HSM.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateVaultRequest
       * @return CreateVaultResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/CreateVault.ts.html |here} to see how to use CreateVault API.
       */
    createVault(createVaultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#createVault.");
            const operationName = "createVault";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createVaultRequest.opcRequestId,
                "opc-retry-token": createVaultRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createVaultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVaultRequest.createVaultDetails, "CreateVaultDetails", model.CreateVaultDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vault",
                    bodyModel: model.Vault,
                    type: "model.Vault",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a replica for the vault in another region in the same realm
  * <p>
  The API is a no-op if called for same region that a vault is already replicated to.
  * 409 if called on a vault that is already replicated to a different region. Users need to delete
  * existing replica first before calling it with a different region.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateVaultReplicaRequest
       * @return CreateVaultReplicaResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/CreateVaultReplica.ts.html |here} to see how to use CreateVaultReplica API.
       */
    createVaultReplica(createVaultReplicaRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#createVaultReplica.");
            const operationName = "createVaultReplica";
            const apiReferenceLink = "";
            const pathParams = {
                "{vaultId}": createVaultReplicaRequest.vaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": createVaultReplicaRequest.ifMatch,
                "opc-request-id": createVaultReplicaRequest.opcRequestId,
                "opc-retry-token": createVaultReplicaRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createVaultReplicaRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/{vaultId}/actions/createReplica",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVaultReplicaRequest.createVaultReplicaDetails, "CreateVaultReplicaDetails", model.CreateVaultReplicaDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes a vault replica
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DeleteVaultReplicaRequest
       * @return DeleteVaultReplicaResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/DeleteVaultReplica.ts.html |here} to see how to use DeleteVaultReplica API.
       */
    deleteVaultReplica(deleteVaultReplicaRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#deleteVaultReplica.");
            const operationName = "deleteVaultReplica";
            const apiReferenceLink = "";
            const pathParams = {
                "{vaultId}": deleteVaultReplicaRequest.vaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVaultReplicaRequest.ifMatch,
                "opc-request-id": deleteVaultReplicaRequest.opcRequestId,
                "opc-retry-token": deleteVaultReplicaRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteVaultReplicaRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/{vaultId}/actions/deleteReplica",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(deleteVaultReplicaRequest.deleteVaultReplicaDetails, "DeleteVaultReplicaDetails", model.DeleteVaultReplicaDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets the specified vault's configuration information.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning read operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * read operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetVaultRequest
       * @return GetVaultResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/GetVault.ts.html |here} to see how to use GetVault API.
       */
    getVault(getVaultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#getVault.");
            const operationName = "getVault";
            const apiReferenceLink = "";
            const pathParams = {
                "{vaultId}": getVaultRequest.vaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getVaultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getVaultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/{vaultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vault",
                    bodyModel: model.Vault,
                    type: "model.Vault",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the count of keys and key versions in the specified vault to calculate usage against service limits.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetVaultUsageRequest
     * @return GetVaultUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/GetVaultUsage.ts.html |here} to see how to use GetVaultUsage API.
     */
    getVaultUsage(getVaultUsageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#getVaultUsage.");
            const operationName = "getVaultUsage";
            const apiReferenceLink = "";
            const pathParams = {
                "{vaultId}": getVaultUsageRequest.vaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getVaultUsageRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getVaultUsageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/{vaultId}/usage",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vaultUsage",
                    bodyModel: model.VaultUsage,
                    type: "model.VaultUsage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the replicas for a vault
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListVaultReplicasRequest
       * @return ListVaultReplicasResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ListVaultReplicas.ts.html |here} to see how to use ListVaultReplicas API.
       */
    listVaultReplicas(listVaultReplicasRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#listVaultReplicas.");
            const operationName = "listVaultReplicas";
            const apiReferenceLink = "";
            const pathParams = {
                "{vaultId}": listVaultReplicasRequest.vaultId
            };
            const queryParams = {
                "limit": listVaultReplicasRequest.limit,
                "page": listVaultReplicasRequest.page,
                "sortBy": listVaultReplicasRequest.sortBy,
                "sortOrder": listVaultReplicasRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": listVaultReplicasRequest.ifMatch,
                "opc-request-id": listVaultReplicasRequest.opcRequestId,
                "opc-retry-token": listVaultReplicasRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listVaultReplicasRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/{vaultId}/actions/listReplicas",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.VaultReplicaSummary,
                    type: "Array<model.VaultReplicaSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listVaultReplicasRecordIterator function.
     * Creates a new async iterator which will iterate over the models.VaultReplicaSummary objects
     * contained in responses from the listVaultReplicas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVaultReplicas(request) {
        return oci_common_1.paginateRecords(request, req => this.listVaultReplicas(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listVaultReplicasResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listVaultReplicas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVaultReplicasResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVaultReplicas(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.VaultReplicaSummary objects
     * contained in responses from the listVaultReplicas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listVaultReplicasRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listVaultReplicas(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVaultReplicas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listVaultReplicasResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listVaultReplicas(req));
    }
    /**
       * Lists the vaults in the specified compartment.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning read operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * read operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListVaultsRequest
       * @return ListVaultsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ListVaults.ts.html |here} to see how to use ListVaults API.
       */
    listVaults(listVaultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#listVaults.");
            const operationName = "listVaults";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVaultsRequest.compartmentId,
                "limit": listVaultsRequest.limit,
                "page": listVaultsRequest.page,
                "sortBy": listVaultsRequest.sortBy,
                "sortOrder": listVaultsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listVaultsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listVaultsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.VaultSummary,
                    type: "Array<model.VaultSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listVaultsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.VaultSummary objects
     * contained in responses from the listVaults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVaults(request) {
        return oci_common_1.paginateRecords(request, req => this.listVaults(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listVaultsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listVaults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVaultsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVaults(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.VaultSummary objects
     * contained in responses from the listVaults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listVaultsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listVaults(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVaults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listVaultsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listVaults(req));
    }
    /**
     * Restores a vault from an encrypted backup file. If a vault
     * with the same OCID already exists, this operation returns a response with a
     * 409 HTTP status error code.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RestoreVaultFromFileRequest
     * @return RestoreVaultFromFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/RestoreVaultFromFile.ts.html |here} to see how to use RestoreVaultFromFile API.
     */
    restoreVaultFromFile(restoreVaultFromFileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#restoreVaultFromFile.");
            const operationName = "restoreVaultFromFile";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": restoreVaultFromFileRequest.compartmentId
            };
            let headerParams = {
                "content-length": restoreVaultFromFileRequest.contentLength,
                "if-match": restoreVaultFromFileRequest.ifMatch,
                "content-md5": restoreVaultFromFileRequest.contentMd5,
                "opc-request-id": restoreVaultFromFileRequest.opcRequestId,
                "opc-retry-token": restoreVaultFromFileRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, restoreVaultFromFileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/actions/restoreFromFile",
                method: "POST",
                bodyContent: restoreVaultFromFileRequest.restoreVaultFromFileDetails,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vault",
                    bodyModel: model.Vault,
                    type: "model.Vault",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-content-md5"),
                            key: "opcContentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Restores a vault from an encrypted backup file stored in Oracle Cloud Infrastructure Object
     * Storage. If a vault with the same OCID already exists, this operation returns
     * a response with a 409 HTTP status error code.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RestoreVaultFromObjectStoreRequest
     * @return RestoreVaultFromObjectStoreResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/RestoreVaultFromObjectStore.ts.html |here} to see how to use RestoreVaultFromObjectStore API.
     */
    restoreVaultFromObjectStore(restoreVaultFromObjectStoreRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#restoreVaultFromObjectStore.");
            const operationName = "restoreVaultFromObjectStore";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": restoreVaultFromObjectStoreRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": restoreVaultFromObjectStoreRequest.ifMatch,
                "opc-request-id": restoreVaultFromObjectStoreRequest.opcRequestId,
                "opc-retry-token": restoreVaultFromObjectStoreRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, restoreVaultFromObjectStoreRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/actions/restoreFromObjectStore",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(restoreVaultFromObjectStoreRequest.restoreVaultFromObjectStoreDetails, "RestoreVaultFromObjectStoreDetails", model.RestoreVaultFromObjectStoreDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vault",
                    bodyModel: model.Vault,
                    type: "model.Vault",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Schedules the deletion of the specified vault. This sets the lifecycle state of the vault and all keys in it
  * that are not already scheduled for deletion to `PENDING_DELETION` and then deletes them after the
  * retention period ends. The lifecycle state and time of deletion for keys already scheduled for deletion won't
  * change. If any keys in the vault are scheduled to be deleted after the specified time of
  * deletion for the vault, the call is rejected with the error code 409.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ScheduleVaultDeletionRequest
       * @return ScheduleVaultDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/ScheduleVaultDeletion.ts.html |here} to see how to use ScheduleVaultDeletion API.
       */
    scheduleVaultDeletion(scheduleVaultDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#scheduleVaultDeletion.");
            const operationName = "scheduleVaultDeletion";
            const apiReferenceLink = "";
            const pathParams = {
                "{vaultId}": scheduleVaultDeletionRequest.vaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": scheduleVaultDeletionRequest.ifMatch,
                "opc-request-id": scheduleVaultDeletionRequest.opcRequestId,
                "opc-retry-token": scheduleVaultDeletionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, scheduleVaultDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/{vaultId}/actions/scheduleDeletion",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(scheduleVaultDeletionRequest.scheduleVaultDeletionDetails, "ScheduleVaultDeletionDetails", model.ScheduleVaultDeletionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vault",
                    bodyModel: model.Vault,
                    type: "model.Vault",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the properties of a vault. Specifically, you can update the
  * `displayName`, `freeformTags`, and `definedTags` properties. Furthermore,
  * the vault must be in an ACTIVE or CREATING state to be updated.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param UpdateVaultRequest
       * @return UpdateVaultResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/keymanagement/UpdateVault.ts.html |here} to see how to use UpdateVault API.
       */
    updateVault(updateVaultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation KmsVaultClient#updateVault.");
            const operationName = "updateVault";
            const apiReferenceLink = "";
            const pathParams = {
                "{vaultId}": updateVaultRequest.vaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVaultRequest.ifMatch,
                "opc-request-id": updateVaultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateVaultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/20180608/vaults/{vaultId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVaultRequest.updateVaultDetails, "UpdateVaultDetails", model.UpdateVaultDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vault",
                    bodyModel: model.Vault,
                    type: "model.Vault",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.KmsVaultClient = KmsVaultClient;
KmsVaultClient.serviceEndpointTemplate = "https://kms.{region}.{secondLevelDomain}";
KmsVaultClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map