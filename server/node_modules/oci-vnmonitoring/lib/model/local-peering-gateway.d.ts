/**
 * Network Monitoring API
 * Use the Network Monitoring API to troubleshoot routing and security issues for resources such as virtual cloud networks (VCNs) and compute instances. For more information, see the console
documentation for the [Network Path Analyzer](/iaas/Content/Network/Concepts/path_analyzer.htm) tool.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
* A local peering gateway (LPG) is an object on a VCN that lets that VCN peer
* with another VCN in the same region. *Peering* means that the two VCNs can
* communicate using private IP addresses, but without the traffic traversing the
* internet or routing through your on-premises network. For more information,
* see [VCN Peering](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/VCNpeering.htm).
* <p>
To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
* talk to an administrator. If you're an administrator who needs to write policies to give users access, see
* [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
*
*/
export interface LocalPeeringGateway {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the LPG.
     */
    "compartmentId": string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable.
     * Avoid entering confidential information.
     *
     */
    "displayName": string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: `{\"bar-key\": \"value\"}`
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * The LPG's Oracle ID ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)).
     */
    "id": string;
    /**
      * Whether the VCN at the other end of the peering is in a different tenancy.
  * <p>
  Example: `false`
  *
      */
    "isCrossTenancyPeering": boolean;
    /**
     * The LPG's current lifecycle state.
     */
    "lifecycleState": LocalPeeringGateway.LifecycleState;
    /**
      * The range of IP addresses available on the VCN at the other
  * end of the peering from this LPG. The value is `null` if the LPG is not peered.
  * You can use this as the destination CIDR for a route rule to route a subnet's
  * traffic to this LPG.
  * <p>
  Example: `192.168.0.0/16`
  *
      */
    "peerAdvertisedCidr"?: string;
    /**
     * Whether the LPG is peered with another LPG. `NEW` means the LPG has not yet been
     * peered. `PENDING` means the peering is being established. `REVOKED` means the
     * LPG at the other end of the peering has been deleted.
     *
     */
    "peeringStatus": LocalPeeringGateway.PeeringStatus;
    /**
     * Additional information regarding the peering status, if applicable.
     */
    "peeringStatusDetails"?: string;
    /**
      * The date and time the LPG was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
  * <p>
  Example: `2016-08-25T21:10:29.600Z`
  *
      */
    "timeCreated": Date;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN that uses the LPG.
     */
    "vcnId": string;
}
export declare namespace LocalPeeringGateway {
    enum LifecycleState {
        Provisioning = "PROVISIONING",
        Available = "AVAILABLE",
        Terminating = "TERMINATING",
        Terminated = "TERMINATED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum PeeringStatus {
        Invalid = "INVALID",
        New = "NEW",
        Peered = "PEERED",
        Pending = "PENDING",
        Revoked = "REVOKED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: LocalPeeringGateway): object;
    function getDeserializedJsonObj(obj: LocalPeeringGateway): object;
}
