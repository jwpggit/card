/**
 * Container Instance API
 * A description of the Container Instance API
 * OpenAPI spec version: 20210415
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * A reduced set of details about a single Container returned by list APIs.
 *
 */
export interface ContainerSummary {
    /**
     * Unique identifier that is immutable on creation
     */
    "id": string;
    /**
     * Display name for the Container. Can be renamed.
     */
    "displayName": string;
    /**
     * Compartment Identifier
     */
    "compartmentId": string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: `{\"bar-key\": \"value\"}`
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Availability Domain where the Container's Instance is running.
     */
    "availabilityDomain": string;
    /**
     * Fault Domain where the Container's Instance is running.
     */
    "faultDomain"?: string;
    /**
     * The current state of the Container.
     */
    "lifecycleState": string;
    /**
     * A message describing the current state in more detail. For example, can be used to provide
     * actionable information for a resource in Failed state.
     *
     */
    "lifecycleDetails"?: string;
    /**
     * The time the the Container was created. An RFC3339 formatted datetime string
     */
    "timeCreated": Date;
    /**
     * The time the Container was updated. An RFC3339 formatted datetime string
     */
    "timeUpdated"?: Date;
    /**
     * The identifier of the Container Instance on which this container is running.
     */
    "containerInstanceId": string;
    "resourceConfig"?: model.ContainerResourceConfig;
    /**
     * The container image information. Currently only support public docker registry. Can be either image name,
     * e.g `containerImage`, image name with version, e.g `containerImage:v1` or complete docker image Url e.g
     * `docker.io/library/containerImage:latest`.
     * If no registry is provided, will default the registry to public docker hub `docker.io/library`.
     * The registry used for container image must be reachable over the Container Instance's VNIC.
     *
     */
    "imageUrl": string;
    /**
     * Determines if the Container will have access to the Container Instance Resource Principal.
     * This method utilizes resource principal version 2.2. Please refer to
     * https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal
     * for detailed explanation of how to leverage the exposed resource principal elements.
     *
     */
    "isResourcePrincipalDisabled"?: boolean;
}
export declare namespace ContainerSummary {
    function getJsonObj(obj: ContainerSummary): object;
    function getDeserializedJsonObj(obj: ContainerSummary): object;
}
