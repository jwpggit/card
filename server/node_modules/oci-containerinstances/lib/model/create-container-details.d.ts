/**
 * Container Instance API
 * A description of the Container Instance API
 * OpenAPI spec version: 20210415
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
* Information to create a new Container within a ContainerInstance.
* <p>
The Container created by this call will contain both the tags specified
* in this object as well as any tags specified in the parent ContainerInstance object.
* <p>
The Container will be created with the same `compartmentId`, `availabilityDomain`,
* and `faultDomain` as the parent ContainerInstance object.
*
*/
export interface CreateContainerDetails {
    /**
     * Display name for the Container. There are no guarantees of uniqueness
     * for this name. If none is provided, it will be calculated automatically.
     *
     */
    "displayName"?: string;
    /**
     * The container image information. Currently only support public docker registry. Can be either image name,
     * e.g `containerImage`, image name with version, e.g `containerImage:v1` or complete docker image Url e.g
     * `docker.io/library/containerImage:latest`.
     * If no registry is provided, will default the registry to public docker hub `docker.io/library`.
     * The registry used for container image must be reachable over the Container Instance's VNIC.
     *
     */
    "imageUrl": string;
    /**
     * This command will override the container's entrypoint process.
     * If not specified, the existing entrypoint process defined in the image will be used.
     *
     */
    "command"?: Array<string>;
    /**
      * A list of string arguments for a container's entrypoint process.
  * <p>
  Many containers use an entrypoint process pointing to a shell,
  * for example /bin/bash. For such containers, this argument list
  * can also be used to specify the main command in the container process.
  * <p>
  All arguments together must be 64KB or smaller.
  *
      */
    "arguments"?: Array<string>;
    /**
     * A list of additional capabilities for the container.
     *
     */
    "additionalCapabilities"?: Array<CreateContainerDetails.AdditionalCapabilities>;
    /**
     * The working directory within the Container's filesystem for
     * the Container process. If none is set, the Container will run in the
     * working directory set by the container image.
     *
     */
    "workingDirectory"?: string;
    /**
      * A map of additional environment variables to set in the environment of the container's
  * entrypoint process. These variables are in addition to any variables already defined
  * in the container's image.
  * <p>
  All environment variables together, name and values, must be 64KB or smaller.
  *
      */
    "environmentVariables"?: {
        [key: string]: string;
    };
    /**
     * List of the volume mounts.
     *
     */
    "volumeMounts"?: Array<model.CreateVolumeMountDetails>;
    /**
     * Determines if the Container will have access to the Container Instance Resource Principal.
     * This method utilizes resource principal version 2.2. Please refer to
     * https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal
     * for detailed explanation of how to leverage the exposed resource principal elements.
     *
     */
    "isResourcePrincipalDisabled"?: boolean;
    "resourceConfig"?: model.CreateContainerResourceConfigDetails;
    /**
     * list of container health checks to check container status and take appropriate action if container status is failed.
     * There are three types of health checks that we currently support HTTP, TCP, and Command.
     *
     */
    "healthChecks"?: Array<model.CreateContainerHealthCheckDetails>;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: `{\"bar-key\": \"value\"}`
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace CreateContainerDetails {
    enum AdditionalCapabilities {
        CapNetAdmin = "CAP_NET_ADMIN",
        CapNetRaw = "CAP_NET_RAW"
    }
    function getJsonObj(obj: CreateContainerDetails): object;
    function getDeserializedJsonObj(obj: CreateContainerDetails): object;
}
