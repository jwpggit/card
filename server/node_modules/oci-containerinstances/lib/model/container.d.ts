/**
 * Container Instance API
 * A description of the Container Instance API
 * OpenAPI spec version: 20210415
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
* A single container on a Container Instance.
* <p>
If this Container is DELETED, the record will remain visible for a short period
* of time before being permanently removed.
*
*/
export interface Container {
    /**
     * Unique identifier that is immutable on creation
     */
    "id": string;
    /**
     * Display name for the Container. Can be renamed.
     */
    "displayName": string;
    /**
     * Compartment Identifier
     */
    "compartmentId": string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: `{\"bar-key\": \"value\"}`
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Availability Domain where the Container's Instance is running.
     */
    "availabilityDomain": string;
    /**
     * Fault Domain where the Container's Instance is running.
     */
    "faultDomain"?: string;
    /**
     * The current state of the Container.
     */
    "lifecycleState": Container.LifecycleState;
    /**
     * A message describing the current state in more detail. For example, can be used to provide
     * actionable information for a resource in Failed state.
     *
     */
    "lifecycleDetails"?: string;
    /**
     * The exit code of the container process if it has stopped executing. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "exitCode"?: number;
    /**
     * Time at which the container last terminated. An RFC3339 formatted datetime string
     */
    "timeTerminated"?: Date;
    /**
     * The time the the Container was created. An RFC3339 formatted datetime string
     */
    "timeCreated": Date;
    /**
     * The time the Container was updated. An RFC3339 formatted datetime string
     */
    "timeUpdated"?: Date;
    /**
     * The identifier of the Container Instance on which this container is running.
     */
    "containerInstanceId": string;
    /**
     * The container image information. Currently only support public docker registry. Can be either image name,
     * e.g `containerImage`, image name with version, e.g `containerImage:v1` or complete docker image Url e.g
     * `docker.io/library/containerImage:latest`.
     * If no registry is provided, will default the registry to public docker hub `docker.io/library`.
     * The registry used for container image must be reachable over the Container Instance's VNIC.
     *
     */
    "imageUrl": string;
    /**
     * This command will override the container's entrypoint process.
     * If not specified, the existing entrypoint process defined in the image will be used.
     *
     */
    "command"?: Array<string>;
    /**
      * A list of string arguments for a Container's entrypoint process.
  * <p>
  Many containers use an entrypoint process pointing to a shell,
  * for example /bin/bash. For such containers, this argument list
  * can also be used to specify the main command in the container process.
  *
      */
    "arguments"?: Array<string>;
    /**
     * A list of additional configurable container capabilities
     *
     */
    "additionalCapabilities"?: Array<Container.AdditionalCapabilities>;
    /**
     * The working directory within the Container's filesystem for
     * the Container process. If this is not present, the default
     * working directory from the image will be used.
     *
     */
    "workingDirectory"?: string;
    /**
     * A map of additional environment variables to set in the environment of the container's
     * entrypoint process. These variables are in addition to any variables already defined
     * in the container's image.
     *
     */
    "environmentVariables"?: {
        [key: string]: string;
    };
    /**
     * List of the volume mounts.
     *
     */
    "volumeMounts"?: Array<model.VolumeMount>;
    /**
     * List of container health checks
     */
    "healthChecks"?: Array<model.ContainerHealthCheck>;
    /**
     * Determines if the Container will have access to the Container Instance Resource Principal.
     * This method utilizes resource principal version 2.2. Please refer to
     * https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal
     * for detailed explanation of how to leverage the exposed resource principal elements.
     *
     */
    "isResourcePrincipalDisabled"?: boolean;
    "resourceConfig"?: model.ContainerResourceConfig;
    /**
     * The number of container restart attempts. A restart may be attempted after a health check failure or a container exit, based on the restart policy. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "containerRestartAttemptCount"?: number;
}
export declare namespace Container {
    enum LifecycleState {
        Creating = "CREATING",
        Updating = "UPDATING",
        Active = "ACTIVE",
        Inactive = "INACTIVE",
        Deleting = "DELETING",
        Deleted = "DELETED",
        Failed = "FAILED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum AdditionalCapabilities {
        CapNetAdmin = "CAP_NET_ADMIN",
        CapNetRaw = "CAP_NET_RAW",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: Container): object;
    function getDeserializedJsonObj(obj: Container): object;
}
