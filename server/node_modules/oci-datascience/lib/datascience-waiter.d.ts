/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DataScienceClient } from "./client";
export declare class DataScienceWaiter {
    private client;
    private readonly config?;
    constructor(client: DataScienceClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobResponse | null (null in case of 404 response)
     */
    forJob(request: serviceRequests.GetJobRequest, ...targetStates: models.JobLifecycleState[]): Promise<serviceResponses.GetJobResponse | null>;
    /**
     * Waits forJobRun till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobRunResponse | null (null in case of 404 response)
     */
    forJobRun(request: serviceRequests.GetJobRunRequest, ...targetStates: models.JobRunLifecycleState[]): Promise<serviceResponses.GetJobRunResponse | null>;
    /**
     * Waits forModel till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetModelResponse | null (null in case of 404 response)
     */
    forModel(request: serviceRequests.GetModelRequest, ...targetStates: models.ModelLifecycleState[]): Promise<serviceResponses.GetModelResponse | null>;
    /**
     * Waits forModelDeployment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetModelDeploymentResponse | null (null in case of 404 response)
     */
    forModelDeployment(request: serviceRequests.GetModelDeploymentRequest, ...targetStates: models.ModelDeploymentLifecycleState[]): Promise<serviceResponses.GetModelDeploymentResponse | null>;
    /**
     * Waits forModelVersionSet till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetModelVersionSetResponse | null (null in case of 404 response)
     */
    forModelVersionSet(request: serviceRequests.GetModelVersionSetRequest, ...targetStates: models.ModelVersionSetLifecycleState[]): Promise<serviceResponses.GetModelVersionSetResponse | null>;
    /**
     * Waits forNotebookSession till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNotebookSessionResponse | null (null in case of 404 response)
     */
    forNotebookSession(request: serviceRequests.GetNotebookSessionRequest, ...targetStates: models.NotebookSessionLifecycleState[]): Promise<serviceResponses.GetNotebookSessionResponse | null>;
    /**
     * Waits forPipeline till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPipelineResponse | null (null in case of 404 response)
     */
    forPipeline(request: serviceRequests.GetPipelineRequest, ...targetStates: models.PipelineLifecycleState[]): Promise<serviceResponses.GetPipelineResponse | null>;
    /**
     * Waits forPipelineRun till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPipelineRunResponse | null (null in case of 404 response)
     */
    forPipelineRun(request: serviceRequests.GetPipelineRunRequest, ...targetStates: models.PipelineRunLifecycleState[]): Promise<serviceResponses.GetPipelineRunResponse | null>;
    /**
     * Waits forProject till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetProjectResponse | null (null in case of 404 response)
     */
    forProject(request: serviceRequests.GetProjectRequest, ...targetStates: models.ProjectLifecycleState[]): Promise<serviceResponses.GetProjectResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
