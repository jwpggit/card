/**
 * Oracle Cloud VMware Solution API
 * Use the Oracle Cloud VMware API to create SDDCs and manage ESXi hosts and software.
For more information, see [Oracle Cloud VMware Solution](/iaas/Content/VMware/Concepts/ocvsoverview.htm).

 * OpenAPI spec version: 20200501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { EsxiHostWaiter } from "./esxihost-waiter";
import { SddcWaiter } from "./sddc-waiter";
import { WorkRequestWaiter } from "./workrequest-waiter";
export declare enum EsxiHostApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class EsxiHostClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": EsxiHostWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpOptions: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new EsxiHostWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): EsxiHostWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): EsxiHostWaiter;
    /**
       * Adds another ESXi host to an existing SDDC. The attributes of the specified
  * `Sddc` determine the VMware software and other configuration settings used
  * by the ESXi host.
  * <p>
  Use the {@link WorkRequest} operations to track the
  * creation of the ESXi host.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateEsxiHostRequest
       * @return CreateEsxiHostResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/CreateEsxiHost.ts.html |here} to see how to use CreateEsxiHost API.
       */
    createEsxiHost(createEsxiHostRequest: requests.CreateEsxiHostRequest): Promise<responses.CreateEsxiHostResponse>;
    /**
       * Deletes the specified ESXi host. Before deleting the host, back up or
  * migrate any VMware workloads running on it.
  * <p>
  When you delete an ESXi host, Oracle does not remove the node
  * configuration within the VMware environment itself. That is
  * your responsibility.
  * <p>
  **Note:** If you delete EXSi hosts from the SDDC to total less than 3,
  * you are still billed for the 3 minimum recommended EXSi hosts. Also,
  * you cannot add more VMware workloads to the SDDC until it again has at
  * least 3 ESXi hosts.
  * <p>
  Use the {@link WorkRequest} operations to track the
  * deletion of the ESXi host.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteEsxiHostRequest
       * @return DeleteEsxiHostResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/DeleteEsxiHost.ts.html |here} to see how to use DeleteEsxiHost API.
       */
    deleteEsxiHost(deleteEsxiHostRequest: requests.DeleteEsxiHostRequest): Promise<responses.DeleteEsxiHostResponse>;
    /**
     * Gets the specified ESXi host's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetEsxiHostRequest
     * @return GetEsxiHostResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/GetEsxiHost.ts.html |here} to see how to use GetEsxiHost API.
     */
    getEsxiHost(getEsxiHostRequest: requests.GetEsxiHostRequest): Promise<responses.GetEsxiHostResponse>;
    /**
       * Lists the ESXi hosts in the specified SDDC. The list can be filtered
  * by Compute instance OCID or ESXi display name.
  * <p>
  Remember that in terms of implementation, an ESXi host is a Compute instance that
  * is configured with the chosen bundle of VMware software. Each `EsxiHost`
  * object has its own OCID (`id`), and a separate attribute for the OCID of
  * the Compute instance (`computeInstanceId`). When filtering the list of
  * ESXi hosts, you can specify the OCID of the Compute instance, not the
  * ESXi host OCID.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListEsxiHostsRequest
       * @return ListEsxiHostsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/ListEsxiHosts.ts.html |here} to see how to use ListEsxiHosts API.
       */
    listEsxiHosts(listEsxiHostsRequest: requests.ListEsxiHostsRequest): Promise<responses.ListEsxiHostsResponse>;
    /**
     * Updates the specified ESXi host.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateEsxiHostRequest
     * @return UpdateEsxiHostResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/UpdateEsxiHost.ts.html |here} to see how to use UpdateEsxiHost API.
     */
    updateEsxiHost(updateEsxiHostRequest: requests.UpdateEsxiHostRequest): Promise<responses.UpdateEsxiHostResponse>;
}
export declare enum SddcApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class SddcClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": SddcWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpOptions: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new SddcWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): SddcWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): SddcWaiter;
    /**
     * Cancel the pending SDDC downgrade from HCX Enterprise to HCX Advanced.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelDowngradeHcxRequest
     * @return CancelDowngradeHcxResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/CancelDowngradeHcx.ts.html |here} to see how to use CancelDowngradeHcx API.
     */
    cancelDowngradeHcx(cancelDowngradeHcxRequest: requests.CancelDowngradeHcxRequest): Promise<responses.CancelDowngradeHcxResponse>;
    /**
     * Moves an SDDC into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSddcCompartmentRequest
     * @return ChangeSddcCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/ChangeSddcCompartment.ts.html |here} to see how to use ChangeSddcCompartment API.
     */
    changeSddcCompartment(changeSddcCompartmentRequest: requests.ChangeSddcCompartmentRequest): Promise<responses.ChangeSddcCompartmentResponse>;
    /**
       * Creates an Oracle Cloud VMware Solution software-defined data center (SDDC).
  * <p>
  Use the {@link WorkRequest} operations to track the
  * creation of the SDDC.
  * <p>
  **Important:** You must configure the SDDC's networking resources with the security rules detailed in [Security Rules for Oracle Cloud VMware Solution SDDCs](https://docs.cloud.oracle.com/iaas/Content/VMware/Reference/ocvssecurityrules.htm). Otherwise, provisioning the SDDC will fail. The rules are based on the requirements set by VMware.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateSddcRequest
       * @return CreateSddcResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/CreateSddc.ts.html |here} to see how to use CreateSddc API.
       */
    createSddc(createSddcRequest: requests.CreateSddcRequest): Promise<responses.CreateSddcResponse>;
    /**
       * Deletes the specified SDDC, along with the other resources that were
  * created with the SDDC. For example: the Compute instances, DNS records,
  * and so on.
  * <p>
  Use the {@link WorkRequest} operations to track the
  * deletion of the SDDC.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteSddcRequest
       * @return DeleteSddcResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/DeleteSddc.ts.html |here} to see how to use DeleteSddc API.
       */
    deleteSddc(deleteSddcRequest: requests.DeleteSddcRequest): Promise<responses.DeleteSddcResponse>;
    /**
     * Downgrade the specified SDDC from HCX Enterprise to HCX Advanced.
     * SDDC with standard compute shapes will always use HCX Enterprise if HCX is enabled and cannot be downgraded.
     * Downgrading from HCX Enterprise to HCX Advanced reduces the number of provided license keys from 10 to 3.
     * Downgrade remains in a `PENDING` state until the end of the current billing cycle. You can use {@link #cancelDowngradeHcx(CancelDowngradeHcxRequest) cancelDowngradeHcx}
     * to cancel the downgrade while it's still in a `PENDING` state.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DowngradeHcxRequest
     * @return DowngradeHcxResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/DowngradeHcx.ts.html |here} to see how to use DowngradeHcx API.
     */
    downgradeHcx(downgradeHcxRequest: requests.DowngradeHcxRequest): Promise<responses.DowngradeHcxResponse>;
    /**
     * Gets the specified SDDC's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSddcRequest
     * @return GetSddcResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/GetSddc.ts.html |here} to see how to use GetSddc API.
     */
    getSddc(getSddcRequest: requests.GetSddcRequest): Promise<responses.GetSddcResponse>;
    /**
     * Lists the SDDCs in the specified compartment. The list can be
     * filtered by display name or availability domain.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSddcsRequest
     * @return ListSddcsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/ListSddcs.ts.html |here} to see how to use ListSddcs API.
     */
    listSddcs(listSddcsRequest: requests.ListSddcsRequest): Promise<responses.ListSddcsResponse>;
    /**
     * Lists supported compute shapes for ESXi hosts.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSupportedHostShapesRequest
     * @return ListSupportedHostShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/ListSupportedHostShapes.ts.html |here} to see how to use ListSupportedHostShapes API.
     */
    listSupportedHostShapes(listSupportedHostShapesRequest: requests.ListSupportedHostShapesRequest): Promise<responses.ListSupportedHostShapesResponse>;
    /**
     * Lists supported SKUs.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSupportedSkusRequest
     * @return ListSupportedSkusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/ListSupportedSkus.ts.html |here} to see how to use ListSupportedSkus API.
     */
    listSupportedSkus(listSupportedSkusRequest: requests.ListSupportedSkusRequest): Promise<responses.ListSupportedSkusResponse>;
    /**
     * Lists the versions of bundled VMware software supported by the Oracle Cloud
     * VMware Solution.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSupportedVmwareSoftwareVersionsRequest
     * @return ListSupportedVmwareSoftwareVersionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/ListSupportedVmwareSoftwareVersions.ts.html |here} to see how to use ListSupportedVmwareSoftwareVersions API.
     */
    listSupportedVmwareSoftwareVersions(listSupportedVmwareSoftwareVersionsRequest: requests.ListSupportedVmwareSoftwareVersionsRequest): Promise<responses.ListSupportedVmwareSoftwareVersionsResponse>;
    /**
     * Refresh HCX on-premise licenses status of the specified SDDC.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RefreshHcxLicenseStatusRequest
     * @return RefreshHcxLicenseStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/RefreshHcxLicenseStatus.ts.html |here} to see how to use RefreshHcxLicenseStatus API.
     */
    refreshHcxLicenseStatus(refreshHcxLicenseStatusRequest: requests.RefreshHcxLicenseStatusRequest): Promise<responses.RefreshHcxLicenseStatusResponse>;
    /**
     * Updates the specified SDDC.
     * <p>
     **Important:** Updating an SDDC affects only certain attributes in the `Sddc`
     * object and does not affect the VMware environment currently running in
     * the SDDC. For more information, see
     * {@link #updateSddcDetails(UpdateSddcDetailsRequest) updateSddcDetails}.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSddcRequest
     * @return UpdateSddcResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/UpdateSddc.ts.html |here} to see how to use UpdateSddc API.
     */
    updateSddc(updateSddcRequest: requests.UpdateSddcRequest): Promise<responses.UpdateSddcResponse>;
    /**
     * Upgrade the specified SDDC from HCX Advanced to HCX Enterprise.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpgradeHcxRequest
     * @return UpgradeHcxResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/UpgradeHcx.ts.html |here} to see how to use UpgradeHcx API.
     */
    upgradeHcx(upgradeHcxRequest: requests.UpgradeHcxRequest): Promise<responses.UpgradeHcxResponse>;
}
export declare enum WorkRequestApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class WorkRequestClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": WorkRequestWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpOptions: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new WorkRequestWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): WorkRequestWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): WorkRequestWaiter;
    /**
     * Gets the specified work request's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Lists the errors for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Lists the logs for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/ocvp/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
}
