/**
 * NoSQL Database API
 * The control plane API for NoSQL Database Cloud Service HTTPS
provides endpoints to perform NDCS operations, including creation
and deletion of tables and indexes; population and access of data
in tables; and access of table usage metrics.

 * OpenAPI spec version: 20190828
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { NosqlWaiter } from "./nosql-waiter";
export declare enum NosqlApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class NosqlClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": NosqlWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpOptions: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new NosqlWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): NosqlWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): NosqlWaiter;
    /**
     * Change a table's compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeTableCompartmentRequest
     * @return ChangeTableCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/ChangeTableCompartment.ts.html |here} to see how to use ChangeTableCompartment API.
     */
    changeTableCompartment(changeTableCompartmentRequest: requests.ChangeTableCompartmentRequest): Promise<responses.ChangeTableCompartmentResponse>;
    /**
     * Create a new index on the table identified by tableNameOrId.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateIndexRequest
     * @return CreateIndexResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/CreateIndex.ts.html |here} to see how to use CreateIndex API.
     */
    createIndex(createIndexRequest: requests.CreateIndexRequest): Promise<responses.CreateIndexResponse>;
    /**
     * Create a new table.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateTableRequest
     * @return CreateTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/CreateTable.ts.html |here} to see how to use CreateTable API.
     */
    createTable(createTableRequest: requests.CreateTableRequest): Promise<responses.CreateTableResponse>;
    /**
     * Delete an index from the table identified by tableNameOrId.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteIndexRequest
     * @return DeleteIndexResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/DeleteIndex.ts.html |here} to see how to use DeleteIndex API.
     */
    deleteIndex(deleteIndexRequest: requests.DeleteIndexRequest): Promise<responses.DeleteIndexResponse>;
    /**
     * Delete a single row from the table, by primary key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteRowRequest
     * @return DeleteRowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/DeleteRow.ts.html |here} to see how to use DeleteRow API.
     */
    deleteRow(deleteRowRequest: requests.DeleteRowRequest): Promise<responses.DeleteRowResponse>;
    /**
     * Delete a table by tableNameOrId.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteTableRequest
     * @return DeleteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/DeleteTable.ts.html |here} to see how to use DeleteTable API.
     */
    deleteTable(deleteTableRequest: requests.DeleteTableRequest): Promise<responses.DeleteTableResponse>;
    /**
     * Cancel a work request operation with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteWorkRequestRequest
     * @return DeleteWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/DeleteWorkRequest.ts.html |here} to see how to use DeleteWorkRequest API.
     */
    deleteWorkRequest(deleteWorkRequestRequest: requests.DeleteWorkRequestRequest): Promise<responses.DeleteWorkRequestResponse>;
    /**
     * Get information about a single index.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetIndexRequest
     * @return GetIndexResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/GetIndex.ts.html |here} to see how to use GetIndex API.
     */
    getIndex(getIndexRequest: requests.GetIndexRequest): Promise<responses.GetIndexResponse>;
    /**
     * Get a single row from the table by primary key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRowRequest
     * @return GetRowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/GetRow.ts.html |here} to see how to use GetRow API.
     */
    getRow(getRowRequest: requests.GetRowRequest): Promise<responses.GetRowResponse>;
    /**
     * Get table info by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTableRequest
     * @return GetTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/GetTable.ts.html |here} to see how to use GetTable API.
     */
    getTable(getTableRequest: requests.GetTableRequest): Promise<responses.GetTableResponse>;
    /**
     * Get the status of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Get a list of indexes on a table.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListIndexesRequest
     * @return ListIndexesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/ListIndexes.ts.html |here} to see how to use ListIndexes API.
     */
    listIndexes(listIndexesRequest: requests.ListIndexesRequest): Promise<responses.ListIndexesResponse>;
    /**
     * Get table usage info.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTableUsageRequest
     * @return ListTableUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/ListTableUsage.ts.html |here} to see how to use ListTableUsage API.
     */
    listTableUsage(listTableUsageRequest: requests.ListTableUsageRequest): Promise<responses.ListTableUsageResponse>;
    /**
     * Get a list of tables in a compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTablesRequest
     * @return ListTablesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/ListTables.ts.html |here} to see how to use ListTables API.
     */
    listTables(listTablesRequest: requests.ListTablesRequest): Promise<responses.ListTablesResponse>;
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * List the work requests in a compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * Prepare a SQL statement for use in a query with variable substitution.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PrepareStatementRequest
     * @return PrepareStatementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/PrepareStatement.ts.html |here} to see how to use PrepareStatement API.
     */
    prepareStatement(prepareStatementRequest: requests.PrepareStatementRequest): Promise<responses.PrepareStatementResponse>;
    /**
     * Execute a SQL query.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param QueryRequest
     * @return QueryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/Query.ts.html |here} to see how to use Query API.
     */
    query(queryRequest: requests.QueryRequest): Promise<responses.QueryResponse>;
    /**
     * Check the syntax and return a brief summary of a SQL statement.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeStatementRequest
     * @return SummarizeStatementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/SummarizeStatement.ts.html |here} to see how to use SummarizeStatement API.
     */
    summarizeStatement(summarizeStatementRequest: requests.SummarizeStatementRequest): Promise<responses.SummarizeStatementResponse>;
    /**
     * Write a single row into the table.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateRowRequest
     * @return UpdateRowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/UpdateRow.ts.html |here} to see how to use UpdateRow API.
     */
    updateRow(updateRowRequest: requests.UpdateRowRequest): Promise<responses.UpdateRowResponse>;
    /**
     * Alter the table identified by tableNameOrId,
     * changing schema, limits, or tags
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateTableRequest
     * @return UpdateTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/nosql/UpdateTable.ts.html |here} to see how to use UpdateTable API.
     */
    updateTable(updateTableRequest: requests.UpdateTableRequest): Promise<responses.UpdateTableResponse>;
}
