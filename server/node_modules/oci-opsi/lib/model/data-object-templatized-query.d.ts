/**
 * Operations Insights API
 * Use the Operations Insights API to perform data extraction operations to obtain database
resource utilization, performance statistics, and reference information. For more information,
see [About Oracle Cloud Infrastructure Operations Insights](https://docs.cloud.oracle.com/en-us/iaas/operations-insights/doc/operations-insights.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Information required in a structured template to form and execute query on a data object.
 */
export interface DataObjectTemplatizedQuery extends model.DataObjectQuery {
    /**
     * List of items to be added into the SELECT clause of the query; items will be added with comma separation.
     */
    "selectList"?: Array<string>;
    /**
     * List of items to be added into the WHERE clause of the query; items will be added with AND separation.
     * Item can contain a single condition or multiple conditions.
     * Single condition e.g:  \"optimizer_mode='mode1'\"
     * Multiple conditions e.g: (module='module1' OR module='module2')
     *
     */
    "whereConditionsList"?: Array<string>;
    /**
     * List of items to be added into the GROUP BY clause of the query; items will be added with comma separation.
     */
    "groupByList"?: Array<string>;
    /**
     * List of items to be added into the HAVING clause of the query; items will be added with AND separation.
     */
    "havingConditionsList"?: Array<string>;
    /**
     * List of items to be added into the ORDER BY clause of the query; items will be added with comma separation.
     */
    "orderByList"?: Array<string>;
    "timeFilters"?: model.DataObjectQueryTimeFilters;
    "queryType": string;
}
export declare namespace DataObjectTemplatizedQuery {
    function getJsonObj(obj: DataObjectTemplatizedQuery, isParentJsonObj?: boolean): object;
    const queryType = "TEMPLATIZED_QUERY";
    function getDeserializedJsonObj(obj: DataObjectTemplatizedQuery, isParentJsonObj?: boolean): object;
}
