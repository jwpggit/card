"use strict";
/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm). This REST API is SCIM compliant.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityDomainsClient = exports.IdentityDomainsApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var IdentityDomainsApiKeys;
(function (IdentityDomainsApiKeys) {
})(IdentityDomainsApiKeys = exports.IdentityDomainsApiKeys || (exports.IdentityDomainsApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class IdentityDomainsClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = false;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this.targetService = "IdentityDomains";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/admin/v1";
        if (this.logger)
            this.logger.info(`IdentityDomainsClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
    }
    /**
     * Add a user's api key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateApiKeyRequest
     * @return CreateApiKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateApiKey.ts.html |here} to see how to use CreateApiKey API.
     */
    createApiKey(createApiKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createApiKey.");
            const operationName = "createApiKey";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createApiKeyRequest.attributes,
                "attributeSets": createApiKeyRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createApiKeyRequest.authorization,
                "resource_type_schema_version": createApiKeyRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createApiKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createApiKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ApiKeys",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createApiKeyRequest.apiKey, "ApiKey", model.ApiKey.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "apiKey",
                    bodyModel: model.ApiKey,
                    type: "model.ApiKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a user's auth token
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateAuthTokenRequest
     * @return CreateAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateAuthToken.ts.html |here} to see how to use CreateAuthToken API.
     */
    createAuthToken(createAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createAuthToken.");
            const operationName = "createAuthToken";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createAuthTokenRequest.attributes,
                "attributeSets": createAuthTokenRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createAuthTokenRequest.authorization,
                "resource_type_schema_version": createAuthTokenRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createAuthTokenRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthTokens",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAuthTokenRequest.authToken, "AuthToken", model.AuthToken.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authToken",
                    bodyModel: model.AuthToken,
                    type: "model.AuthToken",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove All Authentication Factor Channels for a User
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateAuthenticationFactorsRemoverRequest
     * @return CreateAuthenticationFactorsRemoverResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateAuthenticationFactorsRemover.ts.html |here} to see how to use CreateAuthenticationFactorsRemover API.
     */
    createAuthenticationFactorsRemover(createAuthenticationFactorsRemoverRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createAuthenticationFactorsRemover.");
            const operationName = "createAuthenticationFactorsRemover";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createAuthenticationFactorsRemoverRequest.authorization,
                "resource_type_schema_version": createAuthenticationFactorsRemoverRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createAuthenticationFactorsRemoverRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAuthenticationFactorsRemoverRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthenticationFactorsRemover",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAuthenticationFactorsRemoverRequest.authenticationFactorsRemover, "AuthenticationFactorsRemover", model.AuthenticationFactorsRemover.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authenticationFactorsRemover",
                    bodyModel: model.AuthenticationFactorsRemover,
                    type: "model.AuthenticationFactorsRemover",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a user's customer secret key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateCustomerSecretKeyRequest
     * @return CreateCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateCustomerSecretKey.ts.html |here} to see how to use CreateCustomerSecretKey API.
     */
    createCustomerSecretKey(createCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createCustomerSecretKey.");
            const operationName = "createCustomerSecretKey";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createCustomerSecretKeyRequest.attributes,
                "attributeSets": createCustomerSecretKeyRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createCustomerSecretKeyRequest.authorization,
                "resource_type_schema_version": createCustomerSecretKeyRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createCustomerSecretKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/CustomerSecretKeys",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCustomerSecretKeyRequest.customerSecretKey, "CustomerSecretKey", model.CustomerSecretKey.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customerSecretKey",
                    bodyModel: model.CustomerSecretKey,
                    type: "model.CustomerSecretKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a DynamicResourceGroup
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDynamicResourceGroupRequest
     * @return CreateDynamicResourceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateDynamicResourceGroup.ts.html |here} to see how to use CreateDynamicResourceGroup API.
     */
    createDynamicResourceGroup(createDynamicResourceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createDynamicResourceGroup.");
            const operationName = "createDynamicResourceGroup";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createDynamicResourceGroupRequest.attributes,
                "attributeSets": createDynamicResourceGroupRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createDynamicResourceGroupRequest.authorization,
                "resource_type_schema_version": createDynamicResourceGroupRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createDynamicResourceGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDynamicResourceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/DynamicResourceGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDynamicResourceGroupRequest.dynamicResourceGroup, "DynamicResourceGroup", model.DynamicResourceGroup.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dynamicResourceGroup",
                    bodyModel: model.DynamicResourceGroup,
                    type: "model.DynamicResourceGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Group
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateGroupRequest
     * @return CreateGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateGroup.ts.html |here} to see how to use CreateGroup API.
     */
    createGroup(createGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createGroup.");
            const operationName = "createGroup";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createGroupRequest.attributes,
                "attributeSets": createGroupRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createGroupRequest.authorization,
                "resource_type_schema_version": createGroupRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Groups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createGroupRequest.group, "Group", model.Group.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "group",
                    bodyModel: model.Group,
                    type: "model.Group",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create an Identity Provider
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateIdentityProviderRequest
     * @return CreateIdentityProviderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateIdentityProvider.ts.html |here} to see how to use CreateIdentityProvider API.
     */
    createIdentityProvider(createIdentityProviderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createIdentityProvider.");
            const operationName = "createIdentityProvider";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createIdentityProviderRequest.attributes,
                "attributeSets": createIdentityProviderRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createIdentityProviderRequest.authorization,
                "resource_type_schema_version": createIdentityProviderRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createIdentityProviderRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createIdentityProviderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/IdentityProviders",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createIdentityProviderRequest.identityProvider, "IdentityProvider", model.IdentityProvider.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "identityProvider",
                    bodyModel: model.IdentityProvider,
                    type: "model.IdentityProvider",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Self Register
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMeRequest
     * @return CreateMeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMe.ts.html |here} to see how to use CreateMe API.
     */
    createMe(createMeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMe.");
            const operationName = "createMe";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createMeRequest.attributes,
                "attributeSets": createMeRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMeRequest.authorization,
                "resource_type_schema_version": createMeRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMeRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Me",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMeRequest.me, "Me", model.Me.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "me",
                    bodyModel: model.Me,
                    type: "model.Me",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a user's api key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMyApiKeyRequest
     * @return CreateMyApiKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMyApiKey.ts.html |here} to see how to use CreateMyApiKey API.
     */
    createMyApiKey(createMyApiKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMyApiKey.");
            const operationName = "createMyApiKey";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMyApiKeyRequest.authorization,
                "resource_type_schema_version": createMyApiKeyRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMyApiKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMyApiKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyApiKeys",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMyApiKeyRequest.myApiKey, "MyApiKey", model.MyApiKey.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myApiKey",
                    bodyModel: model.MyApiKey,
                    type: "model.MyApiKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add user's auth token
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMyAuthTokenRequest
     * @return CreateMyAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMyAuthToken.ts.html |here} to see how to use CreateMyAuthToken API.
     */
    createMyAuthToken(createMyAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMyAuthToken.");
            const operationName = "createMyAuthToken";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMyAuthTokenRequest.authorization,
                "resource_type_schema_version": createMyAuthTokenRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMyAuthTokenRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMyAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyAuthTokens",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMyAuthTokenRequest.myAuthToken, "MyAuthToken", model.MyAuthToken.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myAuthToken",
                    bodyModel: model.MyAuthToken,
                    type: "model.MyAuthToken",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Initiate Self Service Enrollment using the Requested MFA Factor
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMyAuthenticationFactorInitiatorRequest
     * @return CreateMyAuthenticationFactorInitiatorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMyAuthenticationFactorInitiator.ts.html |here} to see how to use CreateMyAuthenticationFactorInitiator API.
     */
    createMyAuthenticationFactorInitiator(createMyAuthenticationFactorInitiatorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMyAuthenticationFactorInitiator.");
            const operationName = "createMyAuthenticationFactorInitiator";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMyAuthenticationFactorInitiatorRequest.authorization,
                "resource_type_schema_version": createMyAuthenticationFactorInitiatorRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMyAuthenticationFactorInitiatorRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMyAuthenticationFactorInitiatorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyAuthenticationFactorInitiator",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMyAuthenticationFactorInitiatorRequest.myAuthenticationFactorInitiator, "MyAuthenticationFactorInitiator", model.MyAuthenticationFactorInitiator.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myAuthenticationFactorInitiator",
                    bodyModel: model.MyAuthenticationFactorInitiator,
                    type: "model.MyAuthenticationFactorInitiator",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Validate Self Service Enrollment using the Requested MFA Factor
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMyAuthenticationFactorValidatorRequest
     * @return CreateMyAuthenticationFactorValidatorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMyAuthenticationFactorValidator.ts.html |here} to see how to use CreateMyAuthenticationFactorValidator API.
     */
    createMyAuthenticationFactorValidator(createMyAuthenticationFactorValidatorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMyAuthenticationFactorValidator.");
            const operationName = "createMyAuthenticationFactorValidator";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMyAuthenticationFactorValidatorRequest.authorization,
                "resource_type_schema_version": createMyAuthenticationFactorValidatorRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMyAuthenticationFactorValidatorRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMyAuthenticationFactorValidatorRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyAuthenticationFactorValidator",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMyAuthenticationFactorValidatorRequest.myAuthenticationFactorValidator, "MyAuthenticationFactorValidator", model.MyAuthenticationFactorValidator.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myAuthenticationFactorValidator",
                    bodyModel: model.MyAuthenticationFactorValidator,
                    type: "model.MyAuthenticationFactorValidator",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove All Authentication Factor Channels for a User
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMyAuthenticationFactorsRemoverRequest
     * @return CreateMyAuthenticationFactorsRemoverResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMyAuthenticationFactorsRemover.ts.html |here} to see how to use CreateMyAuthenticationFactorsRemover API.
     */
    createMyAuthenticationFactorsRemover(createMyAuthenticationFactorsRemoverRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMyAuthenticationFactorsRemover.");
            const operationName = "createMyAuthenticationFactorsRemover";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMyAuthenticationFactorsRemoverRequest.authorization,
                "resource_type_schema_version": createMyAuthenticationFactorsRemoverRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMyAuthenticationFactorsRemoverRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMyAuthenticationFactorsRemoverRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyAuthenticationFactorsRemover",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMyAuthenticationFactorsRemoverRequest.myAuthenticationFactorsRemover, "MyAuthenticationFactorsRemover", model.MyAuthenticationFactorsRemover.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myAuthenticationFactorsRemover",
                    bodyModel: model.MyAuthenticationFactorsRemover,
                    type: "model.MyAuthenticationFactorsRemover",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a user's customer secret key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMyCustomerSecretKeyRequest
     * @return CreateMyCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMyCustomerSecretKey.ts.html |here} to see how to use CreateMyCustomerSecretKey API.
     */
    createMyCustomerSecretKey(createMyCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMyCustomerSecretKey.");
            const operationName = "createMyCustomerSecretKey";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMyCustomerSecretKeyRequest.authorization,
                "resource_type_schema_version": createMyCustomerSecretKeyRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMyCustomerSecretKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMyCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyCustomerSecretKeys",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMyCustomerSecretKeyRequest.myCustomerSecretKey, "MyCustomerSecretKey", model.MyCustomerSecretKey.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myCustomerSecretKey",
                    bodyModel: model.MyCustomerSecretKey,
                    type: "model.MyCustomerSecretKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a user's oauth2 client credential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMyOAuth2ClientCredentialRequest
     * @return CreateMyOAuth2ClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMyOAuth2ClientCredential.ts.html |here} to see how to use CreateMyOAuth2ClientCredential API.
     */
    createMyOAuth2ClientCredential(createMyOAuth2ClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMyOAuth2ClientCredential.");
            const operationName = "createMyOAuth2ClientCredential";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMyOAuth2ClientCredentialRequest.authorization,
                "resource_type_schema_version": createMyOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMyOAuth2ClientCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMyOAuth2ClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyOAuth2ClientCredentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMyOAuth2ClientCredentialRequest.myOAuth2ClientCredential, "MyOAuth2ClientCredential", model.MyOAuth2ClientCredential.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myOAuth2ClientCredential",
                    bodyModel: model.MyOAuth2ClientCredential,
                    type: "model.MyOAuth2ClientCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a user's smtp credenials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMySmtpCredentialRequest
     * @return CreateMySmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMySmtpCredential.ts.html |here} to see how to use CreateMySmtpCredential API.
     */
    createMySmtpCredential(createMySmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMySmtpCredential.");
            const operationName = "createMySmtpCredential";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMySmtpCredentialRequest.authorization,
                "resource_type_schema_version": createMySmtpCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMySmtpCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMySmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MySmtpCredentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMySmtpCredentialRequest.mySmtpCredential, "MySmtpCredential", model.MySmtpCredential.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mySmtpCredential",
                    bodyModel: model.MySmtpCredential,
                    type: "model.MySmtpCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Support Account
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMySupportAccountRequest
     * @return CreateMySupportAccountResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMySupportAccount.ts.html |here} to see how to use CreateMySupportAccount API.
     */
    createMySupportAccount(createMySupportAccountRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMySupportAccount.");
            const operationName = "createMySupportAccount";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMySupportAccountRequest.authorization,
                "resource_type_schema_version": createMySupportAccountRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMySupportAccountRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMySupportAccountRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MySupportAccounts",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMySupportAccountRequest.mySupportAccount, "MySupportAccount", model.MySupportAccount.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mySupportAccount",
                    bodyModel: model.MySupportAccount,
                    type: "model.MySupportAccount",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Set a User's DbCredential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMyUserDbCredentialRequest
     * @return CreateMyUserDbCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateMyUserDbCredential.ts.html |here} to see how to use CreateMyUserDbCredential API.
     */
    createMyUserDbCredential(createMyUserDbCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createMyUserDbCredential.");
            const operationName = "createMyUserDbCredential";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createMyUserDbCredentialRequest.authorization,
                "resource_type_schema_version": createMyUserDbCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createMyUserDbCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMyUserDbCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyUserDbCredentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMyUserDbCredentialRequest.myUserDbCredential, "MyUserDbCredential", model.MyUserDbCredential.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myUserDbCredential",
                    bodyModel: model.MyUserDbCredential,
                    type: "model.MyUserDbCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a user's oauth2 client credential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateOAuth2ClientCredentialRequest
     * @return CreateOAuth2ClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateOAuth2ClientCredential.ts.html |here} to see how to use CreateOAuth2ClientCredential API.
     */
    createOAuth2ClientCredential(createOAuth2ClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createOAuth2ClientCredential.");
            const operationName = "createOAuth2ClientCredential";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createOAuth2ClientCredentialRequest.attributes,
                "attributeSets": createOAuth2ClientCredentialRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createOAuth2ClientCredentialRequest.authorization,
                "resource_type_schema_version": createOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createOAuth2ClientCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOAuth2ClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/OAuth2ClientCredentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOAuth2ClientCredentialRequest.oAuth2ClientCredential, "OAuth2ClientCredential", model.OAuth2ClientCredential.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "oAuth2ClientCredential",
                    bodyModel: model.OAuth2ClientCredential,
                    type: "model.OAuth2ClientCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Password Policy
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreatePasswordPolicyRequest
     * @return CreatePasswordPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreatePasswordPolicy.ts.html |here} to see how to use CreatePasswordPolicy API.
     */
    createPasswordPolicy(createPasswordPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createPasswordPolicy.");
            const operationName = "createPasswordPolicy";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createPasswordPolicyRequest.attributes,
                "attributeSets": createPasswordPolicyRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createPasswordPolicyRequest.authorization,
                "resource_type_schema_version": createPasswordPolicyRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createPasswordPolicyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createPasswordPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/PasswordPolicies",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createPasswordPolicyRequest.passwordPolicy, "PasswordPolicy", model.PasswordPolicy.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "passwordPolicy",
                    bodyModel: model.PasswordPolicy,
                    type: "model.PasswordPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a user's smtp credenials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSmtpCredentialRequest
     * @return CreateSmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateSmtpCredential.ts.html |here} to see how to use CreateSmtpCredential API.
     */
    createSmtpCredential(createSmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createSmtpCredential.");
            const operationName = "createSmtpCredential";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createSmtpCredentialRequest.attributes,
                "attributeSets": createSmtpCredentialRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createSmtpCredentialRequest.authorization,
                "resource_type_schema_version": createSmtpCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createSmtpCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/SmtpCredentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSmtpCredentialRequest.smtpCredential, "SmtpCredential", model.SmtpCredential.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "smtpCredential",
                    bodyModel: model.SmtpCredential,
                    type: "model.SmtpCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a User
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateUserRequest
     * @return CreateUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateUser.ts.html |here} to see how to use CreateUser API.
     */
    createUser(createUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createUser.");
            const operationName = "createUser";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createUserRequest.attributes,
                "attributeSets": createUserRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createUserRequest.authorization,
                "resource_type_schema_version": createUserRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createUserRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Users",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createUserRequest.user, "User", model.User.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "user",
                    bodyModel: model.User,
                    type: "model.User",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Set a User's DbCredential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateUserDbCredentialRequest
     * @return CreateUserDbCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/CreateUserDbCredential.ts.html |here} to see how to use CreateUserDbCredential API.
     */
    createUserDbCredential(createUserDbCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#createUserDbCredential.");
            const operationName = "createUserDbCredential";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": createUserDbCredentialRequest.attributes,
                "attributeSets": createUserDbCredentialRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": createUserDbCredentialRequest.authorization,
                "resource_type_schema_version": createUserDbCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": createUserDbCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createUserDbCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/UserDbCredentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createUserDbCredentialRequest.userDbCredential, "UserDbCredential", model.UserDbCredential.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userDbCredential",
                    bodyModel: model.UserDbCredential,
                    type: "model.UserDbCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete user's api key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteApiKeyRequest
     * @return DeleteApiKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteApiKey.ts.html |here} to see how to use DeleteApiKey API.
     */
    deleteApiKey(deleteApiKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteApiKey.");
            const operationName = "deleteApiKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{apiKeyId}": deleteApiKeyRequest.apiKeyId
            };
            const queryParams = {
                "forceDelete": deleteApiKeyRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteApiKeyRequest.authorization,
                "resource_type_schema_version": deleteApiKeyRequest.resourceTypeSchemaVersion,
                "if-match": deleteApiKeyRequest.ifMatch,
                "opc-retry-token": deleteApiKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteApiKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ApiKeys/{apiKeyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete user's auth token
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteAuthTokenRequest
     * @return DeleteAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteAuthToken.ts.html |here} to see how to use DeleteAuthToken API.
     */
    deleteAuthToken(deleteAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteAuthToken.");
            const operationName = "deleteAuthToken";
            const apiReferenceLink = "";
            const pathParams = {
                "{authTokenId}": deleteAuthTokenRequest.authTokenId
            };
            const queryParams = {
                "forceDelete": deleteAuthTokenRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteAuthTokenRequest.authorization,
                "resource_type_schema_version": deleteAuthTokenRequest.resourceTypeSchemaVersion,
                "if-match": deleteAuthTokenRequest.ifMatch,
                "opc-retry-token": deleteAuthTokenRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthTokens/{authTokenId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete user's customer secret key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteCustomerSecretKeyRequest
     * @return DeleteCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteCustomerSecretKey.ts.html |here} to see how to use DeleteCustomerSecretKey API.
     */
    deleteCustomerSecretKey(deleteCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteCustomerSecretKey.");
            const operationName = "deleteCustomerSecretKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{customerSecretKeyId}": deleteCustomerSecretKeyRequest.customerSecretKeyId
            };
            const queryParams = {
                "forceDelete": deleteCustomerSecretKeyRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteCustomerSecretKeyRequest.authorization,
                "resource_type_schema_version": deleteCustomerSecretKeyRequest.resourceTypeSchemaVersion,
                "if-match": deleteCustomerSecretKeyRequest.ifMatch,
                "opc-retry-token": deleteCustomerSecretKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/CustomerSecretKeys/{customerSecretKeyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete a DynamicResourceGroup
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDynamicResourceGroupRequest
     * @return DeleteDynamicResourceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteDynamicResourceGroup.ts.html |here} to see how to use DeleteDynamicResourceGroup API.
     */
    deleteDynamicResourceGroup(deleteDynamicResourceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteDynamicResourceGroup.");
            const operationName = "deleteDynamicResourceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{dynamicResourceGroupId}": deleteDynamicResourceGroupRequest.dynamicResourceGroupId
            };
            const queryParams = {
                "forceDelete": deleteDynamicResourceGroupRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteDynamicResourceGroupRequest.authorization,
                "resource_type_schema_version": deleteDynamicResourceGroupRequest.resourceTypeSchemaVersion,
                "if-match": deleteDynamicResourceGroupRequest.ifMatch,
                "opc-retry-token": deleteDynamicResourceGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDynamicResourceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/DynamicResourceGroups/{dynamicResourceGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete a Group
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteGroupRequest
     * @return DeleteGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteGroup.ts.html |here} to see how to use DeleteGroup API.
     */
    deleteGroup(deleteGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteGroup.");
            const operationName = "deleteGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{groupId}": deleteGroupRequest.groupId
            };
            const queryParams = {
                "forceDelete": deleteGroupRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteGroupRequest.authorization,
                "resource_type_schema_version": deleteGroupRequest.resourceTypeSchemaVersion,
                "if-match": deleteGroupRequest.ifMatch,
                "opc-retry-token": deleteGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Groups/{groupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete an Identity Provider
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteIdentityProviderRequest
     * @return DeleteIdentityProviderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteIdentityProvider.ts.html |here} to see how to use DeleteIdentityProvider API.
     */
    deleteIdentityProvider(deleteIdentityProviderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteIdentityProvider.");
            const operationName = "deleteIdentityProvider";
            const apiReferenceLink = "";
            const pathParams = {
                "{identityProviderId}": deleteIdentityProviderRequest.identityProviderId
            };
            const queryParams = {
                "forceDelete": deleteIdentityProviderRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteIdentityProviderRequest.authorization,
                "resource_type_schema_version": deleteIdentityProviderRequest.resourceTypeSchemaVersion,
                "if-match": deleteIdentityProviderRequest.ifMatch,
                "opc-retry-token": deleteIdentityProviderRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteIdentityProviderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/IdentityProviders/{identityProviderId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete user's api key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMyApiKeyRequest
     * @return DeleteMyApiKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteMyApiKey.ts.html |here} to see how to use DeleteMyApiKey API.
     */
    deleteMyApiKey(deleteMyApiKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteMyApiKey.");
            const operationName = "deleteMyApiKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{myApiKeyId}": deleteMyApiKeyRequest.myApiKeyId
            };
            const queryParams = {
                "forceDelete": deleteMyApiKeyRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteMyApiKeyRequest.authorization,
                "resource_type_schema_version": deleteMyApiKeyRequest.resourceTypeSchemaVersion,
                "if-match": deleteMyApiKeyRequest.ifMatch,
                "opc-retry-token": deleteMyApiKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMyApiKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyApiKeys/{myApiKeyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete user's auth token
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMyAuthTokenRequest
     * @return DeleteMyAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteMyAuthToken.ts.html |here} to see how to use DeleteMyAuthToken API.
     */
    deleteMyAuthToken(deleteMyAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteMyAuthToken.");
            const operationName = "deleteMyAuthToken";
            const apiReferenceLink = "";
            const pathParams = {
                "{myAuthTokenId}": deleteMyAuthTokenRequest.myAuthTokenId
            };
            const queryParams = {
                "forceDelete": deleteMyAuthTokenRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteMyAuthTokenRequest.authorization,
                "resource_type_schema_version": deleteMyAuthTokenRequest.resourceTypeSchemaVersion,
                "if-match": deleteMyAuthTokenRequest.ifMatch,
                "opc-retry-token": deleteMyAuthTokenRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMyAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyAuthTokens/{myAuthTokenId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete user's customer secret key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMyCustomerSecretKeyRequest
     * @return DeleteMyCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteMyCustomerSecretKey.ts.html |here} to see how to use DeleteMyCustomerSecretKey API.
     */
    deleteMyCustomerSecretKey(deleteMyCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteMyCustomerSecretKey.");
            const operationName = "deleteMyCustomerSecretKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{myCustomerSecretKeyId}": deleteMyCustomerSecretKeyRequest.myCustomerSecretKeyId
            };
            const queryParams = {
                "forceDelete": deleteMyCustomerSecretKeyRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteMyCustomerSecretKeyRequest.authorization,
                "resource_type_schema_version": deleteMyCustomerSecretKeyRequest.resourceTypeSchemaVersion,
                "if-match": deleteMyCustomerSecretKeyRequest.ifMatch,
                "opc-retry-token": deleteMyCustomerSecretKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMyCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyCustomerSecretKeys/{myCustomerSecretKeyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete a Device
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMyDeviceRequest
     * @return DeleteMyDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteMyDevice.ts.html |here} to see how to use DeleteMyDevice API.
     */
    deleteMyDevice(deleteMyDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteMyDevice.");
            const operationName = "deleteMyDevice";
            const apiReferenceLink = "";
            const pathParams = {
                "{myDeviceId}": deleteMyDeviceRequest.myDeviceId
            };
            const queryParams = {
                "forceDelete": deleteMyDeviceRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteMyDeviceRequest.authorization,
                "resource_type_schema_version": deleteMyDeviceRequest.resourceTypeSchemaVersion,
                "if-match": deleteMyDeviceRequest.ifMatch,
                "opc-retry-token": deleteMyDeviceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMyDeviceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyDevices/{myDeviceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete user's oauth2 client credential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMyOAuth2ClientCredentialRequest
     * @return DeleteMyOAuth2ClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteMyOAuth2ClientCredential.ts.html |here} to see how to use DeleteMyOAuth2ClientCredential API.
     */
    deleteMyOAuth2ClientCredential(deleteMyOAuth2ClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteMyOAuth2ClientCredential.");
            const operationName = "deleteMyOAuth2ClientCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{myOAuth2ClientCredentialId}": deleteMyOAuth2ClientCredentialRequest.myOAuth2ClientCredentialId
            };
            const queryParams = {
                "forceDelete": deleteMyOAuth2ClientCredentialRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteMyOAuth2ClientCredentialRequest.authorization,
                "resource_type_schema_version": deleteMyOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
                "if-match": deleteMyOAuth2ClientCredentialRequest.ifMatch,
                "opc-retry-token": deleteMyOAuth2ClientCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMyOAuth2ClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyOAuth2ClientCredentials/{myOAuth2ClientCredentialId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete user's smtp credenials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMySmtpCredentialRequest
     * @return DeleteMySmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteMySmtpCredential.ts.html |here} to see how to use DeleteMySmtpCredential API.
     */
    deleteMySmtpCredential(deleteMySmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteMySmtpCredential.");
            const operationName = "deleteMySmtpCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{mySmtpCredentialId}": deleteMySmtpCredentialRequest.mySmtpCredentialId
            };
            const queryParams = {
                "forceDelete": deleteMySmtpCredentialRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteMySmtpCredentialRequest.authorization,
                "resource_type_schema_version": deleteMySmtpCredentialRequest.resourceTypeSchemaVersion,
                "if-match": deleteMySmtpCredentialRequest.ifMatch,
                "opc-retry-token": deleteMySmtpCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMySmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MySmtpCredentials/{mySmtpCredentialId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete a Support Account
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMySupportAccountRequest
     * @return DeleteMySupportAccountResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteMySupportAccount.ts.html |here} to see how to use DeleteMySupportAccount API.
     */
    deleteMySupportAccount(deleteMySupportAccountRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteMySupportAccount.");
            const operationName = "deleteMySupportAccount";
            const apiReferenceLink = "";
            const pathParams = {
                "{mySupportAccountId}": deleteMySupportAccountRequest.mySupportAccountId
            };
            const queryParams = {
                "forceDelete": deleteMySupportAccountRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteMySupportAccountRequest.authorization,
                "resource_type_schema_version": deleteMySupportAccountRequest.resourceTypeSchemaVersion,
                "if-match": deleteMySupportAccountRequest.ifMatch,
                "opc-retry-token": deleteMySupportAccountRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMySupportAccountRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MySupportAccounts/{mySupportAccountId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete a Trusted User Agent
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMyTrustedUserAgentRequest
     * @return DeleteMyTrustedUserAgentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteMyTrustedUserAgent.ts.html |here} to see how to use DeleteMyTrustedUserAgent API.
     */
    deleteMyTrustedUserAgent(deleteMyTrustedUserAgentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteMyTrustedUserAgent.");
            const operationName = "deleteMyTrustedUserAgent";
            const apiReferenceLink = "";
            const pathParams = {
                "{myTrustedUserAgentId}": deleteMyTrustedUserAgentRequest.myTrustedUserAgentId
            };
            const queryParams = {
                "forceDelete": deleteMyTrustedUserAgentRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteMyTrustedUserAgentRequest.authorization,
                "resource_type_schema_version": deleteMyTrustedUserAgentRequest.resourceTypeSchemaVersion,
                "if-match": deleteMyTrustedUserAgentRequest.ifMatch,
                "opc-retry-token": deleteMyTrustedUserAgentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMyTrustedUserAgentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyTrustedUserAgents/{myTrustedUserAgentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove a User's DbCredential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMyUserDbCredentialRequest
     * @return DeleteMyUserDbCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteMyUserDbCredential.ts.html |here} to see how to use DeleteMyUserDbCredential API.
     */
    deleteMyUserDbCredential(deleteMyUserDbCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteMyUserDbCredential.");
            const operationName = "deleteMyUserDbCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{myUserDbCredentialId}": deleteMyUserDbCredentialRequest.myUserDbCredentialId
            };
            const queryParams = {
                "forceDelete": deleteMyUserDbCredentialRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteMyUserDbCredentialRequest.authorization,
                "resource_type_schema_version": deleteMyUserDbCredentialRequest.resourceTypeSchemaVersion,
                "if-match": deleteMyUserDbCredentialRequest.ifMatch,
                "opc-retry-token": deleteMyUserDbCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMyUserDbCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyUserDbCredentials/{myUserDbCredentialId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete user's oauth2 client credential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteOAuth2ClientCredentialRequest
     * @return DeleteOAuth2ClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteOAuth2ClientCredential.ts.html |here} to see how to use DeleteOAuth2ClientCredential API.
     */
    deleteOAuth2ClientCredential(deleteOAuth2ClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteOAuth2ClientCredential.");
            const operationName = "deleteOAuth2ClientCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{oAuth2ClientCredentialId}": deleteOAuth2ClientCredentialRequest.oAuth2ClientCredentialId
            };
            const queryParams = {
                "forceDelete": deleteOAuth2ClientCredentialRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteOAuth2ClientCredentialRequest.authorization,
                "resource_type_schema_version": deleteOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
                "if-match": deleteOAuth2ClientCredentialRequest.ifMatch,
                "opc-retry-token": deleteOAuth2ClientCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOAuth2ClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/OAuth2ClientCredentials/{oAuth2ClientCredentialId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete a Password Policy
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeletePasswordPolicyRequest
     * @return DeletePasswordPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeletePasswordPolicy.ts.html |here} to see how to use DeletePasswordPolicy API.
     */
    deletePasswordPolicy(deletePasswordPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deletePasswordPolicy.");
            const operationName = "deletePasswordPolicy";
            const apiReferenceLink = "";
            const pathParams = {
                "{passwordPolicyId}": deletePasswordPolicyRequest.passwordPolicyId
            };
            const queryParams = {
                "forceDelete": deletePasswordPolicyRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deletePasswordPolicyRequest.authorization,
                "resource_type_schema_version": deletePasswordPolicyRequest.resourceTypeSchemaVersion,
                "if-match": deletePasswordPolicyRequest.ifMatch,
                "opc-retry-token": deletePasswordPolicyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deletePasswordPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/PasswordPolicies/{passwordPolicyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete user's smtp credenials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSmtpCredentialRequest
     * @return DeleteSmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteSmtpCredential.ts.html |here} to see how to use DeleteSmtpCredential API.
     */
    deleteSmtpCredential(deleteSmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteSmtpCredential.");
            const operationName = "deleteSmtpCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{smtpCredentialId}": deleteSmtpCredentialRequest.smtpCredentialId
            };
            const queryParams = {
                "forceDelete": deleteSmtpCredentialRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteSmtpCredentialRequest.authorization,
                "resource_type_schema_version": deleteSmtpCredentialRequest.resourceTypeSchemaVersion,
                "if-match": deleteSmtpCredentialRequest.ifMatch,
                "opc-retry-token": deleteSmtpCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/SmtpCredentials/{smtpCredentialId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete a User
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteUserRequest
     * @return DeleteUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteUser.ts.html |here} to see how to use DeleteUser API.
     */
    deleteUser(deleteUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteUser.");
            const operationName = "deleteUser";
            const apiReferenceLink = "";
            const pathParams = {
                "{userId}": deleteUserRequest.userId
            };
            const queryParams = {
                "forceDelete": deleteUserRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteUserRequest.authorization,
                "resource_type_schema_version": deleteUserRequest.resourceTypeSchemaVersion,
                "if-match": deleteUserRequest.ifMatch,
                "opc-retry-token": deleteUserRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Users/{userId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove a User's DbCredential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteUserDbCredentialRequest
     * @return DeleteUserDbCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/DeleteUserDbCredential.ts.html |here} to see how to use DeleteUserDbCredential API.
     */
    deleteUserDbCredential(deleteUserDbCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#deleteUserDbCredential.");
            const operationName = "deleteUserDbCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{userDbCredentialId}": deleteUserDbCredentialRequest.userDbCredentialId
            };
            const queryParams = {
                "forceDelete": deleteUserDbCredentialRequest.forceDelete
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": deleteUserDbCredentialRequest.authorization,
                "resource_type_schema_version": deleteUserDbCredentialRequest.resourceTypeSchemaVersion,
                "if-match": deleteUserDbCredentialRequest.ifMatch,
                "opc-retry-token": deleteUserDbCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteUserDbCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/UserDbCredentials/{userDbCredentialId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get user's api key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetApiKeyRequest
     * @return GetApiKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetApiKey.ts.html |here} to see how to use GetApiKey API.
     */
    getApiKey(getApiKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getApiKey.");
            const operationName = "getApiKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{apiKeyId}": getApiKeyRequest.apiKeyId
            };
            const queryParams = {
                "attributes": getApiKeyRequest.attributes,
                "attributeSets": getApiKeyRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getApiKeyRequest.authorization,
                "resource_type_schema_version": getApiKeyRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getApiKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getApiKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ApiKeys/{apiKeyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "apiKey",
                    bodyModel: model.ApiKey,
                    type: "model.ApiKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get user's auth token
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAuthTokenRequest
     * @return GetAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetAuthToken.ts.html |here} to see how to use GetAuthToken API.
     */
    getAuthToken(getAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getAuthToken.");
            const operationName = "getAuthToken";
            const apiReferenceLink = "";
            const pathParams = {
                "{authTokenId}": getAuthTokenRequest.authTokenId
            };
            const queryParams = {
                "attributes": getAuthTokenRequest.attributes,
                "attributeSets": getAuthTokenRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getAuthTokenRequest.authorization,
                "resource_type_schema_version": getAuthTokenRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getAuthTokenRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthTokens/{authTokenId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authToken",
                    bodyModel: model.AuthToken,
                    type: "model.AuthToken",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get Authentication Factor Settings
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAuthenticationFactorSettingRequest
     * @return GetAuthenticationFactorSettingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetAuthenticationFactorSetting.ts.html |here} to see how to use GetAuthenticationFactorSetting API.
     */
    getAuthenticationFactorSetting(getAuthenticationFactorSettingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getAuthenticationFactorSetting.");
            const operationName = "getAuthenticationFactorSetting";
            const apiReferenceLink = "";
            const pathParams = {
                "{authenticationFactorSettingId}": getAuthenticationFactorSettingRequest.authenticationFactorSettingId
            };
            const queryParams = {
                "attributes": getAuthenticationFactorSettingRequest.attributes,
                "attributeSets": getAuthenticationFactorSettingRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getAuthenticationFactorSettingRequest.authorization,
                "resource_type_schema_version": getAuthenticationFactorSettingRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getAuthenticationFactorSettingRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAuthenticationFactorSettingRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthenticationFactorSettings/{authenticationFactorSettingId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authenticationFactorSetting",
                    bodyModel: model.AuthenticationFactorSetting,
                    type: "model.AuthenticationFactorSetting",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get user's customer secret key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetCustomerSecretKeyRequest
     * @return GetCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetCustomerSecretKey.ts.html |here} to see how to use GetCustomerSecretKey API.
     */
    getCustomerSecretKey(getCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getCustomerSecretKey.");
            const operationName = "getCustomerSecretKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{customerSecretKeyId}": getCustomerSecretKeyRequest.customerSecretKeyId
            };
            const queryParams = {
                "attributes": getCustomerSecretKeyRequest.attributes,
                "attributeSets": getCustomerSecretKeyRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getCustomerSecretKeyRequest.authorization,
                "resource_type_schema_version": getCustomerSecretKeyRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getCustomerSecretKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/CustomerSecretKeys/{customerSecretKeyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customerSecretKey",
                    bodyModel: model.CustomerSecretKey,
                    type: "model.CustomerSecretKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a DynamicResourceGroup
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDynamicResourceGroupRequest
     * @return GetDynamicResourceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetDynamicResourceGroup.ts.html |here} to see how to use GetDynamicResourceGroup API.
     */
    getDynamicResourceGroup(getDynamicResourceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getDynamicResourceGroup.");
            const operationName = "getDynamicResourceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{dynamicResourceGroupId}": getDynamicResourceGroupRequest.dynamicResourceGroupId
            };
            const queryParams = {
                "attributes": getDynamicResourceGroupRequest.attributes,
                "attributeSets": getDynamicResourceGroupRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getDynamicResourceGroupRequest.authorization,
                "resource_type_schema_version": getDynamicResourceGroupRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getDynamicResourceGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDynamicResourceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/DynamicResourceGroups/{dynamicResourceGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dynamicResourceGroup",
                    bodyModel: model.DynamicResourceGroup,
                    type: "model.DynamicResourceGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a Group - The Group search and get operations on users/members will throw an exception if it has more than 10K members, to avoid the exception use the pagination filter to get or search group members
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetGroupRequest
     * @return GetGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetGroup.ts.html |here} to see how to use GetGroup API.
     */
    getGroup(getGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getGroup.");
            const operationName = "getGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{groupId}": getGroupRequest.groupId
            };
            const queryParams = {
                "attributes": getGroupRequest.attributes,
                "attributeSets": getGroupRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getGroupRequest.authorization,
                "resource_type_schema_version": getGroupRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Groups/{groupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "group",
                    bodyModel: model.Group,
                    type: "model.Group",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get an Identity Provider
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetIdentityProviderRequest
     * @return GetIdentityProviderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetIdentityProvider.ts.html |here} to see how to use GetIdentityProvider API.
     */
    getIdentityProvider(getIdentityProviderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getIdentityProvider.");
            const operationName = "getIdentityProvider";
            const apiReferenceLink = "";
            const pathParams = {
                "{identityProviderId}": getIdentityProviderRequest.identityProviderId
            };
            const queryParams = {
                "attributes": getIdentityProviderRequest.attributes,
                "attributeSets": getIdentityProviderRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getIdentityProviderRequest.authorization,
                "resource_type_schema_version": getIdentityProviderRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getIdentityProviderRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getIdentityProviderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/IdentityProviders/{identityProviderId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "identityProvider",
                    bodyModel: model.IdentityProvider,
                    type: "model.IdentityProvider",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get KmsiSettings
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetKmsiSettingRequest
     * @return GetKmsiSettingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetKmsiSetting.ts.html |here} to see how to use GetKmsiSetting API.
     */
    getKmsiSetting(getKmsiSettingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getKmsiSetting.");
            const operationName = "getKmsiSetting";
            const apiReferenceLink = "";
            const pathParams = {
                "{kmsiSettingId}": getKmsiSettingRequest.kmsiSettingId
            };
            const queryParams = {
                "attributes": getKmsiSettingRequest.attributes,
                "attributeSets": getKmsiSettingRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getKmsiSettingRequest.authorization,
                "resource_type_schema_version": getKmsiSettingRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getKmsiSettingRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getKmsiSettingRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/KmsiSettings/{kmsiSettingId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "kmsiSetting",
                    bodyModel: model.KmsiSetting,
                    type: "model.KmsiSetting",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get User Info
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMeRequest
     * @return GetMeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetMe.ts.html |here} to see how to use GetMe API.
     */
    getMe(getMeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getMe.");
            const operationName = "getMe";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": getMeRequest.attributes,
                "attributeSets": getMeRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getMeRequest.authorization,
                "resource_type_schema_version": getMeRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getMeRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Me",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "me",
                    bodyModel: model.Me,
                    type: "model.Me",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get user's api key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMyApiKeyRequest
     * @return GetMyApiKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetMyApiKey.ts.html |here} to see how to use GetMyApiKey API.
     */
    getMyApiKey(getMyApiKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getMyApiKey.");
            const operationName = "getMyApiKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{myApiKeyId}": getMyApiKeyRequest.myApiKeyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getMyApiKeyRequest.authorization,
                "resource_type_schema_version": getMyApiKeyRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getMyApiKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMyApiKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyApiKeys/{myApiKeyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myApiKey",
                    bodyModel: model.MyApiKey,
                    type: "model.MyApiKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get user's auth token
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMyAuthTokenRequest
     * @return GetMyAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetMyAuthToken.ts.html |here} to see how to use GetMyAuthToken API.
     */
    getMyAuthToken(getMyAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getMyAuthToken.");
            const operationName = "getMyAuthToken";
            const apiReferenceLink = "";
            const pathParams = {
                "{myAuthTokenId}": getMyAuthTokenRequest.myAuthTokenId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getMyAuthTokenRequest.authorization,
                "resource_type_schema_version": getMyAuthTokenRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getMyAuthTokenRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMyAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyAuthTokens/{myAuthTokenId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myAuthToken",
                    bodyModel: model.MyAuthToken,
                    type: "model.MyAuthToken",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get user's customer secret key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMyCustomerSecretKeyRequest
     * @return GetMyCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetMyCustomerSecretKey.ts.html |here} to see how to use GetMyCustomerSecretKey API.
     */
    getMyCustomerSecretKey(getMyCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getMyCustomerSecretKey.");
            const operationName = "getMyCustomerSecretKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{myCustomerSecretKeyId}": getMyCustomerSecretKeyRequest.myCustomerSecretKeyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getMyCustomerSecretKeyRequest.authorization,
                "resource_type_schema_version": getMyCustomerSecretKeyRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getMyCustomerSecretKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMyCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyCustomerSecretKeys/{myCustomerSecretKeyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myCustomerSecretKey",
                    bodyModel: model.MyCustomerSecretKey,
                    type: "model.MyCustomerSecretKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a Device
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMyDeviceRequest
     * @return GetMyDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetMyDevice.ts.html |here} to see how to use GetMyDevice API.
     */
    getMyDevice(getMyDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getMyDevice.");
            const operationName = "getMyDevice";
            const apiReferenceLink = "";
            const pathParams = {
                "{myDeviceId}": getMyDeviceRequest.myDeviceId
            };
            const queryParams = {
                "attributes": getMyDeviceRequest.attributes,
                "attributeSets": getMyDeviceRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getMyDeviceRequest.authorization,
                "resource_type_schema_version": getMyDeviceRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getMyDeviceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMyDeviceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyDevices/{myDeviceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myDevice",
                    bodyModel: model.MyDevice,
                    type: "model.MyDevice",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get user's oauth2 client credential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMyOAuth2ClientCredentialRequest
     * @return GetMyOAuth2ClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetMyOAuth2ClientCredential.ts.html |here} to see how to use GetMyOAuth2ClientCredential API.
     */
    getMyOAuth2ClientCredential(getMyOAuth2ClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getMyOAuth2ClientCredential.");
            const operationName = "getMyOAuth2ClientCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{myOAuth2ClientCredentialId}": getMyOAuth2ClientCredentialRequest.myOAuth2ClientCredentialId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getMyOAuth2ClientCredentialRequest.authorization,
                "resource_type_schema_version": getMyOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getMyOAuth2ClientCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMyOAuth2ClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyOAuth2ClientCredentials/{myOAuth2ClientCredentialId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myOAuth2ClientCredential",
                    bodyModel: model.MyOAuth2ClientCredential,
                    type: "model.MyOAuth2ClientCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get user's smtp credentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMySmtpCredentialRequest
     * @return GetMySmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetMySmtpCredential.ts.html |here} to see how to use GetMySmtpCredential API.
     */
    getMySmtpCredential(getMySmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getMySmtpCredential.");
            const operationName = "getMySmtpCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{mySmtpCredentialId}": getMySmtpCredentialRequest.mySmtpCredentialId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getMySmtpCredentialRequest.authorization,
                "resource_type_schema_version": getMySmtpCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getMySmtpCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMySmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MySmtpCredentials/{mySmtpCredentialId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mySmtpCredential",
                    bodyModel: model.MySmtpCredential,
                    type: "model.MySmtpCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a Support Account
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMySupportAccountRequest
     * @return GetMySupportAccountResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetMySupportAccount.ts.html |here} to see how to use GetMySupportAccount API.
     */
    getMySupportAccount(getMySupportAccountRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getMySupportAccount.");
            const operationName = "getMySupportAccount";
            const apiReferenceLink = "";
            const pathParams = {
                "{mySupportAccountId}": getMySupportAccountRequest.mySupportAccountId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getMySupportAccountRequest.authorization,
                "resource_type_schema_version": getMySupportAccountRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getMySupportAccountRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMySupportAccountRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MySupportAccounts/{mySupportAccountId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mySupportAccount",
                    bodyModel: model.MySupportAccount,
                    type: "model.MySupportAccount",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a Trusted User Agent
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMyTrustedUserAgentRequest
     * @return GetMyTrustedUserAgentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetMyTrustedUserAgent.ts.html |here} to see how to use GetMyTrustedUserAgent API.
     */
    getMyTrustedUserAgent(getMyTrustedUserAgentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getMyTrustedUserAgent.");
            const operationName = "getMyTrustedUserAgent";
            const apiReferenceLink = "";
            const pathParams = {
                "{myTrustedUserAgentId}": getMyTrustedUserAgentRequest.myTrustedUserAgentId
            };
            const queryParams = {
                "attributes": getMyTrustedUserAgentRequest.attributes,
                "attributeSets": getMyTrustedUserAgentRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getMyTrustedUserAgentRequest.authorization,
                "resource_type_schema_version": getMyTrustedUserAgentRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getMyTrustedUserAgentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMyTrustedUserAgentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyTrustedUserAgents/{myTrustedUserAgentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myTrustedUserAgent",
                    bodyModel: model.MyTrustedUserAgent,
                    type: "model.MyTrustedUserAgent",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a User's DbCredentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMyUserDbCredentialRequest
     * @return GetMyUserDbCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetMyUserDbCredential.ts.html |here} to see how to use GetMyUserDbCredential API.
     */
    getMyUserDbCredential(getMyUserDbCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getMyUserDbCredential.");
            const operationName = "getMyUserDbCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{myUserDbCredentialId}": getMyUserDbCredentialRequest.myUserDbCredentialId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getMyUserDbCredentialRequest.authorization,
                "resource_type_schema_version": getMyUserDbCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getMyUserDbCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMyUserDbCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyUserDbCredentials/{myUserDbCredentialId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myUserDbCredential",
                    bodyModel: model.MyUserDbCredential,
                    type: "model.MyUserDbCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get user's oauth2 client credential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetOAuth2ClientCredentialRequest
     * @return GetOAuth2ClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetOAuth2ClientCredential.ts.html |here} to see how to use GetOAuth2ClientCredential API.
     */
    getOAuth2ClientCredential(getOAuth2ClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getOAuth2ClientCredential.");
            const operationName = "getOAuth2ClientCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{oAuth2ClientCredentialId}": getOAuth2ClientCredentialRequest.oAuth2ClientCredentialId
            };
            const queryParams = {
                "attributes": getOAuth2ClientCredentialRequest.attributes,
                "attributeSets": getOAuth2ClientCredentialRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getOAuth2ClientCredentialRequest.authorization,
                "resource_type_schema_version": getOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getOAuth2ClientCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOAuth2ClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/OAuth2ClientCredentials/{oAuth2ClientCredentialId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "oAuth2ClientCredential",
                    bodyModel: model.OAuth2ClientCredential,
                    type: "model.OAuth2ClientCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a Password Policy
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetPasswordPolicyRequest
     * @return GetPasswordPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetPasswordPolicy.ts.html |here} to see how to use GetPasswordPolicy API.
     */
    getPasswordPolicy(getPasswordPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getPasswordPolicy.");
            const operationName = "getPasswordPolicy";
            const apiReferenceLink = "";
            const pathParams = {
                "{passwordPolicyId}": getPasswordPolicyRequest.passwordPolicyId
            };
            const queryParams = {
                "attributes": getPasswordPolicyRequest.attributes,
                "attributeSets": getPasswordPolicyRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getPasswordPolicyRequest.authorization,
                "resource_type_schema_version": getPasswordPolicyRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getPasswordPolicyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getPasswordPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/PasswordPolicies/{passwordPolicyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "passwordPolicy",
                    bodyModel: model.PasswordPolicy,
                    type: "model.PasswordPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get user's smtp credentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSmtpCredentialRequest
     * @return GetSmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetSmtpCredential.ts.html |here} to see how to use GetSmtpCredential API.
     */
    getSmtpCredential(getSmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getSmtpCredential.");
            const operationName = "getSmtpCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{smtpCredentialId}": getSmtpCredentialRequest.smtpCredentialId
            };
            const queryParams = {
                "attributes": getSmtpCredentialRequest.attributes,
                "attributeSets": getSmtpCredentialRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getSmtpCredentialRequest.authorization,
                "resource_type_schema_version": getSmtpCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getSmtpCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/SmtpCredentials/{smtpCredentialId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "smtpCredential",
                    bodyModel: model.SmtpCredential,
                    type: "model.SmtpCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a User
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetUserRequest
     * @return GetUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetUser.ts.html |here} to see how to use GetUser API.
     */
    getUser(getUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getUser.");
            const operationName = "getUser";
            const apiReferenceLink = "";
            const pathParams = {
                "{userId}": getUserRequest.userId
            };
            const queryParams = {
                "attributes": getUserRequest.attributes,
                "attributeSets": getUserRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getUserRequest.authorization,
                "resource_type_schema_version": getUserRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getUserRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Users/{userId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "user",
                    bodyModel: model.User,
                    type: "model.User",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a User's DbCredentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetUserDbCredentialRequest
     * @return GetUserDbCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/GetUserDbCredential.ts.html |here} to see how to use GetUserDbCredential API.
     */
    getUserDbCredential(getUserDbCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#getUserDbCredential.");
            const operationName = "getUserDbCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{userDbCredentialId}": getUserDbCredentialRequest.userDbCredentialId
            };
            const queryParams = {
                "attributes": getUserDbCredentialRequest.attributes,
                "attributeSets": getUserDbCredentialRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": getUserDbCredentialRequest.authorization,
                "resource_type_schema_version": getUserDbCredentialRequest.resourceTypeSchemaVersion,
                "opc-retry-token": getUserDbCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getUserDbCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/UserDbCredentials/{userDbCredentialId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userDbCredential",
                    bodyModel: model.UserDbCredential,
                    type: "model.UserDbCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Api Key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListApiKeysRequest
     * @return ListApiKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListApiKeys.ts.html |here} to see how to use ListApiKeys API.
     */
    listApiKeys(listApiKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listApiKeys.");
            const operationName = "listApiKeys";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listApiKeysRequest.filter,
                "sortBy": listApiKeysRequest.sortBy,
                "sortOrder": listApiKeysRequest.sortOrder,
                "startIndex": listApiKeysRequest.startIndex,
                "count": listApiKeysRequest.count,
                "attributes": listApiKeysRequest.attributes,
                "attributeSets": listApiKeysRequest.attributeSets,
                "page": listApiKeysRequest.page,
                "limit": listApiKeysRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listApiKeysRequest.authorization,
                "resource_type_schema_version": listApiKeysRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listApiKeysRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listApiKeysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ApiKeys",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "apiKeys",
                    bodyModel: model.ApiKeys,
                    type: "model.ApiKeys",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search AuthTokens
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAuthTokensRequest
     * @return ListAuthTokensResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListAuthTokens.ts.html |here} to see how to use ListAuthTokens API.
     */
    listAuthTokens(listAuthTokensRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listAuthTokens.");
            const operationName = "listAuthTokens";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listAuthTokensRequest.filter,
                "sortBy": listAuthTokensRequest.sortBy,
                "sortOrder": listAuthTokensRequest.sortOrder,
                "startIndex": listAuthTokensRequest.startIndex,
                "count": listAuthTokensRequest.count,
                "attributes": listAuthTokensRequest.attributes,
                "attributeSets": listAuthTokensRequest.attributeSets,
                "page": listAuthTokensRequest.page,
                "limit": listAuthTokensRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listAuthTokensRequest.authorization,
                "resource_type_schema_version": listAuthTokensRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listAuthTokensRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuthTokensRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthTokens",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authTokens",
                    bodyModel: model.AuthTokens,
                    type: "model.AuthTokens",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Authentication Factor Settings
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAuthenticationFactorSettingsRequest
     * @return ListAuthenticationFactorSettingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListAuthenticationFactorSettings.ts.html |here} to see how to use ListAuthenticationFactorSettings API.
     */
    listAuthenticationFactorSettings(listAuthenticationFactorSettingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listAuthenticationFactorSettings.");
            const operationName = "listAuthenticationFactorSettings";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": listAuthenticationFactorSettingsRequest.attributes,
                "attributeSets": listAuthenticationFactorSettingsRequest.attributeSets,
                "page": listAuthenticationFactorSettingsRequest.page,
                "limit": listAuthenticationFactorSettingsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listAuthenticationFactorSettingsRequest.authorization,
                "resource_type_schema_version": listAuthenticationFactorSettingsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listAuthenticationFactorSettingsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuthenticationFactorSettingsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthenticationFactorSettings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authenticationFactorSettings",
                    bodyModel: model.AuthenticationFactorSettings,
                    type: "model.AuthenticationFactorSettings",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search user's customer secret key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListCustomerSecretKeysRequest
     * @return ListCustomerSecretKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListCustomerSecretKeys.ts.html |here} to see how to use ListCustomerSecretKeys API.
     */
    listCustomerSecretKeys(listCustomerSecretKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listCustomerSecretKeys.");
            const operationName = "listCustomerSecretKeys";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listCustomerSecretKeysRequest.filter,
                "sortBy": listCustomerSecretKeysRequest.sortBy,
                "sortOrder": listCustomerSecretKeysRequest.sortOrder,
                "startIndex": listCustomerSecretKeysRequest.startIndex,
                "count": listCustomerSecretKeysRequest.count,
                "attributes": listCustomerSecretKeysRequest.attributes,
                "attributeSets": listCustomerSecretKeysRequest.attributeSets,
                "page": listCustomerSecretKeysRequest.page,
                "limit": listCustomerSecretKeysRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listCustomerSecretKeysRequest.authorization,
                "resource_type_schema_version": listCustomerSecretKeysRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listCustomerSecretKeysRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCustomerSecretKeysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/CustomerSecretKeys",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customerSecretKeys",
                    bodyModel: model.CustomerSecretKeys,
                    type: "model.CustomerSecretKeys",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search DynamicResourceGroups
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDynamicResourceGroupsRequest
     * @return ListDynamicResourceGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListDynamicResourceGroups.ts.html |here} to see how to use ListDynamicResourceGroups API.
     */
    listDynamicResourceGroups(listDynamicResourceGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listDynamicResourceGroups.");
            const operationName = "listDynamicResourceGroups";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listDynamicResourceGroupsRequest.filter,
                "sortBy": listDynamicResourceGroupsRequest.sortBy,
                "sortOrder": listDynamicResourceGroupsRequest.sortOrder,
                "startIndex": listDynamicResourceGroupsRequest.startIndex,
                "count": listDynamicResourceGroupsRequest.count,
                "attributes": listDynamicResourceGroupsRequest.attributes,
                "attributeSets": listDynamicResourceGroupsRequest.attributeSets,
                "page": listDynamicResourceGroupsRequest.page,
                "limit": listDynamicResourceGroupsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listDynamicResourceGroupsRequest.authorization,
                "resource_type_schema_version": listDynamicResourceGroupsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listDynamicResourceGroupsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDynamicResourceGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/DynamicResourceGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dynamicResourceGroups",
                    bodyModel: model.DynamicResourceGroups,
                    type: "model.DynamicResourceGroups",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Groups.The Group search and get operations on users/members will throw an exception if it has more than 10K members, to avoid the exception use the pagination filter to get or search group members
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListGroupsRequest
     * @return ListGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListGroups.ts.html |here} to see how to use ListGroups API.
     */
    listGroups(listGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listGroups.");
            const operationName = "listGroups";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listGroupsRequest.filter,
                "sortBy": listGroupsRequest.sortBy,
                "sortOrder": listGroupsRequest.sortOrder,
                "startIndex": listGroupsRequest.startIndex,
                "count": listGroupsRequest.count,
                "attributes": listGroupsRequest.attributes,
                "attributeSets": listGroupsRequest.attributeSets,
                "page": listGroupsRequest.page,
                "limit": listGroupsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listGroupsRequest.authorization,
                "resource_type_schema_version": listGroupsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listGroupsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Groups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "groups",
                    bodyModel: model.Groups,
                    type: "model.Groups",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Identity Providers
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListIdentityProvidersRequest
     * @return ListIdentityProvidersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListIdentityProviders.ts.html |here} to see how to use ListIdentityProviders API.
     */
    listIdentityProviders(listIdentityProvidersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listIdentityProviders.");
            const operationName = "listIdentityProviders";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listIdentityProvidersRequest.filter,
                "sortBy": listIdentityProvidersRequest.sortBy,
                "sortOrder": listIdentityProvidersRequest.sortOrder,
                "startIndex": listIdentityProvidersRequest.startIndex,
                "count": listIdentityProvidersRequest.count,
                "attributes": listIdentityProvidersRequest.attributes,
                "attributeSets": listIdentityProvidersRequest.attributeSets,
                "page": listIdentityProvidersRequest.page,
                "limit": listIdentityProvidersRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listIdentityProvidersRequest.authorization,
                "resource_type_schema_version": listIdentityProvidersRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listIdentityProvidersRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listIdentityProvidersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/IdentityProviders",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "identityProviders",
                    bodyModel: model.IdentityProviders,
                    type: "model.IdentityProviders",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search KmsiSettings
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListKmsiSettingsRequest
     * @return ListKmsiSettingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListKmsiSettings.ts.html |here} to see how to use ListKmsiSettings API.
     */
    listKmsiSettings(listKmsiSettingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listKmsiSettings.");
            const operationName = "listKmsiSettings";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": listKmsiSettingsRequest.attributes,
                "attributeSets": listKmsiSettingsRequest.attributeSets,
                "page": listKmsiSettingsRequest.page,
                "limit": listKmsiSettingsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listKmsiSettingsRequest.authorization,
                "resource_type_schema_version": listKmsiSettingsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listKmsiSettingsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listKmsiSettingsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/KmsiSettings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "kmsiSettings",
                    bodyModel: model.KmsiSettings,
                    type: "model.KmsiSettings",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Api Key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMyApiKeysRequest
     * @return ListMyApiKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListMyApiKeys.ts.html |here} to see how to use ListMyApiKeys API.
     */
    listMyApiKeys(listMyApiKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listMyApiKeys.");
            const operationName = "listMyApiKeys";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listMyApiKeysRequest.filter,
                "sortBy": listMyApiKeysRequest.sortBy,
                "sortOrder": listMyApiKeysRequest.sortOrder,
                "startIndex": listMyApiKeysRequest.startIndex,
                "count": listMyApiKeysRequest.count,
                "page": listMyApiKeysRequest.page,
                "limit": listMyApiKeysRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listMyApiKeysRequest.authorization,
                "resource_type_schema_version": listMyApiKeysRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listMyApiKeysRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMyApiKeysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyApiKeys",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myApiKeys",
                    bodyModel: model.MyApiKeys,
                    type: "model.MyApiKeys",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search AuthTokens
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMyAuthTokensRequest
     * @return ListMyAuthTokensResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListMyAuthTokens.ts.html |here} to see how to use ListMyAuthTokens API.
     */
    listMyAuthTokens(listMyAuthTokensRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listMyAuthTokens.");
            const operationName = "listMyAuthTokens";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listMyAuthTokensRequest.filter,
                "sortBy": listMyAuthTokensRequest.sortBy,
                "sortOrder": listMyAuthTokensRequest.sortOrder,
                "startIndex": listMyAuthTokensRequest.startIndex,
                "count": listMyAuthTokensRequest.count,
                "page": listMyAuthTokensRequest.page,
                "limit": listMyAuthTokensRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listMyAuthTokensRequest.authorization,
                "resource_type_schema_version": listMyAuthTokensRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listMyAuthTokensRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMyAuthTokensRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyAuthTokens",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myAuthTokens",
                    bodyModel: model.MyAuthTokens,
                    type: "model.MyAuthTokens",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search user's customer secret key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMyCustomerSecretKeysRequest
     * @return ListMyCustomerSecretKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListMyCustomerSecretKeys.ts.html |here} to see how to use ListMyCustomerSecretKeys API.
     */
    listMyCustomerSecretKeys(listMyCustomerSecretKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listMyCustomerSecretKeys.");
            const operationName = "listMyCustomerSecretKeys";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listMyCustomerSecretKeysRequest.filter,
                "sortBy": listMyCustomerSecretKeysRequest.sortBy,
                "sortOrder": listMyCustomerSecretKeysRequest.sortOrder,
                "startIndex": listMyCustomerSecretKeysRequest.startIndex,
                "count": listMyCustomerSecretKeysRequest.count,
                "page": listMyCustomerSecretKeysRequest.page,
                "limit": listMyCustomerSecretKeysRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listMyCustomerSecretKeysRequest.authorization,
                "resource_type_schema_version": listMyCustomerSecretKeysRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listMyCustomerSecretKeysRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMyCustomerSecretKeysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyCustomerSecretKeys",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myCustomerSecretKeys",
                    bodyModel: model.MyCustomerSecretKeys,
                    type: "model.MyCustomerSecretKeys",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Devices
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMyDevicesRequest
     * @return ListMyDevicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListMyDevices.ts.html |here} to see how to use ListMyDevices API.
     */
    listMyDevices(listMyDevicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listMyDevices.");
            const operationName = "listMyDevices";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listMyDevicesRequest.filter,
                "sortBy": listMyDevicesRequest.sortBy,
                "sortOrder": listMyDevicesRequest.sortOrder,
                "startIndex": listMyDevicesRequest.startIndex,
                "count": listMyDevicesRequest.count,
                "attributes": listMyDevicesRequest.attributes,
                "attributeSets": listMyDevicesRequest.attributeSets,
                "page": listMyDevicesRequest.page,
                "limit": listMyDevicesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listMyDevicesRequest.authorization,
                "resource_type_schema_version": listMyDevicesRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listMyDevicesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMyDevicesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyDevices",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myDevices",
                    bodyModel: model.MyDevices,
                    type: "model.MyDevices",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search My Groups
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMyGroupsRequest
     * @return ListMyGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListMyGroups.ts.html |here} to see how to use ListMyGroups API.
     */
    listMyGroups(listMyGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listMyGroups.");
            const operationName = "listMyGroups";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listMyGroupsRequest.filter,
                "sortBy": listMyGroupsRequest.sortBy,
                "sortOrder": listMyGroupsRequest.sortOrder,
                "startIndex": listMyGroupsRequest.startIndex,
                "count": listMyGroupsRequest.count,
                "attributes": listMyGroupsRequest.attributes,
                "attributeSets": listMyGroupsRequest.attributeSets,
                "page": listMyGroupsRequest.page,
                "limit": listMyGroupsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listMyGroupsRequest.authorization,
                "resource_type_schema_version": listMyGroupsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listMyGroupsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMyGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myGroups",
                    bodyModel: model.MyGroups,
                    type: "model.MyGroups",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search oauth2 client credentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMyOAuth2ClientCredentialsRequest
     * @return ListMyOAuth2ClientCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListMyOAuth2ClientCredentials.ts.html |here} to see how to use ListMyOAuth2ClientCredentials API.
     */
    listMyOAuth2ClientCredentials(listMyOAuth2ClientCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listMyOAuth2ClientCredentials.");
            const operationName = "listMyOAuth2ClientCredentials";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listMyOAuth2ClientCredentialsRequest.filter,
                "sortBy": listMyOAuth2ClientCredentialsRequest.sortBy,
                "sortOrder": listMyOAuth2ClientCredentialsRequest.sortOrder,
                "startIndex": listMyOAuth2ClientCredentialsRequest.startIndex,
                "count": listMyOAuth2ClientCredentialsRequest.count,
                "page": listMyOAuth2ClientCredentialsRequest.page,
                "limit": listMyOAuth2ClientCredentialsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listMyOAuth2ClientCredentialsRequest.authorization,
                "resource_type_schema_version": listMyOAuth2ClientCredentialsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listMyOAuth2ClientCredentialsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMyOAuth2ClientCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyOAuth2ClientCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myOAuth2ClientCredentials",
                    bodyModel: model.MyOAuth2ClientCredentials,
                    type: "model.MyOAuth2ClientCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search smtp credentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMySmtpCredentialsRequest
     * @return ListMySmtpCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListMySmtpCredentials.ts.html |here} to see how to use ListMySmtpCredentials API.
     */
    listMySmtpCredentials(listMySmtpCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listMySmtpCredentials.");
            const operationName = "listMySmtpCredentials";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listMySmtpCredentialsRequest.filter,
                "sortBy": listMySmtpCredentialsRequest.sortBy,
                "sortOrder": listMySmtpCredentialsRequest.sortOrder,
                "startIndex": listMySmtpCredentialsRequest.startIndex,
                "count": listMySmtpCredentialsRequest.count,
                "page": listMySmtpCredentialsRequest.page,
                "limit": listMySmtpCredentialsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listMySmtpCredentialsRequest.authorization,
                "resource_type_schema_version": listMySmtpCredentialsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listMySmtpCredentialsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMySmtpCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MySmtpCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mySmtpCredentials",
                    bodyModel: model.MySmtpCredentials,
                    type: "model.MySmtpCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Support Accounts
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMySupportAccountsRequest
     * @return ListMySupportAccountsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListMySupportAccounts.ts.html |here} to see how to use ListMySupportAccounts API.
     */
    listMySupportAccounts(listMySupportAccountsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listMySupportAccounts.");
            const operationName = "listMySupportAccounts";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listMySupportAccountsRequest.filter,
                "sortBy": listMySupportAccountsRequest.sortBy,
                "sortOrder": listMySupportAccountsRequest.sortOrder,
                "startIndex": listMySupportAccountsRequest.startIndex,
                "count": listMySupportAccountsRequest.count,
                "page": listMySupportAccountsRequest.page,
                "limit": listMySupportAccountsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listMySupportAccountsRequest.authorization,
                "resource_type_schema_version": listMySupportAccountsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listMySupportAccountsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMySupportAccountsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MySupportAccounts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mySupportAccounts",
                    bodyModel: model.MySupportAccounts,
                    type: "model.MySupportAccounts",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Trusted User Agents
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMyTrustedUserAgentsRequest
     * @return ListMyTrustedUserAgentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListMyTrustedUserAgents.ts.html |here} to see how to use ListMyTrustedUserAgents API.
     */
    listMyTrustedUserAgents(listMyTrustedUserAgentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listMyTrustedUserAgents.");
            const operationName = "listMyTrustedUserAgents";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listMyTrustedUserAgentsRequest.filter,
                "sortBy": listMyTrustedUserAgentsRequest.sortBy,
                "sortOrder": listMyTrustedUserAgentsRequest.sortOrder,
                "startIndex": listMyTrustedUserAgentsRequest.startIndex,
                "count": listMyTrustedUserAgentsRequest.count,
                "attributes": listMyTrustedUserAgentsRequest.attributes,
                "attributeSets": listMyTrustedUserAgentsRequest.attributeSets,
                "page": listMyTrustedUserAgentsRequest.page,
                "limit": listMyTrustedUserAgentsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listMyTrustedUserAgentsRequest.authorization,
                "resource_type_schema_version": listMyTrustedUserAgentsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listMyTrustedUserAgentsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMyTrustedUserAgentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyTrustedUserAgents",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myTrustedUserAgents",
                    bodyModel: model.MyTrustedUserAgents,
                    type: "model.MyTrustedUserAgents",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search a User's DBCredentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMyUserDbCredentialsRequest
     * @return ListMyUserDbCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListMyUserDbCredentials.ts.html |here} to see how to use ListMyUserDbCredentials API.
     */
    listMyUserDbCredentials(listMyUserDbCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listMyUserDbCredentials.");
            const operationName = "listMyUserDbCredentials";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listMyUserDbCredentialsRequest.filter,
                "sortBy": listMyUserDbCredentialsRequest.sortBy,
                "sortOrder": listMyUserDbCredentialsRequest.sortOrder,
                "startIndex": listMyUserDbCredentialsRequest.startIndex,
                "count": listMyUserDbCredentialsRequest.count,
                "page": listMyUserDbCredentialsRequest.page,
                "limit": listMyUserDbCredentialsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listMyUserDbCredentialsRequest.authorization,
                "resource_type_schema_version": listMyUserDbCredentialsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listMyUserDbCredentialsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMyUserDbCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyUserDbCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myUserDbCredentials",
                    bodyModel: model.MyUserDbCredentials,
                    type: "model.MyUserDbCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search oauth2 client credentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOAuth2ClientCredentialsRequest
     * @return ListOAuth2ClientCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListOAuth2ClientCredentials.ts.html |here} to see how to use ListOAuth2ClientCredentials API.
     */
    listOAuth2ClientCredentials(listOAuth2ClientCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listOAuth2ClientCredentials.");
            const operationName = "listOAuth2ClientCredentials";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listOAuth2ClientCredentialsRequest.filter,
                "sortBy": listOAuth2ClientCredentialsRequest.sortBy,
                "sortOrder": listOAuth2ClientCredentialsRequest.sortOrder,
                "startIndex": listOAuth2ClientCredentialsRequest.startIndex,
                "count": listOAuth2ClientCredentialsRequest.count,
                "attributes": listOAuth2ClientCredentialsRequest.attributes,
                "attributeSets": listOAuth2ClientCredentialsRequest.attributeSets,
                "page": listOAuth2ClientCredentialsRequest.page,
                "limit": listOAuth2ClientCredentialsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listOAuth2ClientCredentialsRequest.authorization,
                "resource_type_schema_version": listOAuth2ClientCredentialsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listOAuth2ClientCredentialsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOAuth2ClientCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/OAuth2ClientCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "oAuth2ClientCredentials",
                    bodyModel: model.OAuth2ClientCredentials,
                    type: "model.OAuth2ClientCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Password Policies
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListPasswordPoliciesRequest
     * @return ListPasswordPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListPasswordPolicies.ts.html |here} to see how to use ListPasswordPolicies API.
     */
    listPasswordPolicies(listPasswordPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listPasswordPolicies.");
            const operationName = "listPasswordPolicies";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listPasswordPoliciesRequest.filter,
                "sortBy": listPasswordPoliciesRequest.sortBy,
                "sortOrder": listPasswordPoliciesRequest.sortOrder,
                "startIndex": listPasswordPoliciesRequest.startIndex,
                "count": listPasswordPoliciesRequest.count,
                "attributes": listPasswordPoliciesRequest.attributes,
                "attributeSets": listPasswordPoliciesRequest.attributeSets,
                "page": listPasswordPoliciesRequest.page,
                "limit": listPasswordPoliciesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listPasswordPoliciesRequest.authorization,
                "resource_type_schema_version": listPasswordPoliciesRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listPasswordPoliciesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listPasswordPoliciesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/PasswordPolicies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "passwordPolicies",
                    bodyModel: model.PasswordPolicies,
                    type: "model.PasswordPolicies",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search smtp credentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSmtpCredentialsRequest
     * @return ListSmtpCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListSmtpCredentials.ts.html |here} to see how to use ListSmtpCredentials API.
     */
    listSmtpCredentials(listSmtpCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listSmtpCredentials.");
            const operationName = "listSmtpCredentials";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listSmtpCredentialsRequest.filter,
                "sortBy": listSmtpCredentialsRequest.sortBy,
                "sortOrder": listSmtpCredentialsRequest.sortOrder,
                "startIndex": listSmtpCredentialsRequest.startIndex,
                "count": listSmtpCredentialsRequest.count,
                "attributes": listSmtpCredentialsRequest.attributes,
                "attributeSets": listSmtpCredentialsRequest.attributeSets,
                "page": listSmtpCredentialsRequest.page,
                "limit": listSmtpCredentialsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listSmtpCredentialsRequest.authorization,
                "resource_type_schema_version": listSmtpCredentialsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listSmtpCredentialsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSmtpCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/SmtpCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "smtpCredentials",
                    bodyModel: model.SmtpCredentials,
                    type: "model.SmtpCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search a User's DBCredentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListUserDbCredentialsRequest
     * @return ListUserDbCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListUserDbCredentials.ts.html |here} to see how to use ListUserDbCredentials API.
     */
    listUserDbCredentials(listUserDbCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listUserDbCredentials.");
            const operationName = "listUserDbCredentials";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listUserDbCredentialsRequest.filter,
                "sortBy": listUserDbCredentialsRequest.sortBy,
                "sortOrder": listUserDbCredentialsRequest.sortOrder,
                "startIndex": listUserDbCredentialsRequest.startIndex,
                "count": listUserDbCredentialsRequest.count,
                "attributes": listUserDbCredentialsRequest.attributes,
                "attributeSets": listUserDbCredentialsRequest.attributeSets,
                "page": listUserDbCredentialsRequest.page,
                "limit": listUserDbCredentialsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listUserDbCredentialsRequest.authorization,
                "resource_type_schema_version": listUserDbCredentialsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listUserDbCredentialsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listUserDbCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/UserDbCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userDbCredentials",
                    bodyModel: model.UserDbCredentials,
                    type: "model.UserDbCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Users
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListUsersRequest
     * @return ListUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/ListUsers.ts.html |here} to see how to use ListUsers API.
     */
    listUsers(listUsersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#listUsers.");
            const operationName = "listUsers";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "filter": listUsersRequest.filter,
                "sortBy": listUsersRequest.sortBy,
                "sortOrder": listUsersRequest.sortOrder,
                "startIndex": listUsersRequest.startIndex,
                "count": listUsersRequest.count,
                "attributes": listUsersRequest.attributes,
                "attributeSets": listUsersRequest.attributeSets,
                "page": listUsersRequest.page,
                "limit": listUsersRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": listUsersRequest.authorization,
                "resource_type_schema_version": listUsersRequest.resourceTypeSchemaVersion,
                "opc-retry-token": listUsersRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listUsersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Users",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "users",
                    bodyModel: model.Users,
                    type: "model.Users",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update user's api key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchApiKeyRequest
     * @return PatchApiKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchApiKey.ts.html |here} to see how to use PatchApiKey API.
     */
    patchApiKey(patchApiKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchApiKey.");
            const operationName = "patchApiKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{apiKeyId}": patchApiKeyRequest.apiKeyId
            };
            const queryParams = {
                "attributes": patchApiKeyRequest.attributes,
                "attributeSets": patchApiKeyRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchApiKeyRequest.authorization,
                "resource_type_schema_version": patchApiKeyRequest.resourceTypeSchemaVersion,
                "if-match": patchApiKeyRequest.ifMatch,
                "opc-retry-token": patchApiKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchApiKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ApiKeys/{apiKeyId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchApiKeyRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "apiKey",
                    bodyModel: model.ApiKey,
                    type: "model.ApiKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update user's AuthToken
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchAuthTokenRequest
     * @return PatchAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchAuthToken.ts.html |here} to see how to use PatchAuthToken API.
     */
    patchAuthToken(patchAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchAuthToken.");
            const operationName = "patchAuthToken";
            const apiReferenceLink = "";
            const pathParams = {
                "{authTokenId}": patchAuthTokenRequest.authTokenId
            };
            const queryParams = {
                "attributes": patchAuthTokenRequest.attributes,
                "attributeSets": patchAuthTokenRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchAuthTokenRequest.authorization,
                "resource_type_schema_version": patchAuthTokenRequest.resourceTypeSchemaVersion,
                "if-match": patchAuthTokenRequest.ifMatch,
                "opc-retry-token": patchAuthTokenRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthTokens/{authTokenId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchAuthTokenRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authToken",
                    bodyModel: model.AuthToken,
                    type: "model.AuthToken",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update user's customer secret key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchCustomerSecretKeyRequest
     * @return PatchCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchCustomerSecretKey.ts.html |here} to see how to use PatchCustomerSecretKey API.
     */
    patchCustomerSecretKey(patchCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchCustomerSecretKey.");
            const operationName = "patchCustomerSecretKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{customerSecretKeyId}": patchCustomerSecretKeyRequest.customerSecretKeyId
            };
            const queryParams = {
                "attributes": patchCustomerSecretKeyRequest.attributes,
                "attributeSets": patchCustomerSecretKeyRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchCustomerSecretKeyRequest.authorization,
                "resource_type_schema_version": patchCustomerSecretKeyRequest.resourceTypeSchemaVersion,
                "if-match": patchCustomerSecretKeyRequest.ifMatch,
                "opc-retry-token": patchCustomerSecretKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/CustomerSecretKeys/{customerSecretKeyId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchCustomerSecretKeyRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customerSecretKey",
                    bodyModel: model.CustomerSecretKey,
                    type: "model.CustomerSecretKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update a DynamicResourceGroup
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchDynamicResourceGroupRequest
     * @return PatchDynamicResourceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchDynamicResourceGroup.ts.html |here} to see how to use PatchDynamicResourceGroup API.
     */
    patchDynamicResourceGroup(patchDynamicResourceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchDynamicResourceGroup.");
            const operationName = "patchDynamicResourceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{dynamicResourceGroupId}": patchDynamicResourceGroupRequest.dynamicResourceGroupId
            };
            const queryParams = {
                "attributes": patchDynamicResourceGroupRequest.attributes,
                "attributeSets": patchDynamicResourceGroupRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchDynamicResourceGroupRequest.authorization,
                "resource_type_schema_version": patchDynamicResourceGroupRequest.resourceTypeSchemaVersion,
                "if-match": patchDynamicResourceGroupRequest.ifMatch,
                "opc-retry-token": patchDynamicResourceGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchDynamicResourceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/DynamicResourceGroups/{dynamicResourceGroupId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchDynamicResourceGroupRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dynamicResourceGroup",
                    bodyModel: model.DynamicResourceGroup,
                    type: "model.DynamicResourceGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update a Group
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchGroupRequest
     * @return PatchGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchGroup.ts.html |here} to see how to use PatchGroup API.
     */
    patchGroup(patchGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchGroup.");
            const operationName = "patchGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{groupId}": patchGroupRequest.groupId
            };
            const queryParams = {
                "attributes": patchGroupRequest.attributes,
                "attributeSets": patchGroupRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchGroupRequest.authorization,
                "resource_type_schema_version": patchGroupRequest.resourceTypeSchemaVersion,
                "if-match": patchGroupRequest.ifMatch,
                "opc-retry-token": patchGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Groups/{groupId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchGroupRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "group",
                    bodyModel: model.Group,
                    type: "model.Group",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update an Identity Provider
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchIdentityProviderRequest
     * @return PatchIdentityProviderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchIdentityProvider.ts.html |here} to see how to use PatchIdentityProvider API.
     */
    patchIdentityProvider(patchIdentityProviderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchIdentityProvider.");
            const operationName = "patchIdentityProvider";
            const apiReferenceLink = "";
            const pathParams = {
                "{identityProviderId}": patchIdentityProviderRequest.identityProviderId
            };
            const queryParams = {
                "attributes": patchIdentityProviderRequest.attributes,
                "attributeSets": patchIdentityProviderRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchIdentityProviderRequest.authorization,
                "resource_type_schema_version": patchIdentityProviderRequest.resourceTypeSchemaVersion,
                "if-match": patchIdentityProviderRequest.ifMatch,
                "opc-retry-token": patchIdentityProviderRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchIdentityProviderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/IdentityProviders/{identityProviderId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchIdentityProviderRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "identityProvider",
                    bodyModel: model.IdentityProvider,
                    type: "model.IdentityProvider",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update a Setting
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchKmsiSettingRequest
     * @return PatchKmsiSettingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchKmsiSetting.ts.html |here} to see how to use PatchKmsiSetting API.
     */
    patchKmsiSetting(patchKmsiSettingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchKmsiSetting.");
            const operationName = "patchKmsiSetting";
            const apiReferenceLink = "";
            const pathParams = {
                "{kmsiSettingId}": patchKmsiSettingRequest.kmsiSettingId
            };
            const queryParams = {
                "attributes": patchKmsiSettingRequest.attributes,
                "attributeSets": patchKmsiSettingRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchKmsiSettingRequest.authorization,
                "resource_type_schema_version": patchKmsiSettingRequest.resourceTypeSchemaVersion,
                "if-match": patchKmsiSettingRequest.ifMatch,
                "opc-retry-token": patchKmsiSettingRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchKmsiSettingRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/KmsiSettings/{kmsiSettingId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchKmsiSettingRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "kmsiSetting",
                    bodyModel: model.KmsiSetting,
                    type: "model.KmsiSetting",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update User Info
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchMeRequest
     * @return PatchMeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchMe.ts.html |here} to see how to use PatchMe API.
     */
    patchMe(patchMeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchMe.");
            const operationName = "patchMe";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": patchMeRequest.attributes,
                "attributeSets": patchMeRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchMeRequest.authorization,
                "resource_type_schema_version": patchMeRequest.resourceTypeSchemaVersion,
                "if-match": patchMeRequest.ifMatch,
                "opc-retry-token": patchMeRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchMeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Me",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchMeRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "me",
                    bodyModel: model.Me,
                    type: "model.Me",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update user's api key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchMyApiKeyRequest
     * @return PatchMyApiKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchMyApiKey.ts.html |here} to see how to use PatchMyApiKey API.
     */
    patchMyApiKey(patchMyApiKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchMyApiKey.");
            const operationName = "patchMyApiKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{myApiKeyId}": patchMyApiKeyRequest.myApiKeyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchMyApiKeyRequest.authorization,
                "resource_type_schema_version": patchMyApiKeyRequest.resourceTypeSchemaVersion,
                "if-match": patchMyApiKeyRequest.ifMatch,
                "opc-retry-token": patchMyApiKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchMyApiKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyApiKeys/{myApiKeyId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchMyApiKeyRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myApiKey",
                    bodyModel: model.MyApiKey,
                    type: "model.MyApiKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update user's AuthToken
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchMyAuthTokenRequest
     * @return PatchMyAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchMyAuthToken.ts.html |here} to see how to use PatchMyAuthToken API.
     */
    patchMyAuthToken(patchMyAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchMyAuthToken.");
            const operationName = "patchMyAuthToken";
            const apiReferenceLink = "";
            const pathParams = {
                "{myAuthTokenId}": patchMyAuthTokenRequest.myAuthTokenId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchMyAuthTokenRequest.authorization,
                "resource_type_schema_version": patchMyAuthTokenRequest.resourceTypeSchemaVersion,
                "if-match": patchMyAuthTokenRequest.ifMatch,
                "opc-retry-token": patchMyAuthTokenRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchMyAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyAuthTokens/{myAuthTokenId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchMyAuthTokenRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myAuthToken",
                    bodyModel: model.MyAuthToken,
                    type: "model.MyAuthToken",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update user's customer secret key
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchMyCustomerSecretKeyRequest
     * @return PatchMyCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchMyCustomerSecretKey.ts.html |here} to see how to use PatchMyCustomerSecretKey API.
     */
    patchMyCustomerSecretKey(patchMyCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchMyCustomerSecretKey.");
            const operationName = "patchMyCustomerSecretKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{myCustomerSecretKeyId}": patchMyCustomerSecretKeyRequest.myCustomerSecretKeyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchMyCustomerSecretKeyRequest.authorization,
                "resource_type_schema_version": patchMyCustomerSecretKeyRequest.resourceTypeSchemaVersion,
                "if-match": patchMyCustomerSecretKeyRequest.ifMatch,
                "opc-retry-token": patchMyCustomerSecretKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchMyCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyCustomerSecretKeys/{myCustomerSecretKeyId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchMyCustomerSecretKeyRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myCustomerSecretKey",
                    bodyModel: model.MyCustomerSecretKey,
                    type: "model.MyCustomerSecretKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update a Device
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchMyDeviceRequest
     * @return PatchMyDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchMyDevice.ts.html |here} to see how to use PatchMyDevice API.
     */
    patchMyDevice(patchMyDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchMyDevice.");
            const operationName = "patchMyDevice";
            const apiReferenceLink = "";
            const pathParams = {
                "{myDeviceId}": patchMyDeviceRequest.myDeviceId
            };
            const queryParams = {
                "attributes": patchMyDeviceRequest.attributes,
                "attributeSets": patchMyDeviceRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchMyDeviceRequest.authorization,
                "resource_type_schema_version": patchMyDeviceRequest.resourceTypeSchemaVersion,
                "if-match": patchMyDeviceRequest.ifMatch,
                "opc-retry-token": patchMyDeviceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchMyDeviceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyDevices/{myDeviceId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchMyDeviceRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myDevice",
                    bodyModel: model.MyDevice,
                    type: "model.MyDevice",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update user's oauth2 client credential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchMyOAuth2ClientCredentialRequest
     * @return PatchMyOAuth2ClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchMyOAuth2ClientCredential.ts.html |here} to see how to use PatchMyOAuth2ClientCredential API.
     */
    patchMyOAuth2ClientCredential(patchMyOAuth2ClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchMyOAuth2ClientCredential.");
            const operationName = "patchMyOAuth2ClientCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{myOAuth2ClientCredentialId}": patchMyOAuth2ClientCredentialRequest.myOAuth2ClientCredentialId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchMyOAuth2ClientCredentialRequest.authorization,
                "resource_type_schema_version": patchMyOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
                "if-match": patchMyOAuth2ClientCredentialRequest.ifMatch,
                "opc-retry-token": patchMyOAuth2ClientCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchMyOAuth2ClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyOAuth2ClientCredentials/{myOAuth2ClientCredentialId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchMyOAuth2ClientCredentialRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myOAuth2ClientCredential",
                    bodyModel: model.MyOAuth2ClientCredential,
                    type: "model.MyOAuth2ClientCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update user's smtp credentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchMySmtpCredentialRequest
     * @return PatchMySmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchMySmtpCredential.ts.html |here} to see how to use PatchMySmtpCredential API.
     */
    patchMySmtpCredential(patchMySmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchMySmtpCredential.");
            const operationName = "patchMySmtpCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{mySmtpCredentialId}": patchMySmtpCredentialRequest.mySmtpCredentialId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchMySmtpCredentialRequest.authorization,
                "resource_type_schema_version": patchMySmtpCredentialRequest.resourceTypeSchemaVersion,
                "if-match": patchMySmtpCredentialRequest.ifMatch,
                "opc-retry-token": patchMySmtpCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchMySmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MySmtpCredentials/{mySmtpCredentialId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchMySmtpCredentialRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mySmtpCredential",
                    bodyModel: model.MySmtpCredential,
                    type: "model.MySmtpCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update user's oauth2 client credential
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchOAuth2ClientCredentialRequest
     * @return PatchOAuth2ClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchOAuth2ClientCredential.ts.html |here} to see how to use PatchOAuth2ClientCredential API.
     */
    patchOAuth2ClientCredential(patchOAuth2ClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchOAuth2ClientCredential.");
            const operationName = "patchOAuth2ClientCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{oAuth2ClientCredentialId}": patchOAuth2ClientCredentialRequest.oAuth2ClientCredentialId
            };
            const queryParams = {
                "attributes": patchOAuth2ClientCredentialRequest.attributes,
                "attributeSets": patchOAuth2ClientCredentialRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchOAuth2ClientCredentialRequest.authorization,
                "resource_type_schema_version": patchOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
                "if-match": patchOAuth2ClientCredentialRequest.ifMatch,
                "opc-retry-token": patchOAuth2ClientCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchOAuth2ClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/OAuth2ClientCredentials/{oAuth2ClientCredentialId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchOAuth2ClientCredentialRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "oAuth2ClientCredential",
                    bodyModel: model.OAuth2ClientCredential,
                    type: "model.OAuth2ClientCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update a Password Policy
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchPasswordPolicyRequest
     * @return PatchPasswordPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchPasswordPolicy.ts.html |here} to see how to use PatchPasswordPolicy API.
     */
    patchPasswordPolicy(patchPasswordPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchPasswordPolicy.");
            const operationName = "patchPasswordPolicy";
            const apiReferenceLink = "";
            const pathParams = {
                "{passwordPolicyId}": patchPasswordPolicyRequest.passwordPolicyId
            };
            const queryParams = {
                "attributes": patchPasswordPolicyRequest.attributes,
                "attributeSets": patchPasswordPolicyRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchPasswordPolicyRequest.authorization,
                "resource_type_schema_version": patchPasswordPolicyRequest.resourceTypeSchemaVersion,
                "if-match": patchPasswordPolicyRequest.ifMatch,
                "opc-retry-token": patchPasswordPolicyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchPasswordPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/PasswordPolicies/{passwordPolicyId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchPasswordPolicyRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "passwordPolicy",
                    bodyModel: model.PasswordPolicy,
                    type: "model.PasswordPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update user's smtp credentials
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchSmtpCredentialRequest
     * @return PatchSmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchSmtpCredential.ts.html |here} to see how to use PatchSmtpCredential API.
     */
    patchSmtpCredential(patchSmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchSmtpCredential.");
            const operationName = "patchSmtpCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{smtpCredentialId}": patchSmtpCredentialRequest.smtpCredentialId
            };
            const queryParams = {
                "attributes": patchSmtpCredentialRequest.attributes,
                "attributeSets": patchSmtpCredentialRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchSmtpCredentialRequest.authorization,
                "resource_type_schema_version": patchSmtpCredentialRequest.resourceTypeSchemaVersion,
                "if-match": patchSmtpCredentialRequest.ifMatch,
                "opc-retry-token": patchSmtpCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchSmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/SmtpCredentials/{smtpCredentialId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchSmtpCredentialRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "smtpCredential",
                    bodyModel: model.SmtpCredential,
                    type: "model.SmtpCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update a User
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PatchUserRequest
     * @return PatchUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PatchUser.ts.html |here} to see how to use PatchUser API.
     */
    patchUser(patchUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#patchUser.");
            const operationName = "patchUser";
            const apiReferenceLink = "";
            const pathParams = {
                "{userId}": patchUserRequest.userId
            };
            const queryParams = {
                "attributes": patchUserRequest.attributes,
                "attributeSets": patchUserRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": patchUserRequest.authorization,
                "resource_type_schema_version": patchUserRequest.resourceTypeSchemaVersion,
                "if-match": patchUserRequest.ifMatch,
                "opc-retry-token": patchUserRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Users/{userId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchUserRequest.patchOp, "PatchOp", model.PatchOp.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "user",
                    bodyModel: model.User,
                    type: "model.User",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replace Authentication Factor Settings
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutAuthenticationFactorSettingRequest
     * @return PutAuthenticationFactorSettingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutAuthenticationFactorSetting.ts.html |here} to see how to use PutAuthenticationFactorSetting API.
     */
    putAuthenticationFactorSetting(putAuthenticationFactorSettingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putAuthenticationFactorSetting.");
            const operationName = "putAuthenticationFactorSetting";
            const apiReferenceLink = "";
            const pathParams = {
                "{authenticationFactorSettingId}": putAuthenticationFactorSettingRequest.authenticationFactorSettingId
            };
            const queryParams = {
                "attributes": putAuthenticationFactorSettingRequest.attributes,
                "attributeSets": putAuthenticationFactorSettingRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putAuthenticationFactorSettingRequest.authorization,
                "resource_type_schema_version": putAuthenticationFactorSettingRequest.resourceTypeSchemaVersion,
                "if-match": putAuthenticationFactorSettingRequest.ifMatch,
                "opc-retry-token": putAuthenticationFactorSettingRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putAuthenticationFactorSettingRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthenticationFactorSettings/{authenticationFactorSettingId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putAuthenticationFactorSettingRequest.authenticationFactorSetting, "AuthenticationFactorSetting", model.AuthenticationFactorSetting.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authenticationFactorSetting",
                    bodyModel: model.AuthenticationFactorSetting,
                    type: "model.AuthenticationFactorSetting",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replace a DynamicResourceGroup
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutDynamicResourceGroupRequest
     * @return PutDynamicResourceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutDynamicResourceGroup.ts.html |here} to see how to use PutDynamicResourceGroup API.
     */
    putDynamicResourceGroup(putDynamicResourceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putDynamicResourceGroup.");
            const operationName = "putDynamicResourceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{dynamicResourceGroupId}": putDynamicResourceGroupRequest.dynamicResourceGroupId
            };
            const queryParams = {
                "attributes": putDynamicResourceGroupRequest.attributes,
                "attributeSets": putDynamicResourceGroupRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putDynamicResourceGroupRequest.authorization,
                "resource_type_schema_version": putDynamicResourceGroupRequest.resourceTypeSchemaVersion,
                "if-match": putDynamicResourceGroupRequest.ifMatch,
                "opc-retry-token": putDynamicResourceGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putDynamicResourceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/DynamicResourceGroups/{dynamicResourceGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putDynamicResourceGroupRequest.dynamicResourceGroup, "DynamicResourceGroup", model.DynamicResourceGroup.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dynamicResourceGroup",
                    bodyModel: model.DynamicResourceGroup,
                    type: "model.DynamicResourceGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replace a Group
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutGroupRequest
     * @return PutGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutGroup.ts.html |here} to see how to use PutGroup API.
     */
    putGroup(putGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putGroup.");
            const operationName = "putGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{groupId}": putGroupRequest.groupId
            };
            const queryParams = {
                "attributes": putGroupRequest.attributes,
                "attributeSets": putGroupRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putGroupRequest.authorization,
                "resource_type_schema_version": putGroupRequest.resourceTypeSchemaVersion,
                "if-match": putGroupRequest.ifMatch,
                "opc-retry-token": putGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Groups/{groupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putGroupRequest.group, "Group", model.Group.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "group",
                    bodyModel: model.Group,
                    type: "model.Group",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replace an Identity Provider
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutIdentityProviderRequest
     * @return PutIdentityProviderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutIdentityProvider.ts.html |here} to see how to use PutIdentityProvider API.
     */
    putIdentityProvider(putIdentityProviderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putIdentityProvider.");
            const operationName = "putIdentityProvider";
            const apiReferenceLink = "";
            const pathParams = {
                "{identityProviderId}": putIdentityProviderRequest.identityProviderId
            };
            const queryParams = {
                "attributes": putIdentityProviderRequest.attributes,
                "attributeSets": putIdentityProviderRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putIdentityProviderRequest.authorization,
                "resource_type_schema_version": putIdentityProviderRequest.resourceTypeSchemaVersion,
                "if-match": putIdentityProviderRequest.ifMatch,
                "opc-retry-token": putIdentityProviderRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putIdentityProviderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/IdentityProviders/{identityProviderId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putIdentityProviderRequest.identityProvider, "IdentityProvider", model.IdentityProvider.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "identityProvider",
                    bodyModel: model.IdentityProvider,
                    type: "model.IdentityProvider",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replace KmsiSettings
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutKmsiSettingRequest
     * @return PutKmsiSettingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutKmsiSetting.ts.html |here} to see how to use PutKmsiSetting API.
     */
    putKmsiSetting(putKmsiSettingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putKmsiSetting.");
            const operationName = "putKmsiSetting";
            const apiReferenceLink = "";
            const pathParams = {
                "{kmsiSettingId}": putKmsiSettingRequest.kmsiSettingId
            };
            const queryParams = {
                "attributes": putKmsiSettingRequest.attributes,
                "attributeSets": putKmsiSettingRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putKmsiSettingRequest.authorization,
                "resource_type_schema_version": putKmsiSettingRequest.resourceTypeSchemaVersion,
                "if-match": putKmsiSettingRequest.ifMatch,
                "opc-retry-token": putKmsiSettingRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putKmsiSettingRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/KmsiSettings/{kmsiSettingId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putKmsiSettingRequest.kmsiSetting, "KmsiSetting", model.KmsiSetting.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "kmsiSetting",
                    bodyModel: model.KmsiSetting,
                    type: "model.KmsiSetting",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replace User Info
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutMeRequest
     * @return PutMeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutMe.ts.html |here} to see how to use PutMe API.
     */
    putMe(putMeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putMe.");
            const operationName = "putMe";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "attributes": putMeRequest.attributes,
                "attributeSets": putMeRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putMeRequest.authorization,
                "resource_type_schema_version": putMeRequest.resourceTypeSchemaVersion,
                "if-match": putMeRequest.ifMatch,
                "opc-retry-token": putMeRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putMeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Me",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putMeRequest.me, "Me", model.Me.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "me",
                    bodyModel: model.Me,
                    type: "model.Me",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Self-Service Password Update
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutMePasswordChangerRequest
     * @return PutMePasswordChangerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutMePasswordChanger.ts.html |here} to see how to use PutMePasswordChanger API.
     */
    putMePasswordChanger(putMePasswordChangerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putMePasswordChanger.");
            const operationName = "putMePasswordChanger";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putMePasswordChangerRequest.authorization,
                "resource_type_schema_version": putMePasswordChangerRequest.resourceTypeSchemaVersion,
                "if-match": putMePasswordChangerRequest.ifMatch,
                "opc-retry-token": putMePasswordChangerRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putMePasswordChangerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MePasswordChanger",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putMePasswordChangerRequest.mePasswordChanger, "MePasswordChanger", model.MePasswordChanger.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mePasswordChanger",
                    bodyModel: model.MePasswordChanger,
                    type: "model.MePasswordChanger",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replace a Password Policy
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutPasswordPolicyRequest
     * @return PutPasswordPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutPasswordPolicy.ts.html |here} to see how to use PutPasswordPolicy API.
     */
    putPasswordPolicy(putPasswordPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putPasswordPolicy.");
            const operationName = "putPasswordPolicy";
            const apiReferenceLink = "";
            const pathParams = {
                "{passwordPolicyId}": putPasswordPolicyRequest.passwordPolicyId
            };
            const queryParams = {
                "attributes": putPasswordPolicyRequest.attributes,
                "attributeSets": putPasswordPolicyRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putPasswordPolicyRequest.authorization,
                "resource_type_schema_version": putPasswordPolicyRequest.resourceTypeSchemaVersion,
                "if-match": putPasswordPolicyRequest.ifMatch,
                "opc-retry-token": putPasswordPolicyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putPasswordPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/PasswordPolicies/{passwordPolicyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putPasswordPolicyRequest.passwordPolicy, "PasswordPolicy", model.PasswordPolicy.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "passwordPolicy",
                    bodyModel: model.PasswordPolicy,
                    type: "model.PasswordPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replace a User
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutUserRequest
     * @return PutUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutUser.ts.html |here} to see how to use PutUser API.
     */
    putUser(putUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putUser.");
            const operationName = "putUser";
            const apiReferenceLink = "";
            const pathParams = {
                "{userId}": putUserRequest.userId
            };
            const queryParams = {
                "attributes": putUserRequest.attributes,
                "attributeSets": putUserRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putUserRequest.authorization,
                "resource_type_schema_version": putUserRequest.resourceTypeSchemaVersion,
                "if-match": putUserRequest.ifMatch,
                "opc-retry-token": putUserRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Users/{userId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putUserRequest.user, "User", model.User.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "user",
                    bodyModel: model.User,
                    type: "model.User",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Change user capabilities
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutUserCapabilitiesChangerRequest
     * @return PutUserCapabilitiesChangerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutUserCapabilitiesChanger.ts.html |here} to see how to use PutUserCapabilitiesChanger API.
     */
    putUserCapabilitiesChanger(putUserCapabilitiesChangerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putUserCapabilitiesChanger.");
            const operationName = "putUserCapabilitiesChanger";
            const apiReferenceLink = "";
            const pathParams = {
                "{userCapabilitiesChangerId}": putUserCapabilitiesChangerRequest.userCapabilitiesChangerId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putUserCapabilitiesChangerRequest.authorization,
                "resource_type_schema_version": putUserCapabilitiesChangerRequest.resourceTypeSchemaVersion,
                "if-match": putUserCapabilitiesChangerRequest.ifMatch,
                "opc-retry-token": putUserCapabilitiesChangerRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putUserCapabilitiesChangerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/UserCapabilitiesChanger/{userCapabilitiesChangerId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putUserCapabilitiesChangerRequest.userCapabilitiesChanger, "UserCapabilitiesChanger", model.UserCapabilitiesChanger.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userCapabilitiesChanger",
                    bodyModel: model.UserCapabilitiesChanger,
                    type: "model.UserCapabilitiesChanger",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Change a User Password (Known Value)
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutUserPasswordChangerRequest
     * @return PutUserPasswordChangerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutUserPasswordChanger.ts.html |here} to see how to use PutUserPasswordChanger API.
     */
    putUserPasswordChanger(putUserPasswordChangerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putUserPasswordChanger.");
            const operationName = "putUserPasswordChanger";
            const apiReferenceLink = "";
            const pathParams = {
                "{userPasswordChangerId}": putUserPasswordChangerRequest.userPasswordChangerId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putUserPasswordChangerRequest.authorization,
                "resource_type_schema_version": putUserPasswordChangerRequest.resourceTypeSchemaVersion,
                "if-match": putUserPasswordChangerRequest.ifMatch,
                "opc-retry-token": putUserPasswordChangerRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putUserPasswordChangerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/UserPasswordChanger/{userPasswordChangerId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putUserPasswordChangerRequest.userPasswordChanger, "UserPasswordChanger", model.UserPasswordChanger.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userPasswordChanger",
                    bodyModel: model.UserPasswordChanger,
                    type: "model.UserPasswordChanger",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Reset a User Password (Random Value)
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutUserPasswordResetterRequest
     * @return PutUserPasswordResetterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutUserPasswordResetter.ts.html |here} to see how to use PutUserPasswordResetter API.
     */
    putUserPasswordResetter(putUserPasswordResetterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putUserPasswordResetter.");
            const operationName = "putUserPasswordResetter";
            const apiReferenceLink = "";
            const pathParams = {
                "{userPasswordResetterId}": putUserPasswordResetterRequest.userPasswordResetterId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putUserPasswordResetterRequest.authorization,
                "resource_type_schema_version": putUserPasswordResetterRequest.resourceTypeSchemaVersion,
                "if-match": putUserPasswordResetterRequest.ifMatch,
                "opc-retry-token": putUserPasswordResetterRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putUserPasswordResetterRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/UserPasswordResetter/{userPasswordResetterId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putUserPasswordResetterRequest.userPasswordResetter, "UserPasswordResetter", model.UserPasswordResetter.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userPasswordResetter",
                    bodyModel: model.UserPasswordResetter,
                    type: "model.UserPasswordResetter",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Change User Status
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutUserStatusChangerRequest
     * @return PutUserStatusChangerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/PutUserStatusChanger.ts.html |here} to see how to use PutUserStatusChanger API.
     */
    putUserStatusChanger(putUserStatusChangerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#putUserStatusChanger.");
            const operationName = "putUserStatusChanger";
            const apiReferenceLink = "";
            const pathParams = {
                "{userStatusChangerId}": putUserStatusChangerRequest.userStatusChangerId
            };
            const queryParams = {
                "attributes": putUserStatusChangerRequest.attributes,
                "attributeSets": putUserStatusChangerRequest.attributeSets
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": putUserStatusChangerRequest.authorization,
                "resource_type_schema_version": putUserStatusChangerRequest.resourceTypeSchemaVersion,
                "if-match": putUserStatusChangerRequest.ifMatch,
                "opc-retry-token": putUserStatusChangerRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putUserStatusChangerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/UserStatusChanger/{userStatusChangerId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putUserStatusChangerRequest.userStatusChanger, "UserStatusChanger", model.UserStatusChanger.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userStatusChanger",
                    bodyModel: model.UserStatusChanger,
                    type: "model.UserStatusChanger",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search ApiKeys Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchApiKeysRequest
     * @return SearchApiKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchApiKeys.ts.html |here} to see how to use SearchApiKeys API.
     */
    searchApiKeys(searchApiKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchApiKeys.");
            const operationName = "searchApiKeys";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchApiKeysRequest.page,
                "limit": searchApiKeysRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchApiKeysRequest.authorization,
                "resource_type_schema_version": searchApiKeysRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchApiKeysRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchApiKeysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ApiKeys/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchApiKeysRequest.apiKeySearchRequest, "ApiKeySearchRequest", model.ApiKeySearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "apiKeys",
                    bodyModel: model.ApiKeys,
                    type: "model.ApiKeys",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search AuthTokens Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchAuthTokensRequest
     * @return SearchAuthTokensResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchAuthTokens.ts.html |here} to see how to use SearchAuthTokens API.
     */
    searchAuthTokens(searchAuthTokensRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchAuthTokens.");
            const operationName = "searchAuthTokens";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchAuthTokensRequest.page,
                "limit": searchAuthTokensRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchAuthTokensRequest.authorization,
                "resource_type_schema_version": searchAuthTokensRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchAuthTokensRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchAuthTokensRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthTokens/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchAuthTokensRequest.authTokenSearchRequest, "AuthTokenSearchRequest", model.AuthTokenSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authTokens",
                    bodyModel: model.AuthTokens,
                    type: "model.AuthTokens",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Authentication Factor Settings Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchAuthenticationFactorSettingsRequest
     * @return SearchAuthenticationFactorSettingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchAuthenticationFactorSettings.ts.html |here} to see how to use SearchAuthenticationFactorSettings API.
     */
    searchAuthenticationFactorSettings(searchAuthenticationFactorSettingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchAuthenticationFactorSettings.");
            const operationName = "searchAuthenticationFactorSettings";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchAuthenticationFactorSettingsRequest.page,
                "limit": searchAuthenticationFactorSettingsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchAuthenticationFactorSettingsRequest.authorization,
                "resource_type_schema_version": searchAuthenticationFactorSettingsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchAuthenticationFactorSettingsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchAuthenticationFactorSettingsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/AuthenticationFactorSettings/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchAuthenticationFactorSettingsRequest.authenticationFactorSettingsSearchRequest, "AuthenticationFactorSettingsSearchRequest", model.AuthenticationFactorSettingsSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authenticationFactorSettings",
                    bodyModel: model.AuthenticationFactorSettings,
                    type: "model.AuthenticationFactorSettings",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search CustomerSecretKeys Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchCustomerSecretKeysRequest
     * @return SearchCustomerSecretKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchCustomerSecretKeys.ts.html |here} to see how to use SearchCustomerSecretKeys API.
     */
    searchCustomerSecretKeys(searchCustomerSecretKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchCustomerSecretKeys.");
            const operationName = "searchCustomerSecretKeys";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchCustomerSecretKeysRequest.page,
                "limit": searchCustomerSecretKeysRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchCustomerSecretKeysRequest.authorization,
                "resource_type_schema_version": searchCustomerSecretKeysRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchCustomerSecretKeysRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchCustomerSecretKeysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/CustomerSecretKeys/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchCustomerSecretKeysRequest.customerSecretKeySearchRequest, "CustomerSecretKeySearchRequest", model.CustomerSecretKeySearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customerSecretKeys",
                    bodyModel: model.CustomerSecretKeys,
                    type: "model.CustomerSecretKeys",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search DynamicResourceGroups Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchDynamicResourceGroupsRequest
     * @return SearchDynamicResourceGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchDynamicResourceGroups.ts.html |here} to see how to use SearchDynamicResourceGroups API.
     */
    searchDynamicResourceGroups(searchDynamicResourceGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchDynamicResourceGroups.");
            const operationName = "searchDynamicResourceGroups";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchDynamicResourceGroupsRequest.page,
                "limit": searchDynamicResourceGroupsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchDynamicResourceGroupsRequest.authorization,
                "resource_type_schema_version": searchDynamicResourceGroupsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchDynamicResourceGroupsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchDynamicResourceGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/DynamicResourceGroups/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchDynamicResourceGroupsRequest.dynamicResourceGroupSearchRequest, "DynamicResourceGroupSearchRequest", model.DynamicResourceGroupSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dynamicResourceGroups",
                    bodyModel: model.DynamicResourceGroups,
                    type: "model.DynamicResourceGroups",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Groups Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchGroupsRequest
     * @return SearchGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchGroups.ts.html |here} to see how to use SearchGroups API.
     */
    searchGroups(searchGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchGroups.");
            const operationName = "searchGroups";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchGroupsRequest.page,
                "limit": searchGroupsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchGroupsRequest.authorization,
                "resource_type_schema_version": searchGroupsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchGroupsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Groups/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchGroupsRequest.groupSearchRequest, "GroupSearchRequest", model.GroupSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "groups",
                    bodyModel: model.Groups,
                    type: "model.Groups",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Identity Providers Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchIdentityProvidersRequest
     * @return SearchIdentityProvidersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchIdentityProviders.ts.html |here} to see how to use SearchIdentityProviders API.
     */
    searchIdentityProviders(searchIdentityProvidersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchIdentityProviders.");
            const operationName = "searchIdentityProviders";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchIdentityProvidersRequest.page,
                "limit": searchIdentityProvidersRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchIdentityProvidersRequest.authorization,
                "resource_type_schema_version": searchIdentityProvidersRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchIdentityProvidersRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchIdentityProvidersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/IdentityProviders/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchIdentityProvidersRequest.identityProviderSearchRequest, "IdentityProviderSearchRequest", model.IdentityProviderSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "identityProviders",
                    bodyModel: model.IdentityProviders,
                    type: "model.IdentityProviders",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search KmsiSettings Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchKmsiSettingsRequest
     * @return SearchKmsiSettingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchKmsiSettings.ts.html |here} to see how to use SearchKmsiSettings API.
     */
    searchKmsiSettings(searchKmsiSettingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchKmsiSettings.");
            const operationName = "searchKmsiSettings";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchKmsiSettingsRequest.page,
                "limit": searchKmsiSettingsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchKmsiSettingsRequest.authorization,
                "resource_type_schema_version": searchKmsiSettingsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchKmsiSettingsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchKmsiSettingsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/KmsiSettings/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchKmsiSettingsRequest.kmsiSettingsSearchRequest, "KmsiSettingsSearchRequest", model.KmsiSettingsSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "kmsiSettings",
                    bodyModel: model.KmsiSettings,
                    type: "model.KmsiSettings",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search My Groups Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchMyGroupsRequest
     * @return SearchMyGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchMyGroups.ts.html |here} to see how to use SearchMyGroups API.
     */
    searchMyGroups(searchMyGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchMyGroups.");
            const operationName = "searchMyGroups";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchMyGroupsRequest.page,
                "limit": searchMyGroupsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchMyGroupsRequest.authorization,
                "resource_type_schema_version": searchMyGroupsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchMyGroupsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchMyGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/MyGroups/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchMyGroupsRequest.myGroupSearchRequest, "MyGroupSearchRequest", model.MyGroupSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "myGroups",
                    bodyModel: model.MyGroups,
                    type: "model.MyGroups",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Oauth2Clients Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchOAuth2ClientCredentialsRequest
     * @return SearchOAuth2ClientCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchOAuth2ClientCredentials.ts.html |here} to see how to use SearchOAuth2ClientCredentials API.
     */
    searchOAuth2ClientCredentials(searchOAuth2ClientCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchOAuth2ClientCredentials.");
            const operationName = "searchOAuth2ClientCredentials";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchOAuth2ClientCredentialsRequest.page,
                "limit": searchOAuth2ClientCredentialsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchOAuth2ClientCredentialsRequest.authorization,
                "resource_type_schema_version": searchOAuth2ClientCredentialsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchOAuth2ClientCredentialsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchOAuth2ClientCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/OAuth2ClientCredentials/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchOAuth2ClientCredentialsRequest.oAuth2ClientCredentialSearchRequest, "OAuth2ClientCredentialSearchRequest", model.OAuth2ClientCredentialSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "oAuth2ClientCredentials",
                    bodyModel: model.OAuth2ClientCredentials,
                    type: "model.OAuth2ClientCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Password Policies Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchPasswordPoliciesRequest
     * @return SearchPasswordPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchPasswordPolicies.ts.html |here} to see how to use SearchPasswordPolicies API.
     */
    searchPasswordPolicies(searchPasswordPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchPasswordPolicies.");
            const operationName = "searchPasswordPolicies";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchPasswordPoliciesRequest.page,
                "limit": searchPasswordPoliciesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchPasswordPoliciesRequest.authorization,
                "resource_type_schema_version": searchPasswordPoliciesRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchPasswordPoliciesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchPasswordPoliciesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/PasswordPolicies/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchPasswordPoliciesRequest.passwordPolicySearchRequest, "PasswordPolicySearchRequest", model.PasswordPolicySearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "passwordPolicies",
                    bodyModel: model.PasswordPolicies,
                    type: "model.PasswordPolicies",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search smtp credentials Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchSmtpCredentialsRequest
     * @return SearchSmtpCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchSmtpCredentials.ts.html |here} to see how to use SearchSmtpCredentials API.
     */
    searchSmtpCredentials(searchSmtpCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchSmtpCredentials.");
            const operationName = "searchSmtpCredentials";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchSmtpCredentialsRequest.page,
                "limit": searchSmtpCredentialsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchSmtpCredentialsRequest.authorization,
                "resource_type_schema_version": searchSmtpCredentialsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchSmtpCredentialsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchSmtpCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/SmtpCredentials/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchSmtpCredentialsRequest.smtpCredentialSearchRequest, "SmtpCredentialSearchRequest", model.SmtpCredentialSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "smtpCredentials",
                    bodyModel: model.SmtpCredentials,
                    type: "model.SmtpCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search a User's DBCredentials using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchUserDbCredentialsRequest
     * @return SearchUserDbCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchUserDbCredentials.ts.html |here} to see how to use SearchUserDbCredentials API.
     */
    searchUserDbCredentials(searchUserDbCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchUserDbCredentials.");
            const operationName = "searchUserDbCredentials";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchUserDbCredentialsRequest.page,
                "limit": searchUserDbCredentialsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchUserDbCredentialsRequest.authorization,
                "resource_type_schema_version": searchUserDbCredentialsRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchUserDbCredentialsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchUserDbCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/UserDbCredentials/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchUserDbCredentialsRequest.userDbCredentialsSearchRequest, "UserDbCredentialsSearchRequest", model.UserDbCredentialsSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userDbCredentials",
                    bodyModel: model.UserDbCredentials,
                    type: "model.UserDbCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search Users Using POST
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchUsersRequest
     * @return SearchUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/identitydomains/SearchUsers.ts.html |here} to see how to use SearchUsers API.
     */
    searchUsers(searchUsersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityDomainsClient#searchUsers.");
            const operationName = "searchUsers";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": searchUsersRequest.page,
                "limit": searchUsersRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "authorization": searchUsersRequest.authorization,
                "resource_type_schema_version": searchUsersRequest.resourceTypeSchemaVersion,
                "opc-retry-token": searchUsersRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchUsersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/Users/.search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchUsersRequest.userSearchRequest, "UserSearchRequest", model.UserSearchRequest.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "users",
                    bodyModel: model.Users,
                    type: "model.Users",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.IdentityDomainsClient = IdentityDomainsClient;
IdentityDomainsClient.serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
IdentityDomainsClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map