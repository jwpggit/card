/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm). This REST API is SCIM compliant.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * This extension defines attributes used to manage Multi-Factor Authentication within a service provider. The extension is typically applied to a User resource, but MAY be applied to other resources that use MFA.
 */
export interface ExtensionMfaUser {
    /**
     * Preferred Authentication Factor Type
     * <p>
     **Added In:** 18.3.6
     * <p>
     **SCIM++ Properties:**
     *  - caseExact: true
     *  - idcsSearchable: true
     *  - multiValued: false
     *  - mutability: readWrite
     *  - required: false
     *  - returned: default
     *  - type: string
     *  - uniqueness: none
     */
    "preferredAuthenticationFactor"?: ExtensionMfaUser.PreferredAuthenticationFactor;
    /**
     * User Opted for MFA
     * <p>
     **Added In:** 18.3.6
     * <p>
     **SCIM++ Properties:**
     *  - caseExact: true
     *  - idcsSearchable: true
     *  - multiValued: false
     *  - mutability: readOnly
     *  - required: false
     *  - returned: default
     *  - type: string
     *  - uniqueness: none
     */
    "mfaStatus"?: ExtensionMfaUser.MfaStatus;
    /**
     * Preferred Third party vendor name
     * <p>
     **Added In:** 19.2.1
     * <p>
     **SCIM++ Properties:**
     *  - caseExact: true
     *  - idcsSearchable: true
     *  - multiValued: false
     *  - mutability: readWrite
     *  - required: false
     *  - returned: default
     *  - type: string
     *  - uniqueness: none
     */
    "preferredThirdPartyVendor"?: string;
    /**
     * Preferred Authentication method
     * <p>
     **Added In:** 2009232244
     * <p>
     **SCIM++ Properties:**
     *  - caseExact: true
     *  - idcsSearchable: false
     *  - multiValued: false
     *  - mutability: readWrite
     *  - required: false
     *  - returned: default
     *  - type: string
     *  - uniqueness: none
     */
    "preferredAuthenticationMethod"?: string;
    /**
     * Number of incorrect Multi Factor Authentication login attempts made by this user. The user gets locked, if this reaches the threshold specified in the maxIncorrectAttempts attribute in AuthenticationFactorSettings
     * <p>
     **Added In:** 18.3.6
     * <p>
     **SCIM++ Properties:**
     *  - idcsSearchable: false
     *  - multiValued: false
     *  - mutability: readOnly
     *  - required: false
     *  - returned: default
     *  - type: integer
     *  - uniqueness: none Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "loginAttempts"?: number;
    /**
     * This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
     * <p>
     **Added In:** 18.3.6
     * <p>
     **SCIM++ Properties:**
     *  - idcsSearchable: false
     *  - multiValued: false
     *  - mutability: readWrite
     *  - required: false
     *  - returned: request
     *  - type: dateTime
     *  - uniqueness: none
     */
    "mfaEnabledOn"?: string;
    /**
     * User MFA Ignored Apps Identifiers
     * <p>
     **Added In:** 19.2.1
     * <p>
     **SCIM++ Properties:**
     *  - caseExact: true
     *  - idcsSearchable: true
     *  - multiValued: true
     *  - mutability: readWrite
     *  - required: false
     *  - returned: default
     *  - type: string
     *  - uniqueness: none
     */
    "mfaIgnoredApps"?: Array<string>;
    "preferredDevice"?: model.UserExtPreferredDevice;
    /**
     * A list of devices enrolled by the user.
     * <p>
     **Added In:** 18.3.6
     * <p>
     **SCIM++ Properties:**
     *  - idcsCompositeKey: [value]
     *  - multiValued: true
     *  - mutability: readOnly
     *  - required: false
     *  - returned: request
     *  - type: complex
     *  - uniqueness: none
     */
    "devices"?: Array<model.UserExtDevices>;
    /**
     * A list of bypass codes belongs to user
     * <p>
     **Added In:** 18.3.6
     * <p>
     **SCIM++ Properties:**
     *  - idcsCompositeKey: [value]
     *  - multiValued: true
     *  - mutability: readOnly
     *  - required: false
     *  - returned: request
     *  - type: complex
     *  - uniqueness: none
     */
    "bypassCodes"?: Array<model.UserExtBypassCodes>;
    /**
     * A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
     * <p>
     **Added In:** 18.3.6
     * <p>
     **SCIM++ Properties:**
     *  - idcsCompositeKey: [value]
     *  - multiValued: true
     *  - mutability: readWrite
     *  - required: false
     *  - returned: request
     *  - type: complex
     *  - uniqueness: none
     */
    "trustedUserAgents"?: Array<model.UserExtTrustedUserAgents>;
}
export declare namespace ExtensionMfaUser {
    enum PreferredAuthenticationFactor {
        Email = "EMAIL",
        Sms = "SMS",
        Totp = "TOTP",
        Push = "PUSH",
        Offlinetotp = "OFFLINETOTP",
        UsernamePassword = "USERNAME_PASSWORD",
        SecurityQuestions = "SECURITY_QUESTIONS",
        Voice = "VOICE",
        PhoneCall = "PHONE_CALL",
        Thirdparty = "THIRDPARTY",
        FidoAuthenticator = "FIDO_AUTHENTICATOR",
        YubicoOtp = "YUBICO_OTP",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum MfaStatus {
        Enrolled = "ENROLLED",
        Ignored = "IGNORED",
        UnEnrolled = "UN_ENROLLED",
        Disabled = "DISABLED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: ExtensionMfaUser): object;
    function getDeserializedJsonObj(obj: ExtensionMfaUser): object;
}
