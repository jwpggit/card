/**
 * Stack Monitoring API
 * Stack Monitoring API.
 * OpenAPI spec version: 20210330
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { StackMonitoringWaiter } from "./stackmonitoring-waiter";
export declare enum StackMonitoringApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class StackMonitoringClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": StackMonitoringWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpOptions: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new StackMonitoringWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): StackMonitoringWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): StackMonitoringWaiter;
    /**
     * Create an association between two monitored resources. Associations can be created
     * between resources from different compartments as long they are in same tenancy.
     * User should have required access in both the compartments.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AssociateMonitoredResourcesRequest
     * @return AssociateMonitoredResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/AssociateMonitoredResources.ts.html |here} to see how to use AssociateMonitoredResources API.
     */
    associateMonitoredResources(associateMonitoredResourcesRequest: requests.AssociateMonitoredResourcesRequest): Promise<responses.AssociateMonitoredResourcesResponse>;
    /**
     * Moves a monitored resource from one compartment to another.
     * When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeMonitoredResourceCompartmentRequest
     * @return ChangeMonitoredResourceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/ChangeMonitoredResourceCompartment.ts.html |here} to see how to use ChangeMonitoredResourceCompartment API.
     */
    changeMonitoredResourceCompartment(changeMonitoredResourceCompartmentRequest: requests.ChangeMonitoredResourceCompartmentRequest): Promise<responses.ChangeMonitoredResourceCompartmentResponse>;
    /**
     * API to create discovery Job and submit discovery Details to agent.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDiscoveryJobRequest
     * @return CreateDiscoveryJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/CreateDiscoveryJob.ts.html |here} to see how to use CreateDiscoveryJob API.
     */
    createDiscoveryJob(createDiscoveryJobRequest: requests.CreateDiscoveryJobRequest): Promise<responses.CreateDiscoveryJobResponse>;
    /**
     * Creates a new monitored resource for the given resource type with the details and submits
     * a work request for promoting the resource to agent. Once the resource is successfully
     * added to agent, resource state will be marked active.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMonitoredResourceRequest
     * @return CreateMonitoredResourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/CreateMonitoredResource.ts.html |here} to see how to use CreateMonitoredResource API.
     */
    createMonitoredResource(createMonitoredResourceRequest: requests.CreateMonitoredResourceRequest): Promise<responses.CreateMonitoredResourceResponse>;
    /**
     * Deletes a DiscoveryJob by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDiscoveryJobRequest
     * @return DeleteDiscoveryJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/DeleteDiscoveryJob.ts.html |here} to see how to use DeleteDiscoveryJob API.
     */
    deleteDiscoveryJob(deleteDiscoveryJobRequest: requests.DeleteDiscoveryJobRequest): Promise<responses.DeleteDiscoveryJobResponse>;
    /**
     * Delete monitored resource by the given identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
     * By default, only the specified resource is deleted. If the parameter 'isDeleteMembers' is set to true,
     * then the member resources will be deleted too. If the operation fails partially, the deleted entries
     * will not be rolled back.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMonitoredResourceRequest
     * @return DeleteMonitoredResourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/DeleteMonitoredResource.ts.html |here} to see how to use DeleteMonitoredResource API.
     */
    deleteMonitoredResource(deleteMonitoredResourceRequest: requests.DeleteMonitoredResourceRequest): Promise<responses.DeleteMonitoredResourceResponse>;
    /**
     * Disable external database resource monitoring. All the references in DBaaS,
     * DBM and resource service will be deleted as part of this operation.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DisableExternalDatabaseRequest
     * @return DisableExternalDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/DisableExternalDatabase.ts.html |here} to see how to use DisableExternalDatabase API.
     */
    disableExternalDatabase(disableExternalDatabaseRequest: requests.DisableExternalDatabaseRequest): Promise<responses.DisableExternalDatabaseResponse>;
    /**
     * Removes associations between two monitored resources.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DisassociateMonitoredResourcesRequest
     * @return DisassociateMonitoredResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/DisassociateMonitoredResources.ts.html |here} to see how to use DisassociateMonitoredResources API.
     */
    disassociateMonitoredResources(disassociateMonitoredResourcesRequest: requests.DisassociateMonitoredResourcesRequest): Promise<responses.DisassociateMonitoredResourcesResponse>;
    /**
     * API to get the details of discovery Job by identifier.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDiscoveryJobRequest
     * @return GetDiscoveryJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/GetDiscoveryJob.ts.html |here} to see how to use GetDiscoveryJob API.
     */
    getDiscoveryJob(getDiscoveryJobRequest: requests.GetDiscoveryJobRequest): Promise<responses.GetDiscoveryJobResponse>;
    /**
     * Get monitored resource for the given identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMonitoredResourceRequest
     * @return GetMonitoredResourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/GetMonitoredResource.ts.html |here} to see how to use GetMonitoredResource API.
     */
    getMonitoredResource(getMonitoredResourceRequest: requests.GetMonitoredResourceRequest): Promise<responses.GetMonitoredResourceResponse>;
    /**
     * Gets the status of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * API to get all the logs of a Discovery Job.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDiscoveryJobLogsRequest
     * @return ListDiscoveryJobLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/ListDiscoveryJobLogs.ts.html |here} to see how to use ListDiscoveryJobLogs API.
     */
    listDiscoveryJobLogs(listDiscoveryJobLogsRequest: requests.ListDiscoveryJobLogsRequest): Promise<responses.ListDiscoveryJobLogsResponse>;
    /**
     * API to get the details of all Discovery Jobs.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDiscoveryJobsRequest
     * @return ListDiscoveryJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/ListDiscoveryJobs.ts.html |here} to see how to use ListDiscoveryJobs API.
     */
    listDiscoveryJobs(listDiscoveryJobsRequest: requests.ListDiscoveryJobsRequest): Promise<responses.ListDiscoveryJobsResponse>;
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * List all associated resources recursively up-to a specified level,
     * for the monitored resources of type specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SearchAssociatedResourcesRequest
     * @return SearchAssociatedResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/SearchAssociatedResources.ts.html |here} to see how to use SearchAssociatedResources API.
     */
    searchAssociatedResources(searchAssociatedResourcesRequest: requests.SearchAssociatedResourcesRequest): Promise<responses.SearchAssociatedResourcesResponse>;
    /**
     * Search associations in the given compartment based on the search criteria.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SearchMonitoredResourceAssociationsRequest
     * @return SearchMonitoredResourceAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/SearchMonitoredResourceAssociations.ts.html |here} to see how to use SearchMonitoredResourceAssociations API.
     */
    searchMonitoredResourceAssociations(searchMonitoredResourceAssociationsRequest: requests.SearchMonitoredResourceAssociationsRequest): Promise<responses.SearchMonitoredResourceAssociationsResponse>;
    /**
     * List the member resources for the given monitored resource identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SearchMonitoredResourceMembersRequest
     * @return SearchMonitoredResourceMembersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/SearchMonitoredResourceMembers.ts.html |here} to see how to use SearchMonitoredResourceMembers API.
     */
    searchMonitoredResourceMembers(searchMonitoredResourceMembersRequest: requests.SearchMonitoredResourceMembersRequest): Promise<responses.SearchMonitoredResourceMembersResponse>;
    /**
     * Gets a list of all monitored resources in a compartment for the given search criteria.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SearchMonitoredResourcesRequest
     * @return SearchMonitoredResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/SearchMonitoredResources.ts.html |here} to see how to use SearchMonitoredResources API.
     */
    searchMonitoredResources(searchMonitoredResourcesRequest: requests.SearchMonitoredResourcesRequest): Promise<responses.SearchMonitoredResourcesResponse>;
    /**
     * Provided tags will be added or updated in the existing list of tags for the affected resources.
     * Resources to be updated are identified based on association types specified.
     * If association types not specified, then tags will be updated only for the resource identified by
     * the given monitored resource identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAndPropagateTagsRequest
     * @return UpdateAndPropagateTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/UpdateAndPropagateTags.ts.html |here} to see how to use UpdateAndPropagateTags API.
     */
    updateAndPropagateTags(updateAndPropagateTagsRequest: requests.UpdateAndPropagateTagsRequest): Promise<responses.UpdateAndPropagateTagsResponse>;
    /**
     * Update monitored resource by the given identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
     * Note that \"properties\" object, if specified, will entirely replace the existing object,
     * as part this operation.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateMonitoredResourceRequest
     * @return UpdateMonitoredResourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/stackmonitoring/UpdateMonitoredResource.ts.html |here} to see how to use UpdateMonitoredResource API.
     */
    updateMonitoredResource(updateMonitoredResourceRequest: requests.UpdateMonitoredResourceRequest): Promise<responses.UpdateMonitoredResourceResponse>;
}
