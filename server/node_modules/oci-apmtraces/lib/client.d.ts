/**
 * Application Performance Monitoring Trace Explorer API
 * Use the Application Performance Monitoring Trace Explorer API to query traces and associated spans in Trace Explorer. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
export declare enum QueryApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class QueryClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpOptions: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Returns a list of predefined Quick Pick queries intended to assist the user
     * to choose a query to run.  There is no sorting applied on the results.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListQuickPicksRequest
     * @return ListQuickPicksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/apmtraces/ListQuickPicks.ts.html |here} to see how to use ListQuickPicks API.
     */
    listQuickPicks(listQuickPicksRequest: requests.ListQuickPicksRequest): Promise<responses.ListQuickPicksResponse>;
    /**
     * NOTE: This function is deprecated in favor of listQuickPicksRecordIterator function.
     * Creates a new async iterator which will iterate over the models.QuickPickSummary objects
     * contained in responses from the listQuickPicks operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllQuickPicks(request: requests.ListQuickPicksRequest): AsyncIterableIterator<model.QuickPickSummary>;
    /**
     * NOTE: This function is deprecated in favor of listQuickPicksResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listQuickPicks operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllQuickPicksResponses(request: requests.ListQuickPicksRequest): AsyncIterableIterator<responses.ListQuickPicksResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.QuickPickSummary objects
     * contained in responses from the listQuickPicks operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listQuickPicksRecordIterator(request: requests.ListQuickPicksRequest): AsyncIterableIterator<model.QuickPickSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listQuickPicks operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listQuickPicksResponseIterator(request: requests.ListQuickPicksRequest): AsyncIterableIterator<responses.ListQuickPicksResponse>;
    /**
     * Retrieves the results (selected attributes and aggregations) of a query constructed according to the Application Performance Monitoring Defined Query Syntax.
     * Query results are filtered by the filter criteria specified in the where clause.
     * Further query results are grouped by the attributes specified in the group by clause.  Finally,
     * ordering (asc/desc) is done by the specified attributes in the order by clause.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param QueryRequest
     * @return QueryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/apmtraces/Query.ts.html |here} to see how to use Query API.
     */
    query(queryRequest: requests.QueryRequest): Promise<responses.QueryResponse>;
}
export declare enum TraceApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class TraceClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpOptions: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Gets the aggregated snapshot identified by trace ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAggregatedSnapshotRequest
     * @return GetAggregatedSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/apmtraces/GetAggregatedSnapshot.ts.html |here} to see how to use GetAggregatedSnapshot API.
     */
    getAggregatedSnapshot(getAggregatedSnapshotRequest: requests.GetAggregatedSnapshotRequest): Promise<responses.GetAggregatedSnapshotResponse>;
    /**
     * Gets the span details identified by spanId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSpanRequest
     * @return GetSpanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/apmtraces/GetSpan.ts.html |here} to see how to use GetSpan API.
     */
    getSpan(getSpanRequest: requests.GetSpanRequest): Promise<responses.GetSpanResponse>;
    /**
     * Gets the trace details identified by traceId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTraceRequest
     * @return GetTraceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/apmtraces/GetTrace.ts.html |here} to see how to use GetTrace API.
     */
    getTrace(getTraceRequest: requests.GetTraceRequest): Promise<responses.GetTraceResponse>;
    /**
     * Gets the trace snapshots data identified by trace ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTraceSnapshotRequest
     * @return GetTraceSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.62.0/apmtraces/GetTraceSnapshot.ts.html |here} to see how to use GetTraceSnapshot API.
     */
    getTraceSnapshot(getTraceSnapshotRequest: requests.GetTraceSnapshotRequest): Promise<responses.GetTraceSnapshotResponse>;
}
