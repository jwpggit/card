/**
 * Network Firewall API
 * Use the Network Firewall API to create network firewalls and configure policies that regulates network traffic in and across VCNs.
 * OpenAPI spec version: 20211001
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Description of NetworkFirewall Policy.
 */
export interface NetworkFirewallPolicy {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource - Network Firewall Policy.
     */
    "id": string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the NetworkFirewall Policy.
     */
    "compartmentId": string;
    /**
     * A user-friendly optional name for the firewall policy. Avoid entering confidential information.
     */
    "displayName": string;
    /**
     * The time instant at which the Network Firewall Policy was created in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * Example: `2016-08-25T21:10:29.600Z`
     *
     */
    "timeCreated": Date;
    /**
     * The time instant at which the Network Firewall Policy was updated in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * Example: `2016-08-25T21:10:29.600Z`
     *
     */
    "timeUpdated": Date;
    /**
     * The current state of the Network Firewall Policy.
     */
    "lifecycleState": model.LifecycleState;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    "lifecycleDetails"?: string;
    /**
     * Map defining secrets of the policy.
     * The value of an entry is a \"mapped secret\" consisting of a purpose and source.
     * The associated key is the identifier by which the mapped secret is referenced.
     *
     */
    "mappedSecrets"?: {
        [key: string]: model.MappedSecret;
    };
    /**
     * Map defining application lists of the policy.
     * The value of an entry is a list of \"applications\", each consisting of a protocol identifier (such as TCP, UDP, or ICMP) and protocol-specific parameters (such as a port range).
     * The associated key is the identifier by which the application list is referenced.
     *
     */
    "applicationLists"?: {
        [key: string]: Array<model.Application>;
    };
    /**
     * Map defining URL pattern lists of the policy.
     * The value of an entry is a list of URL patterns.
     * The associated key is the identifier by which the URL pattern list is referenced.
     *
     */
    "urlLists"?: {
        [key: string]: Array<model.UrlPattern>;
    };
    /**
     * Map defining IP address lists of the policy.
     * The value of an entry is a list of IP addresses or prefixes in CIDR notation.
     * The associated key is the identifier by which the IP address list is referenced.
     *
     */
    "ipAddressLists"?: {
        [key: string]: Array<string>;
    };
    /**
     * List of Security Rules defining the behavior of the policy.
     * The first rule with a matching condition determines the action taken upon network traffic.
     *
     */
    "securityRules"?: Array<model.SecurityRule>;
    /**
     * List of Decryption Rules defining the behavior of the policy.
     * The first rule with a matching condition determines the action taken upon network traffic.
     *
     */
    "decryptionRules"?: Array<model.DecryptionRule>;
    /**
     * Map defining decryption profiles of the policy.
     * The value of an entry is a decryption profile.
     * The associated key is the identifier by which the decryption profile is referenced.
     *
     */
    "decryptionProfiles"?: {
        [key: string]: model.DecryptionProfile;
    };
    /**
     * To determine if any Network Firewall is associated with this Network Firewall Policy.
     *
     */
    "isFirewallAttached": boolean;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: `{\"bar-key\": \"value\"}`
     *
     */
    "freeformTags": {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
     *
     */
    "definedTags": {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace NetworkFirewallPolicy {
    function getJsonObj(obj: NetworkFirewallPolicy): object;
    function getDeserializedJsonObj(obj: NetworkFirewallPolicy): object;
}
