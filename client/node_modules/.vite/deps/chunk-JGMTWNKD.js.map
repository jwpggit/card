{
  "version": 3,
  "sources": ["../../vuetify/src/components/VMenu/VMenu.tsx"],
  "sourcesContent": ["// Styles\nimport './VMenu.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\n\n// Utilities\nimport { computed, inject, mergeProps, provide, ref, shallowRef, watch } from 'vue'\nimport { VMenuSymbol } from './shared'\nimport { focusChild, genericComponent, getUid, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { Component } from 'vue'\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const makeVMenuProps = propsFactory({\n  // TODO\n  // disableKeys: Boolean,\n  id: String,\n\n  ...omit(makeVOverlayProps({\n    closeDelay: 250,\n    closeOnContentClick: true,\n    locationStrategy: 'connected' as const,\n    openDelay: 300,\n    scrim: false,\n    scrollStrategy: 'reposition' as const,\n    transition: { component: VDialogTransition as Component },\n  }), ['absolute']),\n}, 'VMenu')\n\nexport const VMenu = genericComponent<OverlaySlots>()({\n  name: 'VMenu',\n\n  props: makeVMenuProps(),\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const uid = getUid()\n    const id = computed(() => props.id || `v-menu-${uid}`)\n\n    const overlay = ref<VOverlay>()\n\n    const parent = inject(VMenuSymbol, null)\n    const openChildren = shallowRef(0)\n    provide(VMenuSymbol, {\n      register () {\n        ++openChildren.value\n      },\n      unregister () {\n        --openChildren.value\n      },\n      closeParents () {\n        setTimeout(() => {\n          if (!openChildren.value) {\n            isActive.value = false\n            parent?.closeParents()\n          }\n        }, 40)\n      },\n    })\n\n    watch(isActive, val => {\n      val ? parent?.register() : parent?.unregister()\n    })\n\n    function onClickOutside () {\n      parent?.closeParents()\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      if (props.disabled) return\n\n      if (e.key === 'Tab') {\n        isActive.value = false\n        overlay.value?.activatorEl?.focus()\n      }\n    }\n\n    function onActivatorKeydown (e: KeyboardEvent) {\n      if (props.disabled) return\n\n      const el = overlay.value?.contentEl\n      if (el && isActive.value) {\n        if (e.key === 'ArrowDown') {\n          e.preventDefault()\n          focusChild(el, 'next')\n        } else if (e.key === 'ArrowUp') {\n          e.preventDefault()\n          focusChild(el, 'prev')\n        }\n      } else if (['ArrowDown', 'ArrowUp'].includes(e.key)) {\n        isActive.value = true\n        e.preventDefault()\n        setTimeout(() => setTimeout(() => onActivatorKeydown(e)))\n      }\n    }\n\n    const activatorProps = computed(() =>\n      mergeProps({\n        'aria-haspopup': 'menu',\n        'aria-expanded': String(isActive.value),\n        'aria-owns': id.value,\n        onKeydown: onActivatorKeydown,\n      }, props.activatorProps)\n    )\n\n    useRender(() => {\n      const [overlayProps] = VOverlay.filterProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-menu',\n            props.class,\n          ]}\n          style={ props.style }\n          { ...overlayProps }\n          v-model={ isActive.value }\n          absolute\n          activatorProps={ activatorProps.value }\n          onClick:outside={ onClickOutside }\n          onKeydown={ onKeydown }\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => (\n              <VDefaultsProvider root=\"VMenu\">\n                { slots.default?.(...args) }\n              </VDefaultsProvider>\n            ),\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({ id, Î¨openChildren: openChildren }, overlay)\n  },\n})\n\nexport type VMenu = InstanceType<typeof VMenu>\n"],
  "mappings": "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",
  "names": ["makeVMenuProps", "propsFactory", "id", "String", "omit", "makeVOverlayProps", "closeDelay", "closeOnContentClick", "locationStrategy", "openDelay", "scrim", "scrollStrategy", "transition", "component", "VDialogTransition", "VMenu", "genericComponent", "name", "props", "emits", "value", "setup", "_ref", "slots", "isActive", "useProxiedModel", "scopeId", "useScopeId", "uid", "getUid", "computed", "overlay", "ref", "parent", "inject", "VMenuSymbol", "openChildren", "shallowRef", "provide", "register", "unregister", "closeParents", "setTimeout", "watch", "val", "onClickOutside", "onKeydown", "e", "disabled", "key", "activatorEl", "focus", "onActivatorKeydown", "el", "contentEl", "preventDefault", "focusChild", "includes", "activatorProps", "mergeProps", "useRender", "overlayProps", "VOverlay", "filterProps", "_createVNode", "_mergeProps", "class", "style", "$event", "activator", "default", "_len", "arguments", "length", "args", "Array", "_key", "VDefaultsProvider", "forwardRefs", "\u03A8openChildren"]
}
